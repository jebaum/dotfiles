# status bar {{{
set -g status-interval 1
set -g status-justify centre # center align window list
set -g status-left-length 30
set -g status-right-length 140
set -g status-left '#[fg=green,nobright][#[fg=red]G #[fg=green]#H #S:#I.#P#[fg=green,nobright] |'
set -g status-right '#[fg=green,nobright]| #[fg=cyan]#(cut -f 1-3 -d " " /proc/loadavg) #[fg=white]%k:%M:%S#[fg=green,nobright]]'

# colors
set -g status-fg white
set -g status-bg default
set -g status-style bright

# number from 1, not 0
set -g base-index 1
set -g pane-base-index 1

# default window title colors
set-window-option -g  window-status-style fg=white,bg=default,dim

# active window title colors
set-window-option -g window-status-current-style bg="#224488",fg=white,bright
# set-window-option -g window-status-current-format "(#I #W)"

# bell window title colors
set-window-option -g window-status-bell-style fg=white,bg=red,dim

# activity window title colors (caused by joins and sends)
set-window-option -g window-status-activity-style fg="#BBBBBB",bg="#114411",dim

# colorize messages in the command line
set-option -g message-style bg=black,fg=brightred
# }}}
# general settings {{{
set-option -g default-shell /bin/zsh
set-option -g default-command /bin/zsh # stop new tmux panes from sourcing (fzf) bash scripts

set-option -g renumber-windows on
set-option -g prefix C-g # C-g modifier instead of default C-b
bind-key C-g last-window     # C-g C-g to go to last active window

set -s escape-time 1     # Allows for faster key repetition

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Activity monitoring
setw -g monitor-activity off  # color statusbar. TODO this setting being on is eating terminal bells
# set -g visual-activity on  # show 'Activity in window...' message

set-option -g allow-rename off # don't auto rename windows
#set -g mode-mouse off          # rm mouse mode fail
set -g default-terminal "screen-256color"

#set window and border colors
set -g window-style 'bg=colour234'
set -g window-active-style 'bg=colour234'
set -g pane-border-style fg=colour250
set -g pane-active-border-style fg=colour201
# set -g pane-border-bg colour236
# set -g pane-active-border-bg colour250
# }}}
# hjkl {{{
# `C-g q` numbers all panes briefly
# `C-g o` rotates between panes, { and } move them within window
bind-key j swap-pane -D
bind-key k swap-pane -U

# Smart pane switching with awareness of vim splits, from vim-tmux-navigator
#C-hjkl   move between panes/vim splits
#M-hjkl   small tmux resize / small vim resize
#M-HJKL   big tmux resize / vim adjusted resize
#C-M-hjkl medium tmux resize
#C-HJKL   not usable
#C-M-HJKL not usable

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind-key -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

bind-key -n M-k if-shell "$is_vim" "send-keys M-k" "resize-pane -U 1"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j" "resize-pane -D 1"
bind-key -n M-h if-shell "$is_vim" "send-keys M-h" "resize-pane -L 1"
bind-key -n M-l if-shell "$is_vim" "send-keys M-l" "resize-pane -R 1"

bind-key -n M-K if-shell "$is_vim" "send-keys M-K" "resize-pane -U 10"
bind-key -n M-J if-shell "$is_vim" "send-keys M-J" "resize-pane -D 10"
bind-key -n M-H if-shell "$is_vim" "send-keys M-H" "resize-pane -L 10"
bind-key -n M-L if-shell "$is_vim" "send-keys M-L" "resize-pane -R 10"

bind-key -n C-M-K resize-pane -U 4
bind-key -n C-M-J resize-pane -D 4
bind-key -n C-M-H resize-pane -L 4
bind-key -n C-M-L resize-pane -R 4
# }}}
# keymaps {{{
# select pane using fztpane() shell function from fzf_utilities.sh
bind-key 0 run "tmux split-window -p 40 'zsh -ci fztpane'"

# open list of all files from locate, paste selected names into current window
bind-key -n 'M-`' run "tmux split-window -p 40 'tmux send-keys -t #{pane_id} \"$(locate / | fzf -m | paste -sd\\  -)\"'"

bind-key r source-file ~/.tmux.conf \; display-message "Config reloaded..."
bind-key A command-prompt "rename-window %%"

bind-key v split-window -h   # vim style vertical split
bind-key s split-window -v   # vim style horizontal split
bind-key a swap-window -t 1  # move window to index 1
bind m command-prompt "swap-window -t %%"  # move window to index 1. overrides "mark pane" which I never use

bind-key -n M-, previous-window
bind-key -n M-. next-window

# Vi copypaste mode
set-window-option -g mode-keys vi
bind-key -T copy-mode-vi 'k' send-keys -X cursor-up
bind-key -T copy-mode-vi 'h' send-keys -X cursor-left
bind-key -T copy-mode-vi 'j' send-keys -X cursor-down
bind-key -T copy-mode-vi 'l' send-keys -X cursor-right
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
bind-key -T copy-mode-vi 'y' send-keys -X copy-selection
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\\ select-pane -l

# pane/window management. { and } move
bind-key J command-prompt -p "join pane from:"  "join-pane -s ':%%'"
bind-key S command-prompt -p "send pane to:"    "join-pane -t ':%%'"
bind-key < split-window -h \; choose-window 'kill-pane ; join-pane -hs %%'
bind-key > split-window -h \; choose-window 'kill-pane ; join-pane -dht %%'
bind-key \\ break-pane -d    # break pane out into its own window, don't focus
bind-key Enter break-pane    # break pane out into its own window

# <prefix> <C-l> to clear screen, since C-l is now used for navigation
bind-key C-l send-keys 'C-l'
bind-key C-k send-keys 'C-k'
bind-key M-j send-keys 'M-j'
bind-key M-l send-keys 'M-l'

# }}}
# vim: foldmethod=marker textwidth=0
