# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi


setopt CLOBBER
export COLORTERM=truecolor
export EDITOR=nvim
export VISUAL=nvim
export LESS='--RAW-CONTROL-CHARS --hilite-search --HILITE-UNREAD --ignore-case --LONG-PROMPT --chop-long-lines --window=-4'
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export REPORTTIME=30
export BAT_THEME="gruvbox-dark"
export MANPAGER="sh -c 'col -bx | bat --theme Monokai\ Extended -l man -p --paging=always'"

stty -ixon  # stop C-s from activating scroll lock
ulimit -c unlimited

GPG_TTY=$(tty)
export GPG_TTY

bindkey -v
VIM_MODE_TRACK_KEYMAP=no # required to prevent zsh-vim-mode.plugin.zsh from stomping on my right prompt
MODE_INDICATOR="" # don't need the extra granula mode tracking that zsh-vim-mode.plugin.zsh provides
for config_file ($HOME/dotfiles/zsh/{*.zsh,plugins/*.zsh}); do
    source $config_file
done
fpath=($HOME/dotfiles/zsh/completion $fpath)
# these binds from fzf.zsh get stomped on by zsh-vim-mode which is sourced after it, but I want the rest of the vim-mode binds so manually put these ones back
bindkey '^R' fzf-history-widget
bindkey '^[d' fzf-cd-widget-fd

sudo-command-line() {
  [[ -z $BUFFER ]] && zle up-history
  [[ $BUFFER != sudo\ * ]] && BUFFER="sudo $BUFFER"
  zle end-of-line
}
zle -N sudo-command-line

source $HOME/dotfiles/scripts/git/git-extras/etc/git-extras-completion.zsh
source $HOME/dotfiles/scripts/fzf_utilities.sh

# list of actions here http://www.cs.elte.hu/zsh-manual/zsh_14.html
bindkey "^[[3~" delete-char         # make delete key work
bindkey "^[[7~" beginning-of-line   # make home key work
bindkey "^[[8~" end-of-line         # make end key work
bindkey "^[f"   forward-word
bindkey "^[b"   backward-word
bindkey "^[m"   copy-prev-shell-word
bindkey "^A"    beginning-of-line
bindkey "^B"    backward-char
bindkey "^E"    end-of-line
bindkey "^F"    forward-char
bindkey "^G"    delete-char         # C-g deletes character in front of cursor, opposite C-h
bindkey "^H"    backward-delete-char
# bindkey '^I'    expand-or-complete # using https://github.com/changyuheng/zsh-interactive-cd
bindkey "^K"    kill-line
bindkey "^L"    clear-screen
bindkey "^Q"    delete-word         # C-q deletes word in front of cursor, opposite C-w
bindkey "^[r"   history-incremental-search-backward
bindkey "^S"    sudo-command-line   # C-s inserts 'sudo' at beginning of line
bindkey "^U"    kill-whole-line
bindkey "^V"    vi-find-prev-char
bindkey "^W"    backward-delete-word
bindkey "^Y"    undo
bindkey "^_"    vi-find-next-char
bindkey "^@"    vi-repeat-find
bindkey "^?"    backward-delete-char
bindkey '^P'    history-substring-search-up           # bind P and N for EMACS mode history-substring-search
bindkey '^N'    history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up      # bind k and j for VI mode history-substring-search
bindkey -M vicmd 'j' history-substring-search-down
bindkey -M vicmd 'V' visual-mode                      # prezto binds 'v' to open $VISUAL
KEYTIMEOUT=1

my-backward-delete-word() {
    local WORDCHARS=${WORDCHARS/\//} # delete back to '/' character
    zle backward-delete-word
}
zle -N my-backward-delete-word
bindkey '^W' my-backward-delete-word

# http://sgeb.io/articles/zsh-zle-closer-look-custom-widgets/
# zle -N <widget name> <function name>
lskeyimpl() {
    if   [ "$WIDGET" = "lskey" ];  then BUFFER="ls"
    elif [ "$WIDGET" = "lslkey" ]; then BUFFER="ls -lh"
    fi
    zle accept-line
}
zle -N lskey lskeyimpl
zle -N lslkey lskeyimpl
bindkey '\el' lskey
bindkey '\eL' lslkey

gitstatuskeyimpl() {
    if git rev-parse --git-dir > /dev/null 2>&1; then
        if [ "$WIDGET" = "gitstatuskey" ]; then
            BUFFER="git status --column"
        elif [ "$WIDGET" = "gitstatusshortkey" ]; then
            BUFFER="git status --short"
        fi
        zle accept-line
    fi
}
zle -N gitstatuskey gitstatuskeyimpl
zle -N gitstatusshortkey gitstatuskeyimpl
bindkey '\eg' gitstatuskey
bindkey '\eG' gitstatusshortkey

killkeyimpl() {
    BUFFER="~/dotfiles/scripts/fkill.sh -9 all"
    zle accept-line
}
zle -N killkey killkeyimpl
bindkey '\ek' killkey

# updirkey() {
    # cd .. && zle reset-prompt
# }
# zle -N updirkey updirkey
# bindkey "" updirkey # Ctrl + /

# above `cd .. && zle reset-prompt` code doesn't work with p10k. see:
# https://github.com/romkatv/powerlevel10k/issues/72
# https://github.com/romkatv/zsh4humans/issues/65
# https://github.com/zsh-users/zsh-autosuggestions/issues/431
# instead have to use this slightly more sophisticated version:
function cd-up() {
  cd ..
  saved_buffer=$BUFFER
  saved_cursor=$CURSOR
  BUFFER=
  zle accept-line
}

function restore-buffer() {
  BUFFER=$saved_buffer
  CURSOR=$saved_cursor
  saved_buffer=
  saved_cursor=1
}

zle -N cd-up
zle -N restore-buffer

autoload -Uz add-zle-hook-widget
add-zle-hook-widget line-init restore-buffer

bindkey "" cd-up # Ctrl + /

popdkey() {
    if [ "$#dirstack" != "0" ]; then popd && zle reset-prompt; fi
}
zle -N popdkey popdkey
bindkey "" popdkey # Alt + Ctrl + /

if [ -n "$STARTUPDIR" ] && [ -d "$STARTUPDIR" ]; then
    cd $STARTUPDIR
    unset STARTUPDIR
fi

function chpwd() {
  print -Pn "\e]0;st: ${PWD/#${HOME}/~}\a"
}
chpwd # chpwd doesn't run on startup, so explicitly call it to set title when first opening shell

if [[ -e ~/dotfiles/zsh/zshrc.local ]]; then
    source ~/dotfiles/zsh/zshrc.local
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# customizing p1kk colors and formatting

POWERLEVEL9K_VCS_BRANCH_ICON='' # Branch icon. Set this parameter to '\uF126 ' for the popular Powerline branch icon.

POWERLEVEL9K_TIME_FOREGROUND=66
POWERLEVEL9K_TIME_FORMAT='%D{%H:%M:%S}' # setting this to the rainbow style from my homerolled prompt caused issues

POWERLEVEL9K_BACKGROUND=16 # for black bar across whole prompt line. may switch to gap char at some point for a thing line instead
POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR='' # ‚îÄ

POWERLEVEL9K_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL='%K{16} ' # Add a space between the end of left prompt and the filler.
POWERLEVEL9K_RIGHT_PROMPT_FIRST_SEGMENT_START_SYMBOL='%K{16} ' # Add a space between the filler and the start of right prompt.

ZLE_RPROMPT_INDENT=0 # https://github.com/romkatv/powerlevel10k/issues/68

# Default prompt symbol.
POWERLEVEL9K_PROMPT_CHAR_OK_VIINS_CONTENT_EXPANSION='%K{default} ‚ùØ'
POWERLEVEL9K_PROMPT_CHAR_ERROR_VIINS_CONTENT_EXPANSION='%K{default} ‚ùØ'
# Prompt symbol in command vi mode.
POWERLEVEL9K_PROMPT_CHAR_OK_VICMD_CONTENT_EXPANSION='%K{default} ‚ùÆ'
POWERLEVEL9K_PROMPT_CHAR_ERROR_VICMD_CONTENT_EXPANSION='%K{default} ‚ùÆ'
# Prompt symbol in visual vi mode.
POWERLEVEL9K_PROMPT_CHAR_OK_VIVIS_CONTENT_EXPANSION='%K{default} V'
POWERLEVEL9K_PROMPT_CHAR_ERROR_VIVIS_CONTENT_EXPANSION='%K{default} V'
# Prompt symbol in overwrite vi mode.
POWERLEVEL9K_PROMPT_CHAR_OK_VIOWR_CONTENT_EXPANSION='%K{default} ‚ñ∂'
POWERLEVEL9K_PROMPT_CHAR_ERROR_VIOWR_CONTENT_EXPANSION='%K{default} ‚ñ∂'

# Default current directory color.
POWERLEVEL9K_DIR_FOREGROUND=yellow
# Color of shortened directory segments.
POWERLEVEL9K_DIR_SHORTENED_FOREGROUND=103
# Color of the anchor directory segments. Anchor segments are never shortened. The first segment is always an anchor.
POWERLEVEL9K_DIR_ANCHOR_FOREGROUND=yellow
# Display anchor directory segments in bold.
POWERLEVEL9K_DIR_ANCHOR_BOLD=false
