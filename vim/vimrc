" Initial setup {{{
colorscheme guimiromod
runtime macros/matchit.vim
set guifont=DejaVuSansMonoforPowerline\ 11
let mapleader = ','
" NeoBundle {{{
let s:neobundle_dir=expand('~/.vim/bundle/neobundle.vim')
if !isdirectory(s:neobundle_dir)
  execute 'silent !git clone https://github.com/Shougo/neobundle.vim.git ' . s:neobundle_dir
endif

if has('vim_starting')
  set nocompatible
  execute 'set runtimepath^=' . s:neobundle_dir
endif

call neobundle#rc(fnamemodify(s:neobundle_dir, ':h'))

NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc.vim', { 'build' : { 'unix' : 'make -f make_unix.mak', }, }
NeoBundle 'amdt/vim-niji'
NeoBundle 'bling/vim-airline'
NeoBundle 'blueyed/vim-diminactive'
NeoBundle 'dockyard/vim-easydir'
NeoBundle 'gcmt/taboo.vim'
NeoBundle 'gregsexton/gitv'
NeoBundle 'honza/vim-snippets'
NeoBundle 'jamessan/vim-gnupg'                  " rarely used
NeoBundle 'justinmk/vim-sneak'
NeoBundle 'kshenoy/vim-togglelist'
NeoBundle 'majkinetor/unite-cmdmatch'
NeoBundle 'majutsushi/tagbar'                   " rarely used
NeoBundle 'mattn/gist-vim'
NeoBundle 'mattn/webapi-vim'
NeoBundle 'mhinz/vim-signify'                   " rarely used
NeoBundle 'mhinz/vim-startify'                  " not essential
NeoBundle 'mhinz/vim-tmuxify'
NeoBundle 'osyo-manga/vim-over'
NeoBundle 'rking/ag.vim'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'Shougo/unite-help'                   " rarely used
NeoBundle 'Shougo/unite-outline'                " rarely used
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimfiler.vim'
NeoBundle 'Shougo/vinarise.vim'                 " rarely used
NeoBundle 'SirVer/ultisnips'
NeoBundle 'tacroe/unite-mark'                   " rarely used
NeoBundle 'thinca/vim-qfreplace'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'tmhedberg/SimpylFold'
NeoBundle 'tommcdo/vim-exchange'
NeoBundle 'tommcdo/vim-lion'
NeoBundle 'tpope/vim-abolish'                   " rarely used, but should use more
NeoBundle 'tpope/vim-dispatch'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-obsession'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'tsukkee/unite-tag'
NeoBundle 'ujihisa/unite-colorscheme'
NeoBundle 'ujihisa/unite-locate'                " broken?
NeoBundle 'Valloric/MatchTagAlways'
NeoBundle 'vim-scripts/SyntaxRange'
NeoBundle 'wellle/targets.vim'
NeoBundle 'xolox/vim-misc'
NeoBundle 'bitbucket:abudden/TagHighlight'
NeoBundle 'PeterRincker/vim-argumentative'
NeoBundleCheck
" }}}
" }}}
" Misc {{{
" Mail / Mutt {{{
augroup MUTT " spell check, textwidth, F1-3 for wrapping paragraphs in useful ways
  autocmd BufRead /tmp/mutt-* set tw=72  " for email with mutt
  autocmd BufRead /tmp/mutt-* set spell  " <-- vim 7 required
augroup END
" }}}
" Fix borders of fullscreen GUI {{{
if has('gui_gtk') && has('gui_running')
    let s:border = synIDattr(synIDtrans(hlID('Normal')), 'bg', 'gui')
    exe 'silent !echo ''style "vimfix" { bg[NORMAL] = "' . escape(s:border, '#') . '" }'''.
                \' > ~/.gtkrc-2.0.mine'
    exe 'silent !echo ''widget "vim-main-window.*GtkForm" style "vimfix"'''.
                \' >> ~/.gtkrc-2.0.mine'
endif
" }}}
" Return to last edit position when opening files {{{
augroup ReturnToLast
  autocmd BufReadPost *
       \ if line("'\"") > 0 && line("'\"") <= line("$") |
       \   exe "normal! g`\"" |
       \ endif
augroup END
" }}}
" Command mode maps and abbreviations {{{
command! CD cd %:p:h
command! SearchCount %s///gn
cnoreabbrev lva lvimgrepadd
cnoreabbrev te tabedit
cnoreabbrev sv source ~/.vim/vimrc
cnoreabbrev sc source ~/.vim/colors/guimiromod.vim
cnoreabbrev va vimgrepadd

cnoremap %%     <C-R>=fnameescape(expand('%:h')).'/'<CR>
cnoremap <C-a>  <Home>
cnoremap <silent> <C-c> <C-c>:set nocursorcolumn<CR>
cnoremap <C-p>  <Up>
cnoremap <C-n>  <Down>
cnoremap <C-j>  <S-Left>
cnoremap <C-l>  <S-Right>

" allows incsearch highlighting for range commands
cnoremap $t <CR>:t''<CR>
cnoremap $T <CR>:''t.<CR>
cnoremap $m <CR>:m''<CR>
cnoremap $M <CR>:''m.<CR>
cnoremap $d <CR>:d<CR>``
" }}}
" SyntaxRange autocmds {{{
" last parameter is optional and can be any highlight group, determines delimiter colors
augroup SyntaxNotes
  " for backward compatibility
  au BufEnter *.txt,*.md call SyntaxRange#Include('@begin=c@',    '@end=c@',    'c',    'Comment')
  au BufEnter *.txt,*.md call SyntaxRange#Include('@begin=cpp@',  '@end=cpp@',  'cpp',  'Comment')
  au BufEnter *.txt,*.md call SyntaxRange#Include('@begin=lisp@', '@end=lisp@', 'lisp', 'Comment')
  au BufEnter *.txt,*.md call SyntaxRange#Include('@begin=ml@',   '@end=ml@',   'ocaml','Comment')
  au BufEnter *.txt,*.md call SyntaxRange#Include('@begin=text@', '@end=text@', 'text', 'Tabline')

  autocmd BufEnter *.txt,*.md call SyntaxRange#Include('```c',      '```', 'c',      'Comment')
  autocmd BufEnter *.txt,*.md call SyntaxRange#Include('```cpp',    '```', 'cpp',    'Comment')
  autocmd BufEnter *.txt,*.md call SyntaxRange#Include('```java',   '```', 'java',   'Comment')
  autocmd BufEnter *.txt,*.md call SyntaxRange#Include('```lisp',   '```', 'lisp',   'Comment')
  autocmd BufEnter *.txt,*.md call SyntaxRange#Include('```ml',     '```', 'ocaml',  'Comment')
  autocmd BufEnter *.txt,*.md call SyntaxRange#Include('```prolog', '```', 'prolog', 'Comment')
  autocmd BufEnter *.txt,*.md call SyntaxRange#Include('```python', '```', 'python', 'Comment')
  autocmd BufEnter *.txt,*.md call SyntaxRange#Include('```text',   '```', 'text',   'Tabline')
  autocmd BufEnter *.txt,*.md call SyntaxRange#Include('```javascript',   '```', 'javascript',   'Comment')
augroup END
" }}}
" FileType autocmds {{{
augroup FileTypeSettings
  autocmd BufWritePre * :call StripTrailingWhitespace()
  autocmd FileType gitcommit setlocal nocursorline nocursorcolumn
  autocmd FileType lisp setlocal foldmethod=indent foldlevel=0
  autocmd FileType make setlocal noexpandtab shiftwidth=4 tabstop=4
  autocmd FileType ocaml call MapInterpreter('ocaml', 'ocaml')
  autocmd FileType vimfiler setlocal relativenumber
  autocmd BufRead  .tags set filetype=tags
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd FileType markdown nnoremap <buffer> <leader>m1 :call MarkdownMargin(1)<CR>
  autocmd FileType markdown nnoremap <buffer> <leader>mb :call MarkdownToggle('md_linebreak', '+hard_line_breaks', 'turned on hard line breaks', 'turned off hard line breaks')<CR>
  autocmd FileType markdown nnoremap <buffer> <leader>md :call MarkdownToggle('md_doublespace', ' -H ~/dotfiles/pandoc/doublespace.sty', 'turned on double spacing', 'turned off double spacing')<CR>
  autocmd FileType markdown nnoremap <buffer> <leader>mm :call MarkdownToggle('md_mla', ' --template=mla_pandoc.tex', 'using MLA, double space and hard line break turned off. make sure mla_pandoc.tex is in current directory', 'not using MLA')<CR>
  autocmd FileType markdown nnoremap <buffer> <leader>mp :call MarkdownToggle('md_presentation', ' -t beamer --slide-level=2 -V theme:Copenhagen', 'using beamer with Copenhagen theme, slide level 2', 'not using beamer')<CR>
  autocmd FileType markdown nnoremap <buffer> <leader>ms :call MarkdownToggle('md_highlight', ' --no-highlight', 'turned on highlighting', 'turned off highlighting')<CR>
  autocmd FileType markdown nnoremap <buffer> <leader>mr :w!<CR>:silent call MarkdownCommandRun('','removed','pdf')<CR>:echo b:md_msg<CR>
  autocmd FileType markdown nnoremap <buffer> <leader>mv :call MarkdownCommandRun('','open', 'pdf')<CR>
  autocmd FileType markdown nnoremap <buffer><silent> <leader>mw :w!<CR>:silent call MarkdownCommandRun('quickrun','built','html')<CR>
  autocmd FileType markdown nnoremap <buffer><silent> gr :w!<CR>:silent call MarkdownCommandRun('quickrun','built','pdf')<CR>
  autocmd FileType tex      nnoremap <buffer> <leader>mv :call system("mupdf " . shellescape(expand('%:p:r')).'.pdf &')<CR>
  autocmd FileType tex      nnoremap <buffer><silent> gr  :w!<CR>:exe 'QuickRun latex -args "--pdf --warn all ' . shellescape(expand('%:p')) . '"'<CR>
augroup END
" }}}
" insert maps to complete {,(, mucks with undo and dot operator {{{
augroup BrackeAutoComplete
  autocmd Filetype c,cpp,java inoremap <buffer> { {}<Left>
  autocmd Filetype c,cpp,java inoremap <buffer> {<CR> {<CR>}<Esc>O<Tab>
  autocmd Filetype c,cpp,java inoremap <buffer> {{ {
  autocmd Filetype c,cpp,java inoremap <buffer> {} {}
  autocmd Filetype c,cpp,java inoremap <buffer> <expr> }  strpart(getline('.'), col('.')-1, 1) == "}" ? "\<Right>" : "}"
  autocmd Filetype c,cpp,java inoremap <buffer> ( ()<Left>
  autocmd Filetype c,cpp,java inoremap <buffer> (<CR> (<CR>)<Esc>O<Tab>
  autocmd Filetype c,cpp,java inoremap <buffer> (( (
  autocmd Filetype c,cpp,java inoremap <buffer> () ()
  autocmd Filetype c,cpp,java inoremap <buffer> <expr> )  strpart(getline('.'), col('.')-1, 1) == ")" ? "\<Right>" : ")"
augroup END
" }}}
" }}}
" Functions {{{
" StripTrailingWhitespace function {{{
function! StripTrailingWhitespace()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfunction
" }}}
" CustomMatch function {{{
function! CustomMatch(pattern)
  let search_string = "/" . a:pattern . "/"
  execute 'match MatchTarget ' . search_string
endfunction
command! -nargs=1 MatchText call CustomMatch(<f-args>)
cnoreabbrev mt MatchText
" }}}
" Qargs, Qdof, Qdol {{{
" :Qargs will populate the arglist with the files in the quickfix list
command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
cnoreabbrev qargs Qargs

" :Qdol applies an arbitrary command to every line found by :vimgrep (:Qdol normal @q)
command! -nargs=1 Qdol try | sil cfirst |
  \ while 1 | exec <q-args> | sil cn | endwhile |
  \ catch /^Vim\%((\a\+)\)\=:E\%(553\|42\):/ |
  \ endtry
cnoreabbrev qdol Qdol

" :Qdof applies an arbitrary command to every file found by :vimgrep (at line of first match)
command! -nargs=1 Qdof try | sil cfirst |
  \ while 1 | exec <q-args> | sil cnf | endwhile |
  \ catch /^Vim\%((\a\+)\)\=:E\%(553\|42\):/ |
  \ endtry
cnoreabbrev qdof Qdof

" implementation of Qargs
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction
" }}}
" Location list loop function {{{
function! WrapCommand(window, direction)
  if a:direction == "up"
    try
      execute a:window . 'previous'
    catch /^Vim\%((\a\+)\)\=:E553/
      execute a:window . 'last'
    endtry
  elseif a:direction == "down"
    try
      execute a:window . 'next'
    catch /^Vim\%((\a\+)\)\=:E553/
      execute a:window . 'first'
    endtry
  endif
endfunction

" nnoremap <Home> :call WrapCommand("l", "up")<CR>
" nnoremap <End>  :call WrapCommand("l", "down")<CR>
" }}}
" Visual mode increment function {{{
function! Increment()
  let a = line('.') - line("'<")
  let c = virtcol("'<")
  if a > 0
    execute 'normal! '.c.'|'.a."\<C-a>"
  endif
  normal `<
endfunction
" }}}
" VimGrep wrapper functions + search commands {{{
function! VimGrep(...)
  " pattern, target, open, command if 4, default to vim command if 3
  let pattern = a:1
  let target  = a:2
  let open    = a:3

  if a:0 == 3
      let searchcmd = 'vim'
  elseif a:0 == 4
      let searchcmd = a:4
  else
    echo 'invalid number of arguments'
    return
  endif

  if searchcmd != 'vimgrep' && searchcmd != 'vim' && searchcmd != 'vimgrepadd' &&
  \  searchcmd != 'lvimgrep' && searchcmd != 'lvim' && searchcmd != 'lvimgrepadd'
      let searchcmd = 'vim'
  endif

  if open == '1'
      let opencmd = searchcmd[0] == 'v' ? ' | cw' : ' | lw '
  else
      let opencmd = ''
  endif

  execute 'silent! noautocmd ' . searchcmd . ' /' . pattern . '/gj ' . target . opencmd
  redraw!
  echo    'silent! noautocmd ' . searchcmd . ' /' . pattern . '/gj ' . target . opencmd
endfunction

command! -nargs=1 -bar Bufsearch    call VimGrep(<f-args>,   '%',      '1', 'lvimgrep')
command! -nargs=1 -bar Bufsearchadd call VimGrep(<f-args>,   '%',      '1', 'lvimgrepadd')
command! -nargs=1 -bar Argsearch    call VimGrep(<f-args>,   '##',     '1')
command! -nargs=1 -bar Allsearch    call VimGrep(<f-args>,   './**/*', '1')
command! -nargs=? -bar -complete=custom,SearchOpts Buftodo      call VimGrep('\CTODO:', '%',      '1', <f-args>)
command! -nargs=? -bar Argtodo      call VimGrep('\CTODO', '##',     '1', <f-args>)
command! -nargs=? -bar Recurtodo    call VimGrep('\CTODO', './**/*', '1', <f-args>)
cnoreabbrev bufsearch    Bufsearch
cnoreabbrev bufsearchadd Bufsearchadd
cnoreabbrev argsearch    Argsearch
cnoreabbrev allsearch    Allsearch
cnoreabbrev buftodo      Buftodo
cnoreabbrev argtodo      Argtodo
cnoreabbrev recurtodo    Recurtodo
function! SearchOpts(A,L,P)
    return "lvimgrep\nlvimgrepadd\nvimgrep\nvimgrepadd"
endfun
" }}}
" Restore cursor/window position and last search {{{
function! Preserve(command)
  let curbuf = bufnr('%') " slightly cleaner than leaving a global mark
  let view = winsaveview()
  let search = @/

  let g:last_preserve = a:command
  execute a:command

  execute 'buffer ' . curbuf
  call winrestview(view)
  let @/ = search
endfunction
" TODO: test my BufGrep against the more verbose plugin/BufGrep.vim
command! -nargs=1 -bar BufGrep call Preserve('cexpr [] | silent! noautocmd bufdo vimgrepadd /' . <f-args> . '/gj %')
" }}}
" VisualStarSearch function and maps {{{
function! VSetSearch(cmdtype) " makes * and # work on visual mode too.
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction
" }}}
" GenerateRunCommand function {{{
" an autocmd sets b:dispatch to the output of this command for certain filetypes
function! GenerateRunCommand(...)
  if a:0 == 1
    let ftype = a:1
  else
    let ftype = &filetype
  endif

  if ftype == 'c' || ftype == 'cpp'
    return shellescape(expand('%:p:r'))
  elseif ftype == 'sh'
    return 'bash ' . shellescape(expand('%'))
  elseif ftype == 'python'
    return 'python ' . shellescape(expand('%'))
  elseif ftype == 'ocaml'
    return 'ocaml ' . shellescape(expand('%'))
  elseif ftype == 'lisp'
    return 'clisp ' . shellescape(expand('%'))
  endif

endfunction
" }}}
" Run shell command, put output in split function {{{
function! s:ExecuteInShell(command, bang)
  let _ = a:bang != '' ? s:_ : a:command == '' ? '' : join(map(split(a:command), 'expand(v:val)'))
  if (_ != '')
    let s:_ = _
    let bufnr = bufnr('%')
    let winnr = bufwinnr('^' . _ . '$')
    silent! execute  winnr < 0 ? 'belowright new ' . fnameescape(_) : winnr . 'wincmd w'
    setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile wrap number
    silent! :%d
    let message = 'Execute ' . _ . '...'
    call append(0, message)
    echo message
    silent! 2d | resize 1 | redraw
    silent! execute 'silent! %!'. _
    silent! execute 'resize ' . line('$')
    silent! execute 'syntax on'
    silent! execute 'autocmd BufUnload <buffer> execute bufwinnr(' . bufnr . ') . ''wincmd w'''
    silent! execute 'autocmd BufEnter <buffer> execute ''resize '' .  line(''$'')'
    silent! execute 'nnoremap <silent> <buffer> <CR> :call <SID>ExecuteInShell(''' . _ . ''', '''')<CR>'
    silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . _ . ''', '''')<CR>'
    silent! execute 'nnoremap <silent> <buffer> <LocalLeader>g :execute bufwinnr(' . bufnr . ') . ''wincmd w''<CR>'
    nnoremap <silent> <buffer> <C-W>_ :execute 'resize ' . line('$')<CR>
    silent! syntax on
  endif
endfunction

command! -complete=shellcmd -nargs=* -bang Shell call s:ExecuteInShell(<q-args>, '<bang>')
" }}}
" Create maps to run buffer/visual selection through interpreter {{{
function! MapInterpreter(ftype, interpreter)
  execute 'nnoremap <leader>i :silent! bdelete /tmp/' . a:ftype . '<CR>:15split /tmp/' . a:ftype . ' \| %d \|setlocal ft=' . a:ftype . ' \| setlocal autowrite \| r!' . a:interpreter . ' < #<CR>:normal ggdd<CR>:silent w \| echo "did some ' . a:interpreter . '"<CR><C-w>p'

  execute 'vnoremap <leader>i y:silent! bdelete /tmp/' . a:ftype . '<CR>:15split /tmp/' . a:ftype . ' \| %d _ \| put \| write<CR>:normal! gg<CR>:setlocal ft=' . a:ftype . ' \| setlocal autowrite \| r!' . a:interpreter . ' < %<CR>:normal! jdGggdd<CR>:silent w \| echo "did some ' . a:interpreter . '"<CR><C-w>p'
endfunction
" }}}
" toggle laststatus {{{
function! ToggleLaststatus()
  if &laststatus == 2
    set laststatus=1
    echo 'laststatus=1'
  else
    set laststatus=2
    echo 'laststatus=2'
  endif
endfunction
nnoremap g<Space> :call ToggleLaststatus()<CR>
" }}}
" View command to capture ex command output {{{
function! ViewWrapper(command)
  redir => message
  silent! execute a:command
  redir END
  tabnew
  call append(0, a:command)
  silent! put=message
  set nomodified
endfunction
command! -nargs=1 -bar View call ViewWrapper(<f-args>)
" }}}
" Markdown functions {{{
" default values. spaces are only put at beginning of option value if needed
function! MarkdownConfigInitialize()
  let mybuf = bufname('%')
  if getbufvar(mybuf, 'md_engine', 'empty') == 'empty'       | let b:md_engine = ' --latex-engine=xelatex' | endif
  if getbufvar(mybuf, 'md_margin', 'empty') == 'empty'       | let b:md_margin = '0.5in'                   | endif
  if getbufvar(mybuf, 'md_linebreak', 'empty') == 'empty'    | let b:md_linebreak = '+hard_line_breaks'    | endif
  if getbufvar(mybuf, 'md_highlight', 'empty') == 'empty'    | let b:md_highlight = ' --no-highlight'      | endif
  if getbufvar(mybuf, 'md_presentation', 'empty') == 'empty' | let b:md_presentation = ''                  | endif
  if getbufvar(mybuf, 'md_doublespace', 'empty') == 'empty'  | let b:md_doublespace  = ''                  | endif
  if getbufvar(mybuf, 'md_mla', 'empty') == 'empty'          | let b:md_mla = ''                           | endif
endfunction

function! MarkdownMargin(margin)
  let b:md_margin    = a:margin . 'in'
  let b:md_linebreak = ''
  echo "changed margin to " . b:md_margin . ', turned off hard line breaks'
endfunction

function! MarkdownToggle(option, val, onmsg, blankmsg)
  let current_val = getbufvar(bufname("%"), a:option)
  if current_val == a:val
    call setbufvar(bufname("%"), a:option, '')
    echo a:blankmsg
  else
    call setbufvar(bufname("%"), a:option, a:val)
    if a:option == 'md_mla'
      let b:md_doublespace = ''
      let b:md_linebreak   = ''
    endif
    echo a:onmsg
  endif
endfunction

function! MarkdownArgsGenerate(action, output)
  call MarkdownConfigInitialize()
  let dir_fullpath  = expand('%:p:h')
  let dir_current   = expand('%:p:h:t')
  let base_name     = expand('%:p:t:r')
  let input_file    = expand('%:p')
  let pandoc_args   = b:md_doublespace . b:md_mla . ' -V geometry:margin=' . b:md_margin . b:md_engine . ' -f markdown' . b:md_linebreak . b:md_presentation . b:md_highlight
  let b:md_msg      = a:action.' '.base_name.'.'.a:output
  let b:output_file = shellescape(dir_fullpath.'/'.base_name.'.'.a:output)

  if dir_current == "notes"
    let b:md_msg      = a:action.' '.a:output.'/'.base_name.'.'.a:output
    let b:output_file = shellescape(dir_fullpath.'/'.a:output.'/'.base_name.'.'.a:output)
    call system('mkdir '.shellescape(dir_fullpath.'/'.a:output))    " will run mkdir when not needed, but no big deal
  endif
  return pandoc_args . ' ' . shellescape(input_file) . ' -o ' . b:output_file
endfunction

function! MarkdownCommandRun(method, action, output)
  let b:pandoc_args = MarkdownArgsGenerate(a:action, a:output)
  if a:action == 'built'

    if a:method == 'quickrun'
      execute 'QuickRun pandoc -args "' . b:pandoc_args . '"'
    elseif a:method == 'vim'
      echom system('pandoc' . b:pandoc_args)
    elseif a:method == 'dispatch'
      execute 'Dispatch! pandoc' . b:pandoc_args
    endif

    if a:output == 'pdf'
      call system('killall -HUP mupdf')
    endif

  elseif a:action == 'removed'
    call system('rm '.b:output_file)
  elseif a:action == 'open'
    call system('mupdf ' . b:output_file . '&')
  endif
endfunction
" }}}
" }}}
" Plugins {{{
" airline {{{
let g:airline_theme             = "tomorrow"
let g:airline_detect_modified   = 1
let g:airline_detect_paste      = 1
let g:airline_inactive_collapse = 1
let g:airline_readonly_symbol   = ''
let g:airline_left_alt_sep      = ''
let g:airline_right_alt_sep     = ''

""" FANCY SETTINGS
" let g:airline_left_sep      = ''
" let g:airline_right_sep     = ''
" let g:airline_branch_prefix = ' '
" let g:airline_section_z     = "%l/%L:C%c"

""" MINIMAL SETTINGS
let g:airline_left_sep  = ''
let g:airline_right_sep = ''
let g:airline_section_z = "%l/%L:C%v"

let g:airline#extensions#whitespace#symbol              = 'Ξ'
let g:airline#extensions#whitespace#trailing_format     = 's[%s]'
let g:airline#extensions#whitespace#mixed_indent_format = 't[%s]'
let g:airline#extensions#hunks#enabled                  = 1
let g:airline#extensions#hunks#non_zero_only            = 1

let g:airline_theme_patch_func = 'AirlineThemePatch'
function! AirlineThemePatch(palette)
  if g:airline_theme == 'tomorrow'
    for colors in values(a:palette.inactive)
      let colors[2] = 231  " text color of split statusline
      let colors[3] = 58   " background color of split statusline
    endfor
  endif
endfunction
" }}}
" dispatch {{{
augroup DISPATCH
  autocmd FileType c,cpp,sh,python,ocaml,lisp     let b:dispatch = GenerateRunCommand()
augroup END
" }}}
" fugitive {{{
command! -nargs=1 -bar Gbranch   call GitBranch(<f-args>)
function! GitBranch(name)
    execute 'silent Git checkout -b ' . a:name
    redraw!
endfunction

command! -nargs=1 -bar Gcheckout   call GitCheckout(<f-args>)
function! GitCheckout(name)
    execute 'silent Git checkout ' . a:name
    redraw!
endfunction

autocmd User fugitive  " .. to go back up to parent directory when browsing git tree
  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
  \   nnoremap <buffer> .. :edit %:h<CR> |
  \ endif
autocmd BufReadPost fugitive://* set bufhidden=delete  " stop fugitive from making tons of buffers

function! FugitiveUnmap(key)
  silent! exe 'nunmap <buffer> '.a:key
endfunction

augroup FugitiveCMDs
  autocmd!
  autocmd FileType gitcommit,git,fugitiveblame autocmd FugitiveCMDs CursorMoved <buffer>
        \ call FugitiveUnmap('i') | autocmd! FugitiveCMDs * <buffer>
augroup END
" }}}
" gist {{{
let g:gist_post_private = 1 " gists are private by default
" }}}
" gitv {{{
let g:Gitv_OpenHorizontal = 1
let g:Gitv_WipeAllOnClose = 1
" }}}
" lion {{{
let g:lion_map_right   = 'ga'
let g:lion_map_left    = 'gA'
" }}}
" match tag {{{
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
    \ 'php' : 1,
    \}
" }}}
" neocomplete {{{
let g:neocomplete#enable_at_startup                 = 1
let g:neocomplete#enable_smart_case                 = 1
let g:neocomplete#enable_auto_select                = 0
let g:neocomplete#enable_refresh_always             = 0  " default is zero, heavy feature
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern          = '\*ku\*'

" use words with at least 7 letters from google-10000 for completion in .txt files
let g:neocomplete#sources#dictionary#dictionaries = {'text':'/home/james/dotfiles/vim/7mydict'}

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
" inoremap <expr> <C-k>    neocomplete#undo_completion()
inoremap <expr> <C-f>    neocomplete#complete_common_string()
inoremap <expr> <TAB>    pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr> <CR>     pumvisible() ? neocomplete#close_popup() : "\<CR>"
inoremap <expr> <C-h>    neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr> <BS>     neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr> <C-d>    neocomplete#cancel_popup()

" Enable omni completion.
autocmd FileType css            setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown  setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript     setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python         setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml            setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
" }}}
" nerdcommenter {{{
let NERDSpaceDelims     = 1
let NERDCompactSexyComs = 0
" }}}
" netrw {{{
let g:netrw_bufsettings = 'noma nomod nu nobl nowrap ro'
function! Netrwmap(lhskey, rhskey, pattern)
  if -1 != stridx(maparg(a:lhskey,"n"), a:pattern)
    exec 'nnoremap <buffer> <silent> <leader>'.a:lhskey.' '.maparg(a:rhskey,'n')
    silent! exe 'nunmap <buffer> '.a:lhskey
  else
    exec 'nmap <buffer><silent> ' . a:lhskey.' '.a:rhskey
  endif
endfunction

augroup NetrwCMDs
  autocmd!
  autocmd FileType netrw autocmd NetrwCMDs CursorMoved <buffer>
        \ call Netrwmap('i', 'i', '_Net') | call Netrwmap('I', 'I', '_Net') |
        \ call Netrwmap('j', '-', '_Net') | call Netrwmap('l', '<CR>', '_Net') |
        \ autocmd! NetrwCMDs * <buffer>
augroup END
" }}}
" niji {{{
let g:niji_matching_filetypes = ['lisp']
let g:niji_dark_colours = [
                        \ [ '82',  '#5Fff00'],
                        \ [ '202', '#FF5F00'],
                        \ [ '231', '#FFFFFF'],
                        \ [ '201', '#FF00FF'],
                        \ [ '226', '#FFFF00'],
                        \ [ '196', '#FF0000']
                        \ ]
" }}}
" quickrun {{{
let g:quickrun_config         = {}  " initialize dictionary
let g:quickrun_config._       = {'runner':'vimproc', 'runner/vimproc/updatetime':'250','hook/getpid/enable':'1'} " _ is fallback default value
let g:quickrun_config.generic = {'exec':'%c %a'}    " any arbitrary -command and -args
let g:quickrun_config.make    = {'exec':'make %a','runner':'vimproc','outputter':'quickfix'}
let g:quickrun_config.pandoc  = {'exec':'pandoc %a','runner':'vimproc','outputter':'quickfix','hook/markdown/enable':'1'}
let g:quickrun_config.python  = {'cmdopt':'-u','runner':'vimproc'}      " prevent python from buffering output
let g:quickrun_config.latex   = {'exec':'rubber %a','runner':'vimproc','outputter':'quickfix','hook/markdown/enable':'1'}

function! QuickRunSplit()
    " figure out what to prepend to :split command for buffer output based on current window size
    return winwidth(0) * 2 < winheight(0) * 5 ? "15" : "vertical 45"
endfunction

function! QuickRunTimeToggle()
  if !has_key(g:quickrun_config['_'], 'hook/time/enable')
    let g:quickrun_config['_']['hook/time/enable'] = '0'
  endif
  if g:quickrun_config['_']['hook/time/enable'] == '0'
    let g:quickrun_config['_']['hook/time/enable'] = '1'
    echo 'enabled time hook'
  else
    let g:quickrun_config['_']['hook/time/enable'] = '0'
    echo 'disabled time hook'
  endif
endfunction
" }}}
" signify {{{
let g:signify_disable_by_default = 1            " disable run by default
let g:signify_vcs_list           = [ 'git' ]    " I only use git for now
let g:signify_mapping_next_hunk  = '<leader>gk' " easier to use [c and ]c
let g:signify_mapping_prev_hunk  = '<leader>gi'
let g:signify_sign_change        = '~'
" }}}
" sneak  {{{
let g:sneak#use_ic_scs = 1
let g:sneak#s_next = 1
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T

nmap ; <Plug>SneakNext
omap ; <Plug>SneakNext
xmap ; <Plug>VSneakNext
nmap <Space>; <Plug>SneakPrevious
omap <Space>; <Plug>SneakPrevious
xmap <Space>; <Plug>SneakPrevious

nmap ,<Space> <Plug>(SneakStreak)
nmap <Space>, <Plug>(SneakStreakBackward)
" }}}
" startify {{{
let g:startify_list_order        = ['bookmarks', 'dir', 'files', 'sessions']
let g:startify_bookmarks         = [ '~/dotfiles/vim/vimrc', '~/dotfiles/aliases', '~/Dropbox/todo/TODO.txt' ]
let g:startify_files_number      = 7
let g:startify_session_detection = 1 " show session when Session.vim is found in current directory
let g:startify_session_autoload  = 0  " opening directories with a Session.vim will have it auto load
let g:startify_change_to_dir     = 1     " when opening file or bookmark, change to its directory
let g:startify_custom_indices    = ['a','f','h','j','k','l','w','r','u','o','p','z','x','n','m']
let g:startify_custom_header     = [
  \ '    /\\\        /\\\   /\\\\\\\\\\\   /\\\\            /\\\\  ',
  \ '    \/\\\       \/\\\  \/////\\\///   \/\\\\\\        /\\\\\\  ',
  \ '     \//\\\      /\\\       \/\\\      \/\\\//\\\    /\\\//\\\  ',
  \ '       \//\\\    /\\\        \/\\\      \/\\\\///\\\/\\\/ \/\\\  ',
  \ '         \//\\\  /\\\         \/\\\      \/\\\  \///\\\/   \/\\\  ',
  \ '           \//\\\/\\\          \/\\\      \/\\\    \///     \/\\\  ',
  \ '             \//\\\\\           \/\\\      \/\\\             \/\\\  ',
  \ '               \//\\\         /\\\\\\\\\\\  \/\\\             \/\\\  ',
  \ '                 \///         \///////////   \///              \///   ',
  \ '',
  \ '',
  \ ]
" }}}
" syntastic {{{
let g:syntastic_c_compiler               = 'clang'
let g:syntastic_c_compiler_options       = ' -Wall -Wextra'
let g:syntastic_cpp_compiler             = 'clang++'
let g:syntastic_cpp_compiler_options     = ' -Wall -Wextra'

function! SyntasticOpenMP()
  let g:syntastic_c_compiler         = 'gcc'
  let g:syntastic_c_compiler_options = ' -I/usr/lib/gcc/x86_64-unknown-linux-gnu/4.8.2/include -fopenmp -Wall -Wextra'
endfunction

augroup OPENMP
  autocmd BufEnter /home/james/Dropbox/Documents/UCLA/Y3Q2/CS133/* call SyntasticOpenMP()
augroup END

let g:syntastic_aggregate_errors         = 1         " display all errors
let g:syntastic_always_populate_loc_list = 1 " always put detecter errors in location list
let g:syntastic_check_on_wq              = 0
let g:syntastic_error_symbol             = '✗✗'
let g:syntastic_warning_symbol           = '⚠⚠'
let g:syntastic_stl_format               = '[%E{E:%fe-%e}%B{|}%W{W:%fw-%w}]'
let g:syntastic_ignore_files = [
    \ '/home/james/Dropbox/Documents/UCLA/Y3Q1/CS118/Homework',
    \ '\m\.tex']
" }}}
" taboo {{{
" let g:taboo_tab_format = "%N %1a%m "
let g:taboo_tab_format = "%N %f%m "
" }}}
" tagbar {{{
let g:tagbar_left             = 1   " default is to open on right
let g:tagbar_width            = 50  " default is 40
let g:tagbar_indent           = 1   " default is 2
let g:tagbar_show_linenumbers = 2   " relative line numbers
let g_tagbar_autoshowtag      = 1   " auto unfold any parents so highlighted tag is shown
let g:tagbar_sort             = 0   " sort tags by position in source file, not alphabetically
" }}}
" taghighlight {{{
if !exists('g:TagHighlightSettings')
  let g:TagHighlightSettings = {}
endif
let g:TagHighlightSettings['DoNotGenerateTags'] = 1 " don't generate tags
let g:TagHighlightSettings['TagFileName'] = '.tags'
let g:TagHighlightSettings['TypesFilePrefix'] = '.types' " make taghl file hidden
let g:TagHighlightSettings['ProjectConfigFileName'] = '.taghl_config.txt'
" }}}
" tmuxify {{{
let g:tmuxify_custom_command = 'tmux split-window -dp 25'
let g:tmuxify_map_prefix = ''
let g:tmuxify_run = {}

function! SetTmuxifyRun()
  if &filetype != ''
    execute 'let g:tmuxify_run.' . &filetype . '="' . GenerateRunCommand() . '"'
  endif
endfunction

augroup TMUXIFY
  autocmd BufEnter * call SetTmuxifyRun()
augroup END
" }}}
" ultisnips {{{
let g:UltiSnipsExpandTrigger       = "<C-l>"
let g:UltiSnipsJumpForwardTrigger  = "<C-l>"
let g:UltiSnipsJumpBackwardTrigger = "<C-j>"
let g:UltiSnipsListSnippets        = "<C-e>"
let g:snips_author                 = 'James Baumgarten'
" }}}
" unite {{{
" Unite Menus {{{
let g:unite_source_menu_menus = {}
" menu descriptions and maps {{{
nnoremap <silent> <Space>m :Unite -start-insert menu<CR>

nnoremap <silent> <Space>g :Unite -silent -winheight=25 -start-insert menu:git<CR>
nnoremap <silent> <Space>n :Unite -silent -start-insert menu:neobundle<CR>
nnoremap <silent> <Space>v :Unite menu:vim -silent -start-insert<CR>

let g:unite_source_menu_menus.git        = {'description': '        fugitive and other git commands                 <Space>g'}
let g:unite_source_menu_menus.navigation = {'description': ' navigate by buffers, tabs & windows             <Space>b'}
let g:unite_source_menu_menus.neobundle  = {'description': '  plugins administration with neobundle           <Space>n'}
let g:unite_source_menu_menus.vim        = {'description': '        vim                                             <Space>v'}
" }}}
" git menu {{{
let g:unite_source_menu_menus.git.command_candidates = [
\['▷ gitv commit browser            N/A     (gitv)              ', 'Gitv'],
\['▷ gitv file browser              N/A     (gitv)              ', 'Gitv!'],
\['▷ git add                        ,ga     (fugitive)          ', 'Git add %:p'],
\['▷ git checkout -b                ,gb     (fugitive)          ', 'exe "silent Git checkout -b " input("Branch Name: ") | redraw!'],
\['▷ git blame                      ,gB     (fugitive)          ', 'Gblame'],
\['▷ git commit --verbose           ,gc     (fugitive)          ', 'Gcommit --verbose'],
\['▷ git diff                       ,gd     (fugitive)          ', 'Gdiff'],
\['▷ git edit                       ,ge     (fugitive)          ', 'Gedit'],
\['▷ git grep -i                    ,gg     (fugitive)          ', 'exe "silent Ggrep -i ".input("Pattern: ") | copen'],
\['▷ git log - all commits          ,gla    (fugitive)          ', 'exe "silent Glog -- | redraw! | copen"'],
\['▷ git log - all commits for file ,glf    (fugitive)          ', 'exe "silent Glog -- % | redraw! | copen"'],
\['▷ git log - file versions        ,gli    (fugitive)          ', 'exe "silent Glog | redraw! | copen"'],
\['▷ git mv                         ,gm     (fugitive)          ', 'exe "Gmove " input("new filename: ")'],
\['▷ git push                       ,gp     (fugitive, dispatch)', 'Dispatch! git push'],
\['▷ git pull                       ,gP     (fugitive, dispatch)', 'Dispatch! git pull'],
\['▷ git checkout                   ,gr     (fugitive)          ', 'Gread'],
\['▷ git status                     ,gs     (fugitive)          ', 'Gstatus'],
\['▷ git add/stage                  ,gw     (fugitive)          ', 'Gwrite'],
\['▷ git command                    N/A     (fugitive)          ', 'exe "Git! " input("git command: ")'],
\['▷ git grep - messages            N/A     (fugitive)          ', 'exe "silent Glog --grep=".input("Pattern: ") | redraw!'],
\['▷ git grep - text                N/A     (fugitive)          ', 'exe "silent Glog -S".input("Pattern: ") | redraw!'],
\['▷ git rm                         N/A     (fugitive)          ', 'Gremove'],
\['▷ git browse                     N/A     (fugitive)          ', 'Gbrowse'],
\['▷ git init                       N/A     (git)               ', 'Unite output:echo\ system("git\ init")'],
\]
" }}}
" navigation menu: buffers, tabs & windows {{{
let g:unite_source_menu_menus.navigation.command_candidates = [
    \['▷ buffers                                                      ,b', 'Unite buffer'],
    \['▷ tabs                                                         ,B', 'Unite tab'],
    \['▷ windows', 'Unite window'],
    \['▷ location list', 'Unite location_list'],
    \['▷ quickfix', 'Unite quickfix'],
    \['▷ resize windows                                               C-C C-W', 'WinResizerStartResize'],
    \['▷ new vertical window                                          ,v', 'vsplit'],
    \['▷ new horizontal window                                        ,h', 'split'],
    \['▷ close current window                                         ,k', 'close'],
    \['▷ toggle quickfix window                                       ,q', 'normal ,q'],
    \['▷ zoom                                                         ,z', 'ZoomWinTabToggle'],
    \['▷ delete buffer                                                ,K', 'bd'],
    \]
nnoremap <silent>[menu]b :Unite -silent menu:navigation<CR>
" }}}
" neobundle menu {{{
let g:unite_source_menu_menus.neobundle.command_candidates = [
\['▷ neobundle',                'Unite neobundle'],
\['▷ neobundle log',            'Unite neobundle/log'],
\['▷ neobundle lazy',           'Unite neobundle/lazy'],
\['▷ neobundle update',         'Unite -no-start-insert neobundle/update'],
\['▷ neobundle search',         'Unite neobundle/search'],
\['▷ neobundle install',        'Unite neobundle/install'],
\['▷ neobundle check',          'Unite -no-empty output:NeoBundleCheck'],
\['▷ neobundle docs',           'Unite output:NeoBundleDocs'],
\['▷ neobundle clean',          'NeoBundleClean'],
\['▷ neobundle rollback',       'exe "NeoBundleRollback" input("plugin: ")'],
\['▷ neobundle list',           'Unite output:NeoBundleList'],
\['▷ neobundle direct edit',    'NeoBundleExtraEdit'],
\]
" }}}
" vim menu {{{
let g:unite_source_menu_menus.vim.command_candidates = [
\['▷ choose colorscheme', 'Unite colorscheme -auto-preview -no-start-insert'],
\['▷ mappings', 'Unite mapping -start-insert'],
\['▷ edit configuration file (vimrc)', 'edit $MYVIMRC'],
\['▷ choose filetype', 'Unite -start-insert filetype'],
\['▷ vim help', 'Unite -start-insert help'],
\['▷ vim commands', 'Unite -start-insert command'],
\['▷ vim functions', 'Unite -start-insert function'],
\['▷ vim runtimepath', 'Unite -start-insert runtimepath'],
\['▷ vim command output', 'Unite output'],
\['▷ unite sources', 'Unite source'],
\['▷ kill process', 'Unite -default-action=sigkill -start-insert process'],
\['▷ launch executable (dmenu like)', 'Unite -start-insert launcher'],
\]
" }}}
" }}}
" Unite Settings {{{
let g:unite_cursor_line_highlight = "UniteSel"
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts =
  \ '--line-numbers --nocolor --nogroup --hidden --ignore ' .
  \  '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
  let g:unite_source_grep_recursive_opt = ''
elseif executable('ack-grep')
  let g:unite_source_grep_command = 'ack-grep'
  let g:unite_source_grep_default_opts = '--no-heading --no-color -a -H'
  let g:unite_source_grep_recursive_opt = ''
endif
call unite#set_profile('outline', 'smartcase',  1)
let g:unite_source_outline_filetype_options = {
    \ '*': {
    \   'auto_update': 1,
    \   'auto_update_event': 'write',
    \   'ignore_types': ['comment'],
    \ },
    \}
augroup unite
  autocmd FileType unite call s:unite_my_settings()
augroup END
let g:unite_source_file_mru_long_limit      = 3000
let g:unite_source_directory_mru_long_limit = 3000
let g:unite_enable_start_insert             = 1
let g:unite_winheight                       = 20
let g:unite_split_rule                      = 'botright'
let g:unite_prompt                          = '» '
let g:unite_update_time                     = 500   " in milliseconds
let g:unite_source_rec_async_command        = 'ag --nocolor --nogroup --hidden -g ""'
let g:unite_source_history_yank_enable      = 1
let g:unite_locate_command                  = 'locate -i -l %d -e %s'
let g:unite_enable_ignore_case              = 1
let g:unite_enable_smart_case               = 1
call unite#filters#matcher_default#use(['matcher_fuzzy']) " enable fuzzy matching
function! s:unite_my_settings()
  nmap <buffer> <ESC>   <Plug>(unite_exit)
  nmap <buffer> <C-c>   <Plug>(unite_exit)
  imap <buffer> <C-c>   <Plug>(unite_exit)
  imap <buffer> <C-d>   <Plug>(unite_insert_leave)

  imap <buffer><expr> j unite#smart_map('j', '')
  imap <buffer> <Tab>   <Plug>(unite_select_next_line)
  imap <buffer> <S-Tab> <Plug>(unite_select_previous_line)
  imap <buffer> <C-w>   <Plug>(unite_delete_backward_path)
  nmap <buffer> '       <Plug>(unite_quick_match_default_action)
  imap <buffer> '       <Plug>(unite_quick_match_default_action)
  nmap <buffer> x       <Plug>(unite_quick_match_choose_action)
  imap <buffer><expr> x unite#smart_map('x', "\<Plug>(unite_quick_match_choose_action)")
  nmap <buffer> <C-z>   <Plug>(unite_toggle_transpose_window)
  imap <buffer> <C-z>   <Plug>(unite_toggle_transpose_window)
  nmap <buffer> <C-y>   <Plug>(unite_narrowing_path)
  imap <buffer> <C-y>   <Plug>(unite_narrowing_path)
  nmap <buffer> <C-j>   <Plug>(unite_toggle_auto_preview)
  nmap <buffer> <C-r>   <Plug>(unite_narrowing_input_history)
  imap <buffer> <C-r>   <Plug>(unite_narrowing_input_history)
  nnoremap <silent><buffer><expr> l unite#smart_map('l', unite#do_action('default'))

  let unite = unite#get_current_unite()
  if unite.buffer_name =~# '^search'
    nnoremap <silent><buffer><expr> r     unite#do_action('replace')
  else
    nnoremap <silent><buffer><expr> r     unite#do_action('rename')
  endif

  nnoremap <silent><buffer><expr> cd     unite#do_action('lcd')
  nnoremap <buffer><expr> S      unite#mappings#set_current_filters(
          \ empty(unite#mappings#get_current_filters()) ?
          \ ['sorter_reverse'] : [])

  imap <silent><buffer><expr> <C-s>     unite#do_action('above')
  imap <silent><buffer><expr> <C-k>     unite#do_action('below')
  imap <silent><buffer><expr> <C-x>     unite#do_action('left')
  imap <silent><buffer><expr> <C-v>     unite#do_action('right')
  imap <silent><buffer><expr> <C-t>     unite#do_action('tabopen')
  imap <silent><buffer><expr> <C-y>     unite#do_action('tabdrop')
  imap <silent><buffer><expr> <C-j>     unite#do_action('tabdrop')
  imap <silent><buffer><expr> <C-g>     unite#do_action('tabdrop')
  imap <buffer>               <C-o>     <Plug>(unite_toggle_mark_current_candidate)

  nmap <silent><buffer><expr> <C-s>     unite#do_action('above')
  nmap <silent><buffer><expr> <C-k>     unite#do_action('below')
  nmap <silent><buffer><expr> <C-x>     unite#do_action('left')
  nmap <silent><buffer><expr> <C-v>     unite#do_action('right')
  nmap <silent><buffer><expr> <C-t>     unite#do_action('tabopen')
  nmap <silent><buffer><expr> <C-y>     unite#do_action('tabdrop')
  nmap <silent><buffer><expr> <C-j>     unite#do_action('tabdrop')
  nmap <silent><buffer><expr> <C-g>     unite#do_action('tabdrop')
  nmap <buffer>               <C-o>     <Plug>(unite_toggle_mark_current_candidate)

  nmap <buffer> i     <Plug>(unite_loop_cursor_up)
  nmap <buffer> k     <Plug>(unite_loop_cursor_down)
  nmap <buffer> h     <Plug>(unite_insert_enter)
  nmap <buffer> H     <Plug>(unite_insert_head)
  nmap <buffer> l     <Plug>(unite_do_default_action)
endfunction
" }}}
" }}}
" vimfiler {{{
let g:vimfiler_as_default_explorer  = 1
let g:vimfiler_safe_mode_by_default = 0
let g:vimfiler_ignore_pattern       = '\.o\|^\.'  " ignore object files and dotfiles
let g:vimfiler_explorer_columns     = ""
augroup vimfiler
  autocmd FileType vimfiler call s:vimfiler_my_settings()
augroup END

function! s:vimfiler_my_settings()
  " non defaults
  nmap <buffer> h  <Plug>(vimfiler_toggle_mark_current_line)
  nmap <buffer> i  <Plug>(vimfiler_loop_cursor_up)
  nmap <buffer> j  <Plug>(vimfiler_smart_h)
  nmap <buffer> k  <Plug>(vimfiler_loop_cursor_down)
  nmap <buffer> l  <Plug>(vimfiler_expand_tree)
  nmap <buffer> cc <Plug>(vimfiler_copy_file)
  nmap <buffer> dd <Plug>(vimfiler_delete_file)
  nmap <buffer> gk <Plug>(vimfiler_jump_last_child)
  nmap <buffer> gi <Plug>(vimfiler_jump_first_child)
  nmap <silent><buffer><expr> v vimfiler#do_action('vsplit')
  nmap <silent><buffer><expr> s vimfiler#do_action('split')
  nmap <silent><buffer><expr> p vimfiler#do_action('tabdrop')
  nmap <silent><buffer><expr> o vimfiler#do_action('above')
  nmap <silent><buffer><expr> b vimfiler#do_action('below')
  nmap <silent><buffer><expr> x vimfiler#do_action('ex')
  nmap <silent><buffer><expr> f vimfiler#do_action('grep')
  nmap <silent><buffer><expr> t vimfiler#do_action('tabopen')
  nmap <silent><buffer><expr> u vimfiler#do_action('rec/async')
  nnoremap <buffer> <C-b> <C-^>zvzz

  " defaults
  nmap <buffer> gg        <Plug>(vimfiler_cursor_top)
  nmap <buffer> <C-l>     <Plug>(vimfiler_redraw_screen)
  nmap <buffer> <S-Space> <Plug>(vimfiler_toggle_mark_current_line_up)
  nmap <buffer> *         <Plug>(vimfiler_toggle_mark_all_lines)
  nmap <buffer> &         <Plug>(vimfiler_mark_similar_lines)
  nmap <buffer> U         <Plug>(vimfiler_clear_mark_all_lines)
  nmap <buffer> m         <Plug>(vimfiler_move_file)
  nmap <buffer> Cc        <Plug>(vimfiler_clipboard_copy_file)
  nmap <buffer> Cm        <Plug>(vimfiler_clipboard_move_file)
  nmap <buffer> Cp        <Plug>(vimfiler_clipboard_paste)
  nmap <buffer> r         <Plug>(vimfiler_rename_file)
  nmap <buffer> K         <Plug>(vimfiler_make_directory)
  nmap <buffer> N         <Plug>(vimfiler_new_file)
  nmap <buffer> e         <Plug>(vimfiler_execute)
  nmap <buffer> L         <Plug>(vimfiler_switch_to_drive)
  nmap <buffer> ~         <Plug>(vimfiler_switch_to_home_directory)
  nmap <buffer> \         <Plug>(vimfiler_switch_to_root_directory)
  nmap <buffer> <C-j>     <Plug>(vimfiler_switch_to_history_directory)
  nmap <buffer> <BS>      <Plug>(vimfiler_switch_to_parent_directory)
  nmap <buffer> .         <Plug>(vimfiler_toggle_visible_ignore_files)
  nmap <buffer> H         <Plug>(vimfiler_popup_shell)
  nmap <buffer> <Enter>   <Plug>(vimfiler_edit_file)
  nmap <buffer> E         <Plug>(vimfiler_split_edit_file)
  nmap <buffer> B         <Plug>(vimfiler_edit_binary_file)
  nmap <buffer> ge        <Plug>(vimfiler_execute_external_filer)
  nmap <buffer> !         <Plug>(vimfiler_execute_shell_command)
  nmap <buffer> q         <Plug>(vimfiler_hide)
  nmap <buffer> Q         <Plug>(vimfiler_exit)
  nmap <buffer> -         <Plug>(vimfiler_close)
  nmap <buffer> ?         <Plug>(vimfiler_help)
  nmap <buffer> O         <Plug>(vimfiler_open_file_in_another_vimfiler)
  nmap <buffer> <C-g>     <Plug>(vimfiler_print_filename)
  nmap <buffer> g<C-g>    <Plug>(vimfiler_toggle_maximize_window)
  nmap <buffer> yy        <Plug>(vimfiler_yank_full_path)
  nmap <buffer> M         <Plug>(vimfiler_set_current_mask)
  nmap <buffer> gr        <Plug>(vimfiler_grep)
  nmap <buffer> gf        <Plug>(vimfiler_find)
  nmap <buffer> S         <Plug>(vimfiler_select_sort_type)
  nmap <buffer> <C-v>     <Plug>(vimfiler_switch_vim_buffer_mode)
  nmap <buffer> gc        <Plug>(vimfiler_cd_vim_current_dir)
  nmap <buffer> gs        <Plug>(vimfiler_toggle_safe_mode)
  nmap <buffer> gS        <Plug>(vimfiler_toggle_simple_mode)
  nmap <buffer> a         <Plug>(vimfiler_choose_action)
  nmap <buffer> Y         <Plug>(vimfiler_pushd)
  nmap <buffer> P         <Plug>(vimfiler_popd)
  nmap <buffer> T         <Plug>(vimfiler_expand_tree_recursive)
  nmap <buffer> I         <Plug>(vimfiler_cd_input_directory)
endfunction
" }}}
" youcompleteme {{{
let g:ycm_collect_identifiers_from_tags_files           = 1
let g:ycm_complete_in_strings                           = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_confirm_extra_conf                            = 0
let g:ycm_global_ycm_extra_conf                         = '/home/james/dotfiles/ycm_extra_conf.py'
let g:ycm_filetype_blacklist                            = {
    \ 'tagbar' : 1,
    \ 'qf' : 1,
    \ 'notes' : 1,
    \ 'unite' : 1,
    \ 'vimwiki' : 1,
    \ 'pandoc' : 1
    \}
" }}}
" }}}
" General {{{
" Set options {{{
set exrc                       " allow directory specific .vimrc files
set secure                     " prevent directory specific .vimrcs from doing malicious things
set ttyfast                    " redraw screen faster
set lazyredraw                 " don't redraw the screen while executing macros
set restorescreen=on           " restore screen contents on exit
set clipboard=unnamedplus      " by default, use system clipboard for yanks ('+' register)
set titlestring=%t\            " file name
set title titlelen=150         " max length of title string
set number                     " show line numbers
set relativenumber             " use relative line numbers
set backspace=indent,eol,start " allow backspace in insert mode
set esckeys                    " make numpad work
set autoread                   " reload files changed outside of vim
set splitbelow                 " splits open below
set splitright                 " vsplits open on right
set hidden                     " allows navigating away from buffers with unsaved changes
set fillchars=""               " no dashes in folds or vertical bars in vsplits
set noruler                    " don't show the ruler
set laststatus=2               " always display the statusline
set history=1000               " length of command history
set showmode                   " show what mode we're in on the bottom line
set showcmd                    " show current command or visual selection info in bottom line
set cmdwinheight=10            " height of command line window
set showmatch                  " flash to matching paren when typing
set matchtime=3                " tenths of a second to flash to matching paren
set cursorline                 " hilight cursor line
set incsearch                  " find as you type
set hlsearch                   " hilight search terms
set magic                      " change how backslashes are handled in searches
set ignorecase                 " case insensitive search by default
set smartcase                  " case sensitive search if search contains uppercase letter
set nostartofline              " don't reset cursor to start of line when moving around
set nrformats=hex              " for C-a and C-x. recognize '0x' prefix as hex
set scrolljump=1               " lines to scroll when cursor leaves screen
set scrolloff=1                " start scrolling when 8 lines away from margins
set updatetime=4000            " swap file writes and CursorHold autocmd. weird fold closing problem
set encoding=utf8              " new files use utf-8 encoding by default
set ffs=unix,dos,mac           " new files use unix line endings by default
set timeout
set timeoutlen=3000
set ttimeoutlen=100
set cryptmethod=blowfish       " more secure encryption for vim -x
set switchbuf=usetab           " look to see if buffer is already open in another window or tab
set formatoptions-=r           " don't continue comment when hitting enter in insert mode
set formatoptions-=o           " don't automatically continue comment when hitting o in normal mode
set guioptions-=m              " hide gui menu bar
set guioptions-=T              " hide gui toolbar
set guioptions-=r              " hide gui righthand scrollbar
set guioptions-=e              " use regular tabline
set guioptions-=L              " no left scrollbar
set virtualedit=block          " allow visual block mode to move to where there aren't actually characters
set noswapfile                 " seriously who needs them
set tags=./.tags;              " search for .tags file upward (:h file-searching)
set previewheight=20
set listchars=tab:▸\ ,trail:·,extends:>,eol:¶
set dictionary=/usr/share/dict/words  " dictionary completion with <C-X><C-K>
set suffixesadd+=.py,.rb       " suffixes to attempt to use for gf command
set shell=bash
if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j  " delete comment character when joining commented lines
endif
set nojoinspaces        " use only one space after a period when joining lines
syntax on                      " syntax hilighting
syntax sync minlines=256       " speed up syntax hilighting
augroup SyntaxSync
  autocmd BufReadPost syntax sync fromstart
augroup END
let g:no_ocaml_maps = 1
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
endif
" }}}
" Completion options {{{
set completeopt=longest,menuone
" hitting enter when completion menu is visible selects item, not used right now due to neocomplete
" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" }}}
" Fold {{{
" zf#j manually folds # lines, or zf in visual mode selection.
set foldnestmax =1   " folds only one level deep
set foldmethod  =manual
augroup SyntaxFold
  autocmd BufWinEnter    *.java           set foldnestmax=2 foldlevel=1
  autocmd BufWinEnter    *.c,*.cpp,*.java set foldmethod=syntax " define syntax folds when file loads
  autocmd InsertEnter    *.c,*.cpp,*.java set foldmethod=manual " once we start typing, using manual folds
augroup END
" }}}
" Tab/Indent {{{
set autoindent      " auto indent line to match above line when hitting enter
"set cindent        " newer and better smartindent
set smarttab        " make tabs more consistent with softtabstop
set shiftwidth  =4  " amount of whitespace to insert or remove using normal mode indentation commands
set softtabstop =4  " amount of whitespace deleted by backspace
set tabstop     =4  " width of tab character
set shiftround      " indent by multiples of shiftwidth
set expandtab       " use spaces instead of tabs
set linebreak       " wrap lines at nice points
set textwidth=0     " disables textwidth
filetype plugin on
filetype indent on

" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  echomsg
  call SummarizeTabs()
endfunction
cnoreabbrev stab Stab

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction
" }}}
" Wildmenu {{{
if has("wildmenu")
  set wildmenu                    " turn on wildmenu
  set wildignorecase              " wildmenu doesn't care about case
  set wildmode=longest:full,full
  set wildignore=*.o,*.a,*~,*.pyc " ignore compiled files
  set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.mp4,*.mkv,*.avi,*.pdf,*.png,*.mp3
  set wildignore+=*.m4v,*.flv,*.flac,*.wma,*.doc,*.docx,*.ppt,*.pptx,*.m4a,*.m2ts,*.m3u
  set wildignore+=*:2\\,S,*:2\\,RS,*:2\\,FS,*:2\\,,*:2\\,FRS " for mutt
  set wildignore+=.DS_Store,.git,.hg,.svn
  set wildignore+=*~,*.swp,*.tmp
endif
" }}}
" }}}
" Keymaps {{{
" Misc {{{
" always show multiple tag options, <C-w> to open in new window
"nnoremap <C-]> <C-w>g<C-]>
nnoremap <C-]> g<C-]>

" make/run maps with quickrun/vimproc, gm gr {{{
nnoremap <silent> gma :QuickRun make -args all<CR>
nnoremap <silent> gmc :QuickRun make -args clean<CR>
nnoremap <silent> gmm :QuickRun make<CR>
nnoremap <silent> gmk :call vimproc#kill(b:quickrun_pid,9)<CR>
nnoremap          gml :echo vimproc#get_last_errmsg()<CR>
nnoremap <silent> gms :call quickrun#sweep_sessions()<CR>
nnoremap <silent> gmt :call QuickRunTimeToggle()<CR>
nnoremap <silent> gr :QuickRun -mode n -runner vimproc<CR>
vnoremap <silent> gr :QuickRun -mode v -runner vimproc<CR>
" }}}
" misc g maps {{{
nnoremap          gb    gw{gw}
nnoremap          gi    <C-w><Up>
nnoremap          gj    <C-w><Left>
nnoremap          gk    <C-w><Down>
nnoremap          gl    <C-w><Right>
nnoremap          gI    <C-w>K
nnoremap          gJ    <C-w>H
nnoremap          gK    <C-w>J
nnoremap          gL    <C-w>L
nnoremap          go    :ls<CR>:sb<Space>
nnoremap          gO    :ls<CR>:b<Space>
nnoremap          gs    gnv
" TODO: make mappings here for just searching, instead of global replace
nnoremap          g/    :<C-u>OverCommandLine<cr>%s/
xnoremap          g/    :<C-u>OverCommandLine<cr>%s/\%V
" }}}
" generate map for alt and <C-Space> in both vim and gvim {{{
function! Altmap(char)
  if has('gui_running') | return '<A-'.a:char.'>' | else | return '<Esc>'.a:char|endif
endfunction
let cspace = has("gui_running") ? "<C-Space>" : "<C-@>"
" }}}
" changed default keys M * # - _ z<Space> {{{
nnoremap M %
onoremap M %
nnoremap * *N
nnoremap # #N
nnoremap - 10jzz
nnoremap _ 10kzz
nnoremap z<Space> zMzv
" more useful * and # from visual mode
xnoremap * :<C-u>call VSetSearch('/')<CR>/<C-R>=@/<CR><CR>N:set cursorline cursorcolumn hlsearch<CR>
xnoremap # :<C-u>call VSetSearch('?')<CR>?<C-R>=@/<CR><CR>N:set cursorline cursorcolumn hlsearch<CR>
" }}}
" easily toggle command line window with Q {{{
nnoremap Q q:
augroup CmdWindow
  autocmd CmdwinEnter * nnoremap <buffer><silent> Q :q<CR>
augroup END
" }}}
" visual mode increment, search, shift, gV {{{
vnoremap <C-a> :call Increment()<CR>
xnoremap <C-f> <Esc>/\%V
vnoremap < <gv
vnoremap > >gv
nnoremap gV `[v`]
" }}}
" diffget/diffobtain gd[upo] {{{
nnoremap gdu :diffupdate<CR>
xnoremap gdp :diffput <BAR> diffupdate<CR>
xnoremap gdo :diffget <BAR> diffupdate<CR>
" }}}
" line yanks Y yl yaa {{{
nnoremap Y y$
nnoremap yl :let c=col(".")<CR>^v$hy:call cursor(line("."),c)<CR>
nnoremap yaa :let c=col(".") <BAR> let l = line(".")<CR>ggyG:call cursor(l,c)<CR>:echo 'yanked whole file'<CR>
" }}}
" c/C/x/X operators go to their own registers instead of unnamedplus register specified by clipboard setting {{{
nnoremap <expr> c v:register == '+' ? '"cc' : 'c'
nnoremap "+c "+c
nnoremap <expr> C v:register == '+' ? '"cC' : 'C'
nnoremap "+C "+C
nnoremap <expr> x v:register == '+' ? '"xx' : 'x'
nnoremap "+x "+x
nnoremap <expr> X v:register == '+' ? '"xX' : 'X'
nnoremap "+X "+X
" }}}
" fancy search maps {{{
highlight! link CurSearch IncSearch
function! HighlightCurrentMatch()
    let col = col(".") - 1
    let endCol = searchpos(getreg("/"), "cne")[1] + 1
    let line = line(".")
    let matchPat = '/\%' . line . 'l\%>' . col . 'c\%<' . endCol . 'c/'
    echomsg matchPat

    3match none
    exe ':3match CurSearch ' . matchPat
endfunction

function! ToggleFancyN(status)
    if a:status == 'on'
        let @/=''
        execute 'nnoremap <silent> n :set cursorline cursorcolumn hlsearch<CR>nzv:silent! call HighlightCurrentMatch()<CR>'
        execute 'nnoremap <silent> N :set cursorline cursorcolumn hlsearch<CR>Nzv:silent! call HighlightCurrentMatch()<CR>'
    else
        execute 'nnoremap <silent> n nzv'
        execute 'nnoremap <silent> N Nzv'
    endif
endfunction

nnoremap <silent><expr> <CR> ':set hls! ' . (&hls == 1 ? 'nocuc <Bar> 3match none' : 'cuc') . '<CR>'
augroup FancyCR
  autocmd FileType qf   nnoremap <buffer> <CR> <CR>zv
  autocmd CmdwinEnter * nnoremap <buffer> <CR> <CR>
augroup END

nnoremap <silent> n :set cursorline cursorcolumn hlsearch<CR>nzv
nnoremap <silent> N :set cursorline cursorcolumn hlsearch<CR>Nzv
nnoremap /          :set cursorline nohlsearch<CR>:call ToggleFancyN('off')<CR>/
nnoremap ?          :set cursorline nohlsearch<CR>:call ToggleFancyN('off')<CR>?
execute 'nnoremap ' . cspace . ' :set cursorline cursorcolumn hlsearch<CR>:call ToggleFancyN("on")<CR>?\V'
onoremap <C-f> /\V
" }}}
" quickfix maps {{{
augroup QuickFix
  " TODO: add zv where necessary in here to open all folds
  autocmd FileType qf setlocal nosplitbelow nosplitright
  autocmd FileType qf setlocal switchbuf=""
  autocmd FileType qf nnoremap <buffer><silent> t  <C-w><CR><C-w>T
  autocmd FileType qf nnoremap <buffer><silent> T  <C-w><CR><C-w>TgT<C-w>j
  autocmd FileType qf nnoremap <buffer><silent> o  <CR>
  autocmd FileType qf nnoremap <buffer><silent> O  <CR><C-w>j
  autocmd FileType qf nnoremap <buffer><silent> go <CR><C-w><C-w>:cclose <Bar> lclose<CR>
  autocmd FileType qf nnoremap <buffer><silent> s  <C-w><CR>
  autocmd FileType qf nnoremap <buffer><silent> S  <C-w><CR><C-w>p
  autocmd FileType qf nnoremap <buffer><silent> v  :let g:qf_height = winheight('.')<CR><C-w><CR><C-w>L<C-w>p<C-w>J:resize <C-r>=g:qf_height<CR><CR><C-w>p
  autocmd FileType qf nnoremap <buffer><silent> V  :let g:qf_height = winheight('.')<CR><C-w><CR><C-w>L<C-w>p<C-w>J:resize <C-r>=g:qf_height<CR><CR>
  autocmd FileType qf nnoremap <buffer><silent> q  :cclose <Bar> lclose<CR>
  autocmd FileType qf nnoremap <buffer><silent> <leader>q  :cclose <Bar> lclose<CR>
augroup END
" }}}
" arrow keys {{{
inoremap <up>   <C-O>gk
inoremap <down> <C-O>gj
vnoremap <up>        gk
vnoremap <down>      gj

nnoremap <up>        :resize +2<CR>
nnoremap <left>      :vertical resize -2<CR>
nnoremap <down>      :resize -2<CR>
nnoremap <right>     :vertical resize +2<CR>
" }}}
" }}}
" Text Object / targets.vim maps {{{
let g:targets_aiAI        = 'ahAI'
let g:targets_pairs       = '()p {}c []r <>a'
let g:targets_quotes      = "\"d 's `e"

function! Append(type, ...)
    call feedkeys("`]a", 'n')
endfunction

function! Insert(type, ...)
    call feedkeys("`[i", 'n')
endfunction

omap i h
onoremap iw iw
onoremap iW iW
onoremap it it
" }}}
" ijkl instead of hjkl {{{
nnoremap j h
vnoremap j h
nnoremap <expr> i (v:count > 4 ? "m'" . v:count . 'k' : (v:count == 0 ? 'gk' : 'k'))
vnoremap i k
nnoremap <expr> k (v:count > 4 ? "m'" . v:count . 'j' : (v:count == 0 ? 'gj' : 'j'))
vnoremap k j

" since 'i' is now used for motion, make 'h' do what 'i' used to
nnoremap h i
nnoremap H I
vnoremap h i
vnoremap H I
nnoremap I H

" insert at last insert mode position
nnoremap gh gi

" move by folds
nnoremap zj zi
nnoremap zk zj
nnoremap zi zk
" }}}
" function keys {{{
nnoremap <F1>          :call StripTrailingWhitespace()<CR>
nnoremap <F2>          :set spell!<CR>
nnoremap <silent> <F3> :NumbersOnOff<CR>:set number relativenumber<CR>
" }}}
" defualt (comma) leader maps {{{
" Main {{{
" TODO: BufGrep<Space> mapping
"                         c    nerdcommenter maps
nnoremap <silent> <leader>d    :Dispatch!<CR>
nnoremap <silent> <leader>e    :lclose<CR>:let g:ToggleList.cmd.copen="copen"<CR>:ToggleQF<CR>
nnoremap <silent> <leader>E    :lclose<CR>:let g:ToggleList.cmd.copen="Copen"<CR>:ToggleQF<CR>
nnoremap <silent> <leader>f    :set foldmethod=syntax<CR>:set foldmethod=manual<CR>
"                         g    fugitive and signify maps
nnoremap <silent> <leader>l    :cclose<CR>:ToggleLL<CR>
"                         m    make maps
nnoremap <silent> <leader>p    "0p
nnoremap <silent> <leader>P    "0P
nnoremap <silent> <leader>q    :q <Bar> redraw!<CR>
nnoremap <silent> <leader>S    :source Session.vim<CR>
nnoremap          <leader>ss   :Bufsearch<Space>
nnoremap          <leader>sa   :Bufsearchadd<Space>
nnoremap <silent> <leader>tt   :Buftodo lvimgrep<CR>
nnoremap <silent> <leader>ta   :BufGrep \CTODO<CR>:cwindow<CR>
nnoremap <silent> <leader>tr   :Recurtodo vim<CR>
nnoremap <silent> <leader>u    yyp^v$r
nnoremap <silent> <leader>w    :w!<CR>
nnoremap <silent> <leader>x    :x!<CR>
vnoremap <silent> <leader>y    y`]
nnoremap <silent> <leader>zh   :echo map(synstack(line('.'),col('.')),'synIDattr(v:val,"name")')<CR>
nnoremap <silent> <leader>zs   :syntax sync fromstart<CR>
nnoremap <silent> <leader>zv   :tabedit $MYVIMRC<CR>

nnoremap <silent> <leader><leader>a  :redraw!<CR>
nnoremap <silent> <leader><leader>d  :Dispatch<CR>
" }}}
" <leader>[5%*] maps for searching selected word {{{
" TODO: less shit mappings for all this
" <leader>[*5%] maps for putting recursive/buffer/buflist search results in quickfix/location list
nnoremap <leader>5 :call VimGrep('\V'.substitute(escape(expand("<cword>"), '\'), '\n', '\\n', 'g'), '%', '1', 'lvimgrep')<CR>
vnoremap <leader>5 :<C-u>call VSetSearch('/')<CR>:execute 'noautocmd lvimgrep /' . @/ . '/gj %'<CR>:lwindow<CR>
" [lv]imgrepadd doesn't change title of quickfix window
nnoremap <leader>% :BufGrep \V<C-r>=substitute(escape(expand("<cword>"), '\'), '\n', '\\n', 'g')<CR><CR>:cwindow<CR>:echo g:last_preserve<CR>
vnoremap <leader>% :<C-u>call VSetSearch('/')<CR>:cexpr []<CR>:call Preserve('noautocmd bufdo vimgrepadd /<C-r>=@/<CR>/gj %')<CR>:cwindow<CR>:echo g:last_preserve<CR>
nnoremap <leader>* :call VimGrep('\V'.substitute(escape(expand("<cword>"), '\'), '\n', '\\n', 'g'), '**', '1', 'vimgrep')<CR>
vnoremap <leader>* :<C-u>call VSetSearch('/')<CR>:execute 'noautocmd vimgrep /' . @/ . '/gj **'<CR>:cwindow<CR>
" }}}
" <leader>g[ikht] signify {{{
nnoremap <silent> <leader>ga  :Git add %:p<CR><CR>
nnoremap          <leader>gb  :Gbranch<Space>
nnoremap <silent> <leader>gB  :Gblame<CR>
nnoremap <silent> <leader>gc  :Gcommit --verbose<CR>
nnoremap          <leader>gC  :Gcheckout<Space>
nnoremap <silent> <leader>gd  :Gdiff<CR>
nnoremap          <leader>ge  :Gedit<Space>
nnoremap          <leader>gg  :Ggrep<Space>
nnoremap <silent> <leader>gla :silent Glog -- <Bar> redraw!<CR>
nnoremap <silent> <leader>glf :silent Glog -- % <Bar> redraw!<CR>
nnoremap <silent> <leader>gli :silent Glog <Bar> redraw!<CR>
nnoremap          <leader>gm  :Gmove<Space>
nnoremap <silent> <leader>gp  :Dispatch! git push<CR>
nnoremap <silent> <leader>gr  :Gread<CR>
nnoremap <silent> <leader>gs  :Gstatus<CR>
nnoremap <silent> <leader>gw  :Gwrite<CR>
" }}}
" <leader>m[acfq] Make {{{
nnoremap <leader>ma          :Make! -j4 all<CR>
nnoremap <leader><leader>ma  :Make  -j4 all<CR>
nnoremap <leader>mc          :Make! clean<CR>
nnoremap <leader><leader>mc  :Make  clean<CR>
nnoremap <leader>mf          :Make! -j4 <C-r>=expand('%:r')<CR><CR>
nnoremap <leader><leader>mf  :Make  -j4 <C-r>=expand('%:r')<CR><CR>
nnoremap <leader>mm          :Make! -j4<CR>
nnoremap <leader><leader>mm  :Make  -j4<CR>
nnoremap <leader>mq          :let g:ToggleList.cmd.copen="Copen"<CR>:ToggleQF<CR>
" }}}
" }}}
" space leader maps. unite + tabularize {{{
nnoremap <Space>b   :<C-u>Unite -start-insert -buffer-name=buffers    buffer<CR>
nnoremap <Space>d   :<C-u>Unite -start-insert -buffer-name=tabs       tab:no-current<CR>
nnoremap <Space>f   :<C-u>Unite -start-insert -buffer-name=files      file<CR>
nnoremap <Space>g   :<C-u>Unite -start-insert -buffer-name=grep       grep:.<CR>
nnoremap <Space>H   :<C-u>Unite -start-insert -buffer-name=help       help<CR><CR>
nnoremap <Space>l   :<C-u>UniteWithInput      -buffer-name=locate     locate<CR>
nnoremap <Space>s   :<C-u>Unite -start-insert -buffer-name=find       find:.<CR><Left><Left><Left><Left><Left>i<Right><Right><Right><Right><Right>'**'<Left><Left>
nnoremap <Space>S   :<C-u>Unite -start-insert -buffer-name=find       find:.<CR><Left><Left><Left><Left><Left>i<Right><Right><Right><Right><Right>''<Left>
nnoremap <Space>ol  :<C-u>Unite -start-insert -buffer-name=lines      line<CR>
nnoremap <Space>oo  :<C-u>Unite -start-insert -buffer-name=outline    outline<CR>
nnoremap <Space>pl  :<C-u>Unite -no-start-insert neobundle/log<CR>
nnoremap <Space>pu  :<C-u>Unite -no-start-insert neobundle/update<CR>
nnoremap <Space>r   :<C-u>Unite -start-insert -buffer-name=file_rec   file_rec/async<CR>
nnoremap <Space>t   :<C-u>Unite -start-insert -buffer-name=tags       tag<CR>a<BS>
nnoremap <Space>w   :<C-u>Unite -start-insert -buffer-name=window     window:no-current<CR>
nnoremap <Space>'   :<C-u>Unite -start-insert -buffer-name=marks      mark<CR>

nnoremap <Space>a   :set opfunc=Append<CR>g@
nnoremap <Space>h   :set opfunc=Insert<CR>g@
" }}}
" ctrl normal mode {{{
nnoremap <C-w><C-b>         :VimFilerExplorer -find<CR>:redraw!<CR>
nnoremap <C-b>              :VimFiler -find<CR>:redraw!<CR>
nnoremap <silent> <C-c>     :set nocursorcolumn<CR>:call ToggleFancyN('off')<CR>:3match none<CR>
nnoremap <C-f>              :set cursorline cursorcolumn hlsearch<CR>:call ToggleFancyN('on')<CR>/\V
nnoremap <C-h>              :TagbarOpen fjc<CR>
nnoremap <C-n>              gt
nnoremap <C-p>              gT
nnoremap <C-w>o             <C-w>o:redraw!<CR>
nnoremap <C-w>s             <C-w>s:redraw!<CR>
nnoremap <C-w>v             <C-w>v:redraw!<CR>
" }}}
" ctrl insert mode {{{
inoremap <C-a>   <Home>
inoremap <C-c>   <Esc><Esc>
inoremap <C-e>   <End>
" }}}
" alt normal mode {{{
exec 'nnoremap <silent> ' . Altmap('a') . ' :AirlineToggle<CR>'
exec 'nnoremap <silent> ' . Altmap('h') . ' :set nocursorline nocursorcolumn<CR>:nohlsearch<CR>'
exec 'nnoremap <silent> ' . Altmap('i') . ' :execute "resize " . (winheight(0) * 6/5)<CR>'
exec 'nnoremap <silent> ' . Altmap('j') . ' :execute "vertical resize " . (winwidth(0) * 5/6)<CR>'
exec 'nnoremap <silent> ' . Altmap('k') . ' :execute "resize " . (winheight(0) * 5/6)<CR>'
exec 'nnoremap <silent> ' . Altmap('l') . ' :execute "vertical resize " . (winwidth(0) * 6/5)<CR>'
exec 'nnoremap <silent> ' . Altmap('m') . ' :match none<CR>'
exec 'nnoremap <silent> ' . Altmap('n') . ' :tabmove +1<CR>'
exec 'nnoremap <silent> ' . Altmap('p') . ' :tabmove -1<CR>'
exec 'nnoremap <silent> ' . Altmap('q') . ' :quitall<CR>'
exec 'nnoremap <silent> ' . Altmap('1') . ' 1gt'
exec 'nnoremap <silent> ' . Altmap('2') . ' 2gt'
exec 'nnoremap <silent> ' . Altmap('3') . ' 3gt'
exec 'nnoremap <silent> ' . Altmap('4') . ' 4gt'
exec 'nnoremap <silent> ' . Altmap('5') . ' 5gt'
exec 'nnoremap <silent> ' . Altmap('6') . ' 6gt'
exec 'nnoremap <silent> ' . Altmap('7') . ' 7gt'
exec 'nnoremap <silent> ' . Altmap('8') . ' 8gt'
exec 'nnoremap <silent> ' . Altmap('9') . ' 9gt'
exec 'nnoremap <silent> ' . Altmap('0') . ' :tablast<CR>'
" }}}
" alt insert mode {{{
exec 'inoremap ' . Altmap('i') . '   <Up>'
exec 'inoremap ' . Altmap('j') . '   <Left>'
exec 'inoremap ' . Altmap('k') . '   <Down>'
exec 'inoremap ' . Altmap('l') . '   <Right>'
exec 'inoremap ' . Altmap('b') . '   <S-Left>'
exec 'inoremap ' . Altmap('B') . '   <C-Left>'
exec 'inoremap ' . Altmap('w') . '   <S-Right>'
exec 'inoremap ' . Altmap('W') . '   <C-Right>'
" }}}
" slash leader maps. tmuxify {{{
function! GenerateBuildCommand()
  if &filetype == 'c'
    let my_compiler = 'gcc'
  elseif &filetype == 'cpp'
    let my_compiler = 'g++'
  elseif &filetype == 'ocaml'
    let my_compiler = 'ocamlc'
  endif

  return my_compiler . ' ' . shellescape(expand('%:p')) . ' -o ' . shellescape(expand('%:p:r'))
endfunction

function! TmuxifySendLines(count, direction)
  let l = line(".")
  let c = col(".")

  if a:count == 0
    execute 'normal! "vyy'
  else
    execute 'normal! "vy' . a:count . a:direction
  endif

  TxSend(@v)
  call cursor(l, c)
endfunction

nnoremap <silent> \a  :call tmuxify#pane_send_raw('C-u')<CR>:TxSend('clear')<CR>
nnoremap <silent> \b  :TxSend(GenerateBuildCommand())<CR>
nnoremap <silent> \c  :TxSigInt<CR>
nnoremap <silent> \d  :call tmuxify#pane_send_raw('C-d')<CR>
nnoremap <silent> \i  :call TmuxifySendLines(v:count, "k")<CR>
nnoremap <silent> \k  :call TmuxifySendLines(v:count, "j")<CR>
nnoremap <silent> \l  :call tmuxify#pane_send_raw('C-l')<CR>
"                 \m  make mappings
nnoremap <silent> \o  :TxCreate<CR>
nnoremap <silent> \q  :TxKill<CR>
nnoremap <silent> \r  :TxRun<CR>
nnoremap <silent> \s  "vyy:TxSend(@v)<CR>
vnoremap <silent> \s  "vy:TxSend(@v)<CR>
nnoremap <silent> \ts :TxSetPane<CR>
nnoremap <silent> \td :TxSetPane<CR>0<CR>1<CR>1<CR>:echo 'attached to 0:0:1'<CR>
nnoremap <silent> \\  :TxSend<CR>

nnoremap <silent> \<CR> :call tmuxify#pane_send_raw('C-m')<CR>

nnoremap <silent> \ma :TxSend('make')<CR>
nnoremap <silent> \mc :TxSend('make clean')<CR>
nnoremap <silent> \mf :TxSend(GenerateBuildCommand())<CR>
" }}}
" }}}
" vim: foldmethod=marker foldlevel=1 textwidth=0 softtabstop=2 tabstop=2 shiftwidth=2
