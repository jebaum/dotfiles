" vim: foldmethod=marker foldlevel=1
" Colorscheme and Pathogen {{{
set nocompatible " use vim settings not vi
colorscheme wombat256mod
execute pathogen#infect()
" }}}
" Misc {{{
" mail / mutt {{{
augroup MUTT " spell check, textwidth, F1-3 for wrapping paragraphs in useful ways
  autocmd BufRead /tmp/mutt-* set tw=72  " for email with mutt
  autocmd BufRead /tmp/mutt-* set spell  " <-- vim 7 required
  autocmd BufRead /tmp/mutt-* nmap  <F1>  gqap
  autocmd BufRead /tmp/mutt-* nmap  <F2>  gqqj
  autocmd BufRead /tmp/mutt-* nmap  <F3>  kgqj
  autocmd BufRead /tmp/mutt-* map!  <F1>  <ESC>gqapi
  autocmd BufRead /tmp/mutt-* map!  <F2>  <ESC>gqqji
  autocmd BufRead /tmp/mutt-* map!  <F3>  <ESC>kgqji
augroup END
" }}}
" Functions to flash current cursor position {{{
function! OsseCursorBlindOn()
" let w:orig_cursorcolumn = &cursorcolumn
" let w:orig_cursorline = &cursorline
" extra heinous colour jizz here if desired
  set cursorcolumn
  set cursorline
  augroup OsseCursorBlind
    au!
    au CursorHold * call OsseCursorBlindOff()
    au CursorMoved * call OsseCursorBlindOff()
  augroup END
endfunction

function! OsseCursorBlindOff()
" let &cursorcolumn = w:orig_cursorcolumn
" let &cursorline = w:orig_cursorline
  set nocursorline
  set nocursorcolumn
  augroup OsseCursorBlind
    au!
  augroup END
endfunction

augroup OsseCursorBlind
  au!
augroup END
" }}}
" Fix borders of fullscreen GUI {{{
if has('gui_gtk') && has('gui_running')
    let s:border = synIDattr(synIDtrans(hlID('Normal')), 'bg', 'gui')
    exe 'silent !echo ''style "vimfix" { bg[NORMAL] = "' . escape(s:border, '#') . '" }'''.
                \' > ~/.gtkrc-2.0.mine'
    exe 'silent !echo ''widget "vim-main-window.*GtkForm" style "vimfix"'''.
                \' >> ~/.gtkrc-2.0.mine'
endif
" }}}
" Ranger file chooser. only works on a single file. more just for fun than practicality {{{
function! RangerChooser()
    exec "silent !ranger --choosefile=/tmp/chosenfile " . expand("%:p:h")
    if filereadable('/tmp/chosenfile')
        exec 'edit ' . system('cat /tmp/chosenfile')
        call system('rm /tmp/chosenfile')
    endif
    redraw!
endfun
" map ,r :call RangerChooser()<CR>
" }}}
" SyntaxRange {{{
" last parameter is optional and can be any highlight group, determines delimiter colors
augroup SyntaxNotes
  autocmd BufEnter * call SyntaxRange#Include('@begin=text@',   '@end=text@',   'text',   'Tabline')
  autocmd BufEnter * call SyntaxRange#Include('@begin=c@',   '@end=c@',   'c',   'Comment')
  autocmd BufEnter * call SyntaxRange#Include('@begin=cpp@', '@end=cpp@', 'cpp', 'Comment')
  autocmd BufEnter * call SyntaxRange#Include('@begin=lisp@', '@end=lisp@', 'lisp', 'Comment')
augroup END
" }}}
" Return to last edit position when opening files {{{
augroup ReturnToLast
  autocmd BufReadPost *
       \ if line("'\"") > 0 && line("'\"") <= line("$") |
       \   exe "normal! g`\"" |
       \ endif
augroup END
" }}}
" Strip Trailing Whitespace {{{
function! StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
augroup StripWhitespaceOnWrite
  autocmd FileType c,cpp,java,php,ruby,python autocmd BufWritePre <buffer> :call StripTrailingWhitespaces()
  autocmd BufWrite *.txt :call StripTrailingWhitespaces()
augroup END
" }}}
" Jumplist doesn't jump between files {{{
function! NoBufChange(cmd, undo)
    let initbuf = bufnr("%")
    echo initbuf
    execute "normal! \<esc>" . v:count1 . a:cmd
    if initbuf != bufnr("%")
      execute "normal! \<esc>" . v:count1 . a:undo
      redraw
      echo "Refused to run " . a:cmd . " because it crosses buffer boundary"
    endif
endfunction
"nnoremap <C-i> :call NoBufChange("\<c-i>", "\<c-o>")<cr>
"nnoremap <C-o> :call NoBufChange("\<c-o>", "\<c-i>")<cr>
" }}}
" Commands {{{
command! W :execute ':silent w !sudo tee % > /dev/null' | :edit! " :W when forgetting to sudo
cnoreabbrev te tabedit
cnoreabbrev sv source ~/.vimrc
" }}}
" Completion options {{{
set completeopt=longest,menuone
" hitting enter when completion menu is visible selects item
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" }}}
" }}}
" Plugin Settings {{{
" airline settings {{{
let g:loaded_airline = 1          " turn airline off for now
let g:airline_theme="simple"
let g:airline_inactive_collapse = 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_branch_prefix = ' '
let g:airline_readonly_symbol = ''
let g:airline_linecolumn_prefix = ''
let g:airline_section_z="%l/%L:C%c %b/0x%B"
let g:airline_detect_whitespace=2 " don't display long message for trailing whitespace
let g:airline#extensions#hunks#enabled = 1
let g:airline#extensions#hunks#non_zero_only = 1
" }}}
" bling settings {{{
let g:bling_time = 10
let g:blink_count = 1
" }}}
" dispatch settings {{{
augroup DISPATCH
  autocmd FileType java let b:dispatch = 'ant'
augroup END
" }}}
" easymotion settings {{{
" stop some annoying maps from getting set
let g:EasyMotion_special_select_phrase = 0
let g:EasyMotion_special_select_line = 0
" }}}
" gist settings {{{
let g:gist_post_private = 1 " gists are private by default
" }}}
" gundo settings {{{
let g:gundo_width=40
let g:gundo_preview_height=40
" }}}
" match tag settings {{{
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
    \ 'php' : 1,
    \}
" }}}
" multi-cursor settings {{{
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_start_key='<C-s>'
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<C-c>'
" }}}
" neocomplete settings {{{
let g:neocomplete#enable_at_startup = 0
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#auto_completion_start_length = 20 " don't pop up all the time
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" TODO: get neocomplete to not set completeopt-=longest
inoremap <expr><C-n>    neocomplete#start_manual_complete()
" }}}
" nerdcommenter setttings {{{
let NERDSpaceDelims=1
let NERDCompactSexyComs=0
" }}}
" nerdtree settings {{{
let NERDTreeWinSize=40
let NERDTreeMapOpenSplit="s"
let NERDTreeMapOpenVSplit="v"
let NERDTreeShowLineNumbers=1
let NERDTreeShowBookmarks=1
let NERDTreeQuitOnOpen=1
" }}}
" rainbow settings {{{
let g:rainbow_active = 0  " don't load automatically
let g:rainbow_ctermfgs = ['white', 'lightblue', 'lightgreen',]
let g:rainbow_load_separately = [
 \ [ '*' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
 \ [ '*.tex' , [['(', ')'], ['\[', '\]']] ],
 \ [ '*.cpp' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
 \ [ '*.{html,htm}' , [['(', ')'], ['\[', '\]'], ['{', '}'], ['<\a[^>]*>', '</[^>]*>']] ],
 \ ]
" }}}
" niji settings {{{
let g:niji_matching_filetypes = ['lisp']
let g:niji_dark_colours = [['82', '82'],
                        \ [ '39', '39'],
                        \ [ '231', '231'],
                        \ [ '86', '86'],
                        \ [ '202', '202']]
" }}}
" paredit settings {{{
let g:paredit_leader = '\'
" }}}
" showmarks settings {{{
let g:showmarks_enable=0
let g:showmarks_include="abcdefghijklmnopqrstuvwxyz"
let g:showmarks_textlower=">"
let g:showmarks_ignore_type="h"
" }}}
" simplyfold settings {{{
let g:SimplyFold_docstring_preview = 0
" }}}
" signify settings {{{
let g:signify_disable_by_default = 1  " disable run by default
let g:signify_vcs_list = [ 'git' ]    " I only use git for now
let g:signify_mapping_next_hunk = '<leader>gk'
let g:signify_mapping_prev_hunk = '<leader>gi'
let g:signify_sign_change       = '~'
" }}}
" singlecompile settings {{{
let g:SingleCompile_resultheight = 10
" }}}
" slimv settings {{{
let g:slimv_leader = '\'
let g:slimv_repl_wrap = 0 " stop j and k from getting remapped. unfortunately also stops REPL wrapping
let g:lisp_rainbow = 1 " will get overridden by niji, but works in @begin=*@ blocks
let g:slimv_swank_cmd = '! urxvt -e sbcl --load /usr/share/common-lisp/source/slime/start-swank.lisp &'
let g:slimv_swank_clojure = '! urxvt -e lein swank &'
" }}}
" startify settings {{{
let g:startify_list_order = ['bookmarks', 'dir', 'files', 'sessions']
let g:startify_bookmarks = [ '~/dotfiles/vim/vimrc', '~/dotfiles/aliases', '~/TODO' ]
let g:startify_files_number = 7
let g:startify_session_detection = 1 " show session when Session.vim is found in current directory
let g:startify_session_autoload = 0  " opening directories with a Session.vim will have it auto load
let g:startify_change_to_dir = 1     " when opening file or bookmark, change to its directory
let g:startify_custom_indices = ['a','f','h','j','l','w','r','u','o','p','z','x','n','m']
let g:startify_custom_header = [
  \ '  __/\\\________/\\\___/\\\\\\\\\\\___/\\\\____________/\\\\__',
  \ '   _\/\\\_______\/\\\__\/////\\\///___\/\\\\\\________/\\\\\\__',
  \ '    _\//\\\______/\\\_______\/\\\______\/\\\//\\\____/\\\//\\\__',
  \ '     __\//\\\____/\\\________\/\\\______\/\\\\///\\\/\\\/_\/\\\__',
  \ '      ___\//\\\__/\\\_________\/\\\______\/\\\__\///\\\/___\/\\\__',
  \ '       ____\//\\\/\\\__________\/\\\______\/\\\____\///_____\/\\\__',
  \ '        _____\//\\\\\___________\/\\\______\/\\\_____________\/\\\__',
  \ '         ______\//\\\_________/\\\\\\\\\\\__\/\\\_____________\/\\\__',
  \ '          _______\///_________\///////////___\///______________\///___',
  \ '',
  \ '',
  \ ]
" }}}
" syntastic settings {{{
let g:syntastic_c_compiler = 'clang'
let g:syntastic_c_compiler_options = ' -Wall'
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = ' -Wall'
let g:syntastic_aggregate_errors=1         " display all errors
let g:syntastic_always_populate_loc_list=1 " always put detecter errors in location list
let g:syntastic_error_symbol='✗✗'
let g:syntastic_warning_symbol='⚠⚠'
let g:syntastic_stl_format = '[%E{E:%fe-%e}%B{|}%W{W:%fw-%w}]'
let g:syntastic_ignore_files=['/home/james/Dropbox/Documents/UCLA/Y3Q1/CS161/Notes', '/home/james/Dropbox/Documents/UCLA/Y3Q1/CS118/Homework']
" }}}
" table mode settings {{{
let g:loaded_table_mode = 1  "disable for now so it doesn't clutter <leader>t mappings
" TODO: figure out how to toggle
" }}}
" taboo.vim tab name format string {{{
let g:taboo_tab_format = "%N %1a%m "
" }}}
" tagbar settings {{{
let g:tagbar_left  = 1            " default is to open on right
let g:tagbar_width = 50           " default is 40
let g:tagbar_indent= 1            " default is 2
let g:tagbar_show_linenumbers = 2 " relative line numbers
let g_tagbar_autoshowtag=1        " auto unfold any parents so highlighted tag is shown
let g:tagbar_sort  = 0            " sort tags by position in source file, not alphabetically
" }}}
" togglelist settings {{{
let g:toggle_list_no_mappings=1 " don't use default mappings
" }}}
" ultisnips settings {{{
"let g:UltiSnipsExpandTrigger="<C-l>"
let g:UltiSnipsJumpForwardTrigger="<C-l>"
let g:UltiSnipsJumpBackwardTrigger="<C-j>"
let g:UltiSnipsListSnippets="<C-s>"
" }}}
" unite settings {{{
" TODO: line ~670 of unite doc, replace grep with ag
augroup unite
  autocmd FileType unite call s:unite_my_settings()
augroup END
let g:unite_source_file_mru_long_limit = 3000
let g:unite_source_directory_mru_long_limit = 3000
let g:unite_enable_start_insert = 1
let g:unite_winheight = 20
let g:unite_split_rule = 'botright'
let g:unite_prompt = '» '
let g:unite_update_time=500   " in milliseconds
let g:unite_source_rec_async_command = 'ag -g ".*"'
let g:unite_source_history_yank_enable = 1
let g:unite_locate_command = 'locate -i -l %d -e %s'
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1
function! s:unite_my_settings()
  nmap <buffer> <ESC>   <Plug>(unite_exit)
  nmap <buffer> <C-c>   <Plug>(unite_exit)
  imap <buffer> <C-c>   <Plug>(unite_insert_leave)

  imap <buffer><expr> j unite#smart_map('j', '')
  imap <buffer> <Tab>   <Plug>(unite_select_next_line)
  imap <buffer> <S-Tab> <Plug>(unite_select_previous_line)
  imap <buffer> <C-w>   <Plug>(unite_delete_backward_path)
  nmap <buffer> '       <Plug>(unite_quick_match_default_action)
  imap <buffer> '       <Plug>(unite_quick_match_default_action)
  nmap <buffer> x       <Plug>(unite_quick_match_choose_action)
  imap <buffer><expr> x
          \ unite#smart_map('x', "\<Plug>(unite_quick_match_choose_action)")
  nmap <buffer> <C-z>   <Plug>(unite_toggle_transpose_window)
  imap <buffer> <C-z>   <Plug>(unite_toggle_transpose_window)
  nmap <buffer> <C-y>   <Plug>(unite_narrowing_path)
  imap <buffer> <C-y>   <Plug>(unite_narrowing_path)
  nmap <buffer> <C-j>   <Plug>(unite_toggle_auto_preview)
  nmap <buffer> <C-r>   <Plug>(unite_narrowing_input_history)
  imap <buffer> <C-r>   <Plug>(unite_narrowing_input_history)
  nnoremap <silent><buffer><expr> l
          \ unite#smart_map('l', unite#do_action('default'))

  let unite = unite#get_current_unite()
  if unite.buffer_name =~# '^search'
    nnoremap <silent><buffer><expr> r     unite#do_action('replace')
  else
    nnoremap <silent><buffer><expr> r     unite#do_action('rename')
  endif

  nnoremap <silent><buffer><expr> cd     unite#do_action('lcd')
  nnoremap <buffer><expr> S      unite#mappings#set_current_filters(
          \ empty(unite#mappings#get_current_filters()) ?
          \ ['sorter_reverse'] : [])

  imap <silent><buffer><expr> <C-s>     unite#do_action('above')
  imap <silent><buffer><expr> <C-k>     unite#do_action('below')
  imap <silent><buffer><expr> <C-x>     unite#do_action('left')
  imap <silent><buffer><expr> <C-v>     unite#do_action('right')
  imap <silent><buffer><expr> <C-t>     unite#do_action('tabopen')
  imap <silent><buffer><expr> <C-y>     unite#do_action('tabdrop')
  imap <silent><buffer><expr> <C-j>     unite#do_action('goto')

  nmap <silent><buffer><expr> <C-s>     unite#do_action('above')
  nmap <silent><buffer><expr> <C-k>     unite#do_action('below')
  nmap <silent><buffer><expr> <C-x>     unite#do_action('left')
  nmap <silent><buffer><expr> <C-v>     unite#do_action('right')
  nmap <silent><buffer><expr> <C-t>     unite#do_action('tabopen')
  nmap <silent><buffer><expr> <C-y>     unite#do_action('tabdrop')
  nmap <silent><buffer><expr> <C-j>     unite#do_action('goto')

  nmap <buffer> i     <Plug>(unite_loop_cursor_up)
  nmap <buffer> k     <Plug>(unite_loop_cursor_down)
  nmap <buffer> h     <Plug>(unite_insert_enter)
  nmap <buffer> H     <Plug>(unite_insert_head)
  nmap <buffer> l     <Plug>(unite_do_default_action)
  nmap <buffer> <C-@> <Plug>(unite_toggle_mark_current_candidate)
endfunction
" }}}
" vimfiler settings {{{
let g:vimfiler_as_default_explorer = 1
" }}}
" }}}
" General Settings {{{
" Set options {{{
set ttyfast                    " redraw screen faster
set restorescreen=on           " restore screen contents on exit
set autochdir                  " change cwd when switching/opening buffers
set clipboard=unnamedplus      " by default, use system clipboard for yanks ('+' register)
set titlestring=%t\            " file name
set title titlelen=150         " max length of title string
set relativenumber             " use relative line numbers
set number                     " show current line number on left instead of 0
set backspace=indent,eol,start " allow backspace in insert mode
set esckeys                    " make numpad work
set autoread                   " reload files changed outside of vim
set splitbelow                 " splits open below
set splitright                 " vsplits open on right
set noruler                    " don't show the ruler
set laststatus=2               " always display the statusline
set history=1000               " length of command history
set showmode                   " show what mode we're in on the bottom line
set showcmd                    " show current command or visual selection info in bottom line
set showmatch                  " flash to matching paren when typing
set matchtime=3                " tenths of a second to flash to matching paren
set nocursorline               " don't hilight cursor line
set incsearch                  " find as you type
set hlsearch                   " hilight search terms
set magic                      " change how backslashes are handled in searches
set ignorecase                 " case insensitive search by default
set smartcase                  " case sensitive search if search contains uppercase letter
set nrformats=hex              " for C-a and C-x. recognize '0x' prefix as hex
set scrolljump=1               " lines to scroll when cursor leaves screen
set scrolloff=1                " start scrolling when 8 lines away from margins
set updatetime=50              " make CursorHold autocommand and swap writes happen more frequently
set encoding=utf8              " new files use utf-8 encoding by default
set ffs=unix,dos,mac           " new files use unix line endings by default
set timeoutlen=2000            " wait for 1 second to time out leader
set cryptmethod=blowfish       " more secure encryption for vim -x
set switchbuf=usetab           " look to see if buffer is already open in another window or tab
set formatoptions-=r           " don't automatically continue comment when hitting enter in insert mode
set formatoptions-=o           " don't automatically continue comment when hitting o in normal mode
set guioptions-=m              " hide gui menu bar
set guioptions-=T              " hide gui toolbar
set guioptions-=r              " hide gui righthand scrollbar
set noswapfile                 " seriously who needs them
syntax on                      " syntax hilighting
syntax sync minlines=256       " speed up syntax hilighting
set listchars=tab:▸\ ,trail:·,extends:>,eol:¶
" }}}
" Fold Settings {{{
" folding: zf#j manually folds # lines, or zf in visual mode selection.
" zo=open, zO=open all levels, zc=close, za=toggle.  zr=open all first level, zR = open all, mM for close all
" zj and zk to move between folds
" zfa}, zfa], zfa) for matching closer, works same from closers (zfa{)

set foldnestmax=1                      " folds only one level deep
set foldmethod=manual
augroup SyntaxFold
  autocmd BufEnter    *.c,*.cpp set foldmethod=syntax " define syntax folds when file loads
  autocmd InsertEnter *.c,*.cpp set foldmethod=manual " once we start typing, using manual folds
augroup END
" ctrl+spacebar toggles folds in normal mode
nnoremap <silent> <C-@> @=(foldlevel('.')?'za':"\<Space>")<CR>
" }}}
" Tab/Indent Settings {{{
set autoindent      " auto indent line to match above line when hitting enter
"set cindent        " newer and better smartindent
set smarttab        " make tabs more consistent with softtabstop
set shiftwidth=2    " amount of whitespace to insert or remove using normal mode indentation commands
set softtabstop=2   " amount of whitespace deleted by backspace
set tabstop=2       " width of tab character
set shiftround      " indent byh multiples of shiftwidth
set expandtab       " use spaces instead of tabs
set linebreak       " wrap lines at nice points
set textwidth=0     " disables textwidth
filetype plugin on
filetype indent on
" }}}
" Wildmenu Settings {{{
if has("wildmenu")
  set wildmenu                    " turn on wildmenu
  set wildignorecase              " wildmenu doesn't care about case
  set wildmode=longest:full,full
  set wildignore=*.o,*.a,*~,*.pyc " ignore compiled files
  set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.mp4,*.mkv,*.avi,*.pdf,*.png,*.mp3
  set wildignore+=*.m4v,*.flv,*.flac,*.wma,*.doc,*.docx,*.ppt,*.pptx,*.m4a,*.m2ts,*.m3u
  set wildignore+=*:2\\,S,*:2\\,RS,*:2\\,FS,*:2\\,,*:2\\,FRS " for mutt
  set wildignore+=.DS_Store,.git,.hg,.svn
  set wildignore+=*~,*.swp,*.tmp
endif
" }}}
" }}}
" Keymaps {{{
" Misc {{{
let mapleader = ','  " use comma instead of \ as leader
set pastetoggle=<INS>
nmap     / <Plug>SneakPrevious
nnoremap n nzz
nnoremap N Nzz
inoremap <C-c> <Esc><Esc>
nnoremap Y y$
nnoremap <tab> %
vnoremap <tab> %
" Shift+tab selects to % motion
nnoremap <Esc>[Z v%

" always show multiple tag options, open in new window
"nnoremap <C-]> <C-w>g<C-]>
nnoremap <C-]> g<C-]>
" junk map so latex doesn't overwrite C-j
nnoremap <Esc>z <Plug>IMAP_JumpForward

" shifting doesn't exit visual mode
vnoremap < <gv
vnoremap > >gv
nnoremap < <<
nnoremap > >>

" up/down arrow keys go up and down by visual lines
inoremap <up>   <C-O>gk
inoremap <down> <C-O>gj
nnoremap <up>        gk
nnoremap <down>      gj
vnoremap <up>        gk
vnoremap <down>      gj
" left/right arrow keys indent
nnoremap <Left>      <<
nnoremap <Right>     >>
" }}}
" motions for selecting next/previous paren/bracket objects {{{
onoremap h i
onoremap in( :<c-u>normal! f(vi(<CR>
onoremap ip( :<c-u>normal! F)vi(<CR>
onoremap in[ :<c-u>normal! f[vi[<CR>
onoremap ip[ :<c-u>normal! F]vi[<CR>
onoremap in{ :<c-u>normal! f{vi{<CR>
onoremap ip{ :<c-u>normal! F}vi{<CR>
onoremap in< :<c-u>normal! f<vi<<CR>
onoremap ip< :<c-u>normal! F>vi<<CR>
onoremap in" :<c-u>normal! f"vi"<CR>
onoremap ip" :<c-u>normal! F"vi"<CR>
onoremap in' :<c-u>normal! f'vi'<CR>
onoremap ip' :<c-u>normal! F'vi'<CR>

onoremap an( :<c-u>normal! f(va(<CR>
onoremap ap( :<c-u>normal! F)va(<CR>
onoremap an[ :<c-u>normal! f[va[<CR>
onoremap ap[ :<c-u>normal! F]va[<CR>
onoremap an{ :<c-u>normal! f{va{<CR>
onoremap ap{ :<c-u>normal! F}va{<CR>
onoremap an< :<c-u>normal! f<va<<CR>
onoremap ap< :<c-u>normal! F>va<<CR>
onoremap an" :<c-u>normal! f"va"<CR>
onoremap ap" :<c-u>normal! F"va"<CR>
onoremap an' :<c-u>normal! f'va'<CR>
onoremap ap' :<c-u>normal! F'va'<CR>

" easier to reach on the keyboard
omap inp in(
omap ipp ip(
omap inb in[
omap ipb ip[
omap inc in{
omap ipc ip{
omap ind in"
omap ipd ip"
omap ins in'
omap ips ip'

omap anp an(
omap app ap(
omap anb an[
omap apb ap[
omap anc an{
omap apc ap{
omap and an"
omap apd ap"
omap ans an'
omap aps ap'
" }}}
" ijkl instead of hjkl {{{
nnoremap j h
vnoremap j h
nnoremap i k
vnoremap i k
nnoremap k j
vnoremap k j

" since 'i' is now used for motion, make 'h' do what 'i' used to
nnoremap h i
nnoremap H I
vnoremap h i
vnoremap H I
nnoremap I H

" operator pending mode. biggest impact is all the 'inner' mappings use h instead of i
onoremap j h
onoremap i k
onoremap k j
" }}}
" function keys {{{
nnoremap <F1>   :let @+=@"<CR>
nnoremap <F2>   :GundoToggle<CR>
nnoremap <F4>   :Copen<CR>
nnoremap <F5>   :Dispatch!<CR>
nnoremap <F6>   :set spell!<CR>
nnoremap <F8>   :call OsseCursorBlindOn()<CR>
nnoremap <F11>  :SCCompileRunAsync<CR>
nnoremap <F12>  :SCViewResultAsync<CR>
" }}}
" leader shortcuts to frequent commands {{{
nnoremap <leader>a :set paste<CR>m`O<Esc>``:set nopaste<CR>
nnoremap <leader>b :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <leader>c :WatchForChanges!<CR>
nnoremap <leader>f :set foldmethod=syntax<CR>:set foldmethod=manual<CR>
nnoremap <leader>j :CtrlPTag<CR>
nnoremap <leader>p :set list!<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>r :set relativenumber!<CR>
nnoremap <leader>s :call StripTrailingWhitespaces()<CR>
vnoremap <leader>s :!sort -f<CR>
"        <leader>t TaskList.vim
nnoremap <leader>w :w!<CR>
nnoremap <leader>x :wq<CR>

nnoremap <leader>zc :set cursorcolumn!<CR>
nnoremap <leader>zl :set cursorline!<CR>
nnoremap <leader>zs :syntax sync fromstart<CR>
nnoremap <leader>zv :tabedit $MYVIMRC<CR>

" potential git maps. TODO: revise
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gr :Gread<CR>:GitGutter<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>:GitGutter<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
nnoremap <silent> <leader>gg :SignifyToggle<CR>

" prevent Drawit from making swp and rwp mappings
nnoremap <leader>zzswp <Plug>SaveWinPosn
nnoremap <leader>zzrwp <Plug>RestoreWinPosn

" LaTeX (rubber) macro for compiling
" nnoremap <leader>ll :!rubber --pdf --warn all %<CR><CR>
nnoremap <leader>ll :call system("rubber --pdf --warn all " . shellescape(expand('%:p')))<CR>
" View PDF macro; '%:r' is current file's root (base) name.
nnoremap <leader>lv :!mupdf %:r.pdf &<CR><CR>
" }}}
" space leader maps. unite + window management {{{
nnoremap <Space>a :<C-u>Unite -start-insert -buffer-name=file_rec file_rec/async:!<CR>
nnoremap <Space>b :<C-u>Unite -start-insert -buffer-name=buffers  buffer<CR>
nnoremap <Space>f :<C-u>Unite -start-insert -buffer-name=files    file<CR>
nnoremap <Space>h :split<CR>
nnoremap <Space>l :call ToggleLocationList()<CR>
nnoremap <Space>o :only<CR>
nnoremap <Space>q :call ToggleQuickfixList()<CR>
nnoremap <Space>r :<C-u>Unite -start-insert -buffer-name=recent   file_mru<CR>
nnoremap <Space>s :<C-u>UniteWithInput  -start-insert -buffer-name=locate   locate<CR>
nnoremap <Space>t :<C-u>Unite -start-insert -buffer-name=tags     tag<CR>
nnoremap <Space>v :vsplit<CR>
nnoremap <Space>y :<C-u>Unite -start-insert -buffer-name=yanks    history/yank<CR>
nnoremap <Space>= :Tabularize /=<CR>
" TODO: line, line/fast, other unite sources listed starting at L:1892
" }}}
" slash leader shortcuts (currently not using){{{
" reserved for slimv/paredit in lisp files
" }}}
" ctrl normal mode {{{
"        <C-b> :CtrlP
nnoremap <C-f> /
nnoremap <C-h> :NERDTreeToggle<CR>
nnoremap <C-w>i <C-w><Up>
nnoremap <C-j> <C-w><Left>
nnoremap <C-k> <C-w><Down>
nnoremap <C-l> <C-w><Right>
nnoremap <C-n> gt
nnoremap <C-p> gT
"        <C-s> multi_cursor_start_key
nnoremap <C-t> :TagbarOpen fjc<CR>
" }}}
" alt/esc normal mode {{{
nnoremap <Esc>a :AirlineToggle<CR>
nnoremap <Esc>b :CtrlPMRU<CR>
nnoremap <Esc>h :nohlsearch<CR>
nnoremap <Esc>i :resize +2<CR>
nnoremap <Esc>j :vertical resize -2<CR>
nnoremap <Esc>k :resize -2<CR>
nnoremap <Esc>l :vertical resize +2<CR>
nnoremap <Esc>n :tabmove +1<CR>
nnoremap <Esc>p :tabmove -1<CR>
nnoremap <Esc>q :quitall<CR>
nnoremap <Esc>1 1gt
nnoremap <Esc>2 2gt
nnoremap <Esc>3 3gt
nnoremap <Esc>4 4gt
nnoremap <Esc>5 5gt
nnoremap <Esc>6 6gt
nnoremap <Esc>7 7gt
nnoremap <Esc>8 8gt
nnoremap <Esc>9 9gt
nnoremap <Esc>0 :tablast<CR>
" }}}
" alt/esc insert mode {{{
inoremap <Esc>i     <Up>
inoremap <Esc>j     <Left>
inoremap <Esc>k     <Down>
inoremap <Esc>l     <Right>
inoremap <Esc>b     <S-Left>
inoremap <Esc>B     <C-Left>
inoremap <Esc>w     <S-Right>
inoremap <Esc>W     <C-Right>
inoremap <Esc>h     <Home>
" Emacs!
inoremap <C-a>      <Home>
inoremap <C-e>      <End>
" }}}
" }}}
