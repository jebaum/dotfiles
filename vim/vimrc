set nocompatible " use vim settings not vi
colorscheme wombat256mod
execute pathogen#infect()
"=============================================================================
"                          RELATIVE LINE NUMBERS
"=============================================================================
autocmd InsertEnter * :set number
autocmd InsertLeave * :set relativenumber

function! g:ToggleNuMode()
  if(&rnu == 1)
    set nu
  else
    set rnu
  endif
endfunc
nnoremap <C-L> :call g:ToggleNuMode()<cr>
"=============================================================================
"                  FUNCTION TO REMOVE TRAILING WHITESPACES
"=============================================================================
fun! StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
" call function on write for these file types
autocmd FileType c,cpp,java,php,ruby,python autocmd BufWritePre <buffer> :call StripTrailingWhitespaces()
" autocmd BufWrite *.txt :call StripTrailingWhitespaces() " this line can be copied for any extension
"=============================================================================
"                                 MISC
"=============================================================================
" vim.org script 4168, defined in autoload/SyntaxRange.vim, documentation in .vim/doc/SyntaxRange.txt
" last parameter is optional and can be any highlight group. call in vimrc makes it do things when the file loads.
call SyntaxRange#Include('@begin=c@', '@end=c@', 'c', 'NonText')

"autocmd vimenter * if !argc() | NERDTree | endif " open nerdtree if no files were specified

" make :set list (show whitespace chars) nicer, don't show EOL
if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
  if &termencoding ==# 'utf-8' || &encoding ==# 'utf-8'
    let &listchars = "tab:\u21e5 ,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u00b7"
  endif
endif

" highlight end of line whitespcae
" match Todo /\s\+$/

" latex stuff
set grepprg=grep\ -nH\ $*
let g:tex_flavor = "latex"

let g:showmarks_enable = 0 " hide marks by default
let g:showmarks_marks = "abcdefghijklmnopqrstuvwxyz" " only show local, user created marks
let g:SuperTabDefaultCompletionType = "<c-n>" " supertab completion navigates menu downward
" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
"=============================================================================
"                             GERNERAL STUFF
"=============================================================================
syntax on
set ttyfast "we have a fast terminal (?)
set restorescreen=on " restore screen contents on exit
set title titlelen=150
set titlestring=
set titlestring+=%t\  " file name
set titlestring+=(%F) " full file path + name
set relativenumber
set backspace=indent,eol,start " allow backspace in insert mode
set autoread " reload files changed outside of vim
set noruler
set laststatus=2
set history=1000
set showmode
set showcmd
set showmatch
set cursorline
set incsearch "find as you type
set hlsearch  "hilight search terms
set ignorecase "case insensitive search
set scrolljump=5 "lines to scroll when cursor leaves screen
set scrolloff=8 "start scrolling when 8 lines away from margins
set updatetime=100
set encoding=utf8
set ffs=unix,dos,mac
set timeoutlen=2000  " wait for 2 seconds to time out leader
"set paste "permanently set paste mode, no retabbing by vim when pasting in text
"=============================================================================
"                                  FOLDING
"=============================================================================
" folding: zf#j manually folds # lines, or zf in visual mode selection.
" zo=open, zO=open all levels, zc=close, za=toggle.  zr=open all first level, zR = open all, mM for close all
" zj and zk to move between folds
" ':#,# fo' folds # through #
" zfa}, zfa], zfa) for matching closer, works same from closers (zfa{)
set foldmethod=syntax
set foldnestmax=1
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <space> zf
"au BufWinLeave * mkview
"au BufWinEnter * silent loadview
"=============================================================================
"                             TAB / INDENT STUFF
"=============================================================================
set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab
filetype plugin on " either this or the below one causes comment token to be auto added when hitting enter from comment
filetype indent on " manually overrode this for c/cpp files in .vim/after/ftplugin/c.vim
set linebreak " wrap lines at nice points
set textwidth=0
"set nowrap " don't wrap lines
"=============================================================================
"                                 WILDMENU
"=============================================================================
if has("wildmenu")
  set wildmenu " turn on wildmenu
  set wildmode=full
  set wildignore=*.o,*.a,*~,*.pyc " ignore compiled files
  set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
  set wildignore+=.DS_Store,.git,.hg,.svn
  set wildignore+=*~,*.swp,*.tmp
endif
"=============================================================================
"                                 KEYBINDS
"=============================================================================
command W :execute ':silent w !sudo tee % > /dev/null' | :edit!
let mapleader = ','  " use comma instead of \ as leader
let g:mapleader = ","
set pastetoggle=<INS>
nmap <INS> h<INS>

nmap <F1>   :let @+=@"<CR>
nmap <F2>   :call StripTrailingWhitespaces()<CR>
nmap <F3>   :set list!<CR>
nmap <F11>   zR
nmap <F12>   zM
nmap <C-n>  :NERDTreeToggle<CR>

" leader shortcuts to frequent commands
nmap <leader>c :WatchForChanges!<CR>
nmap <leader>d :delmarks a-z<CR>
nmap <leader>h :noh<return><esc>
nmap <leader>l :ls<CR>:b<space>
nmap <leader>m :DoShowMarks<CR>
nmap <leader>n :NoShowMarks<CR>
nmap <leader>q :q<CR>
nmap <leader>r :W<CR>
nmap <leader>s :set spell!<CR>
nmap <leader>w :w!<CR>

" space and ctrl+space for searching
nmap <Space> /
nmap <C-Space> ?

" use semicolon as well as colon to enter command mode
nmap ; :
vmap ; :
" make Y yank from cursor to end of line, consistent with C and D
nmap Y y$

" shifting doesn't exit visual mode
vmap < <gv
vmap > >gv

" move motion keys to be ijkl instead of hjkl. must be non recursive mappings
nnoremap j h
vnoremap j h
nnoremap i k
vnoremap i k
nnoremap k j
vnoremap k j
" since 'i' is now used for motion, make 'h' do what 'i' used to
nnoremap h i
nnoremap H I
vnoremap h i
vnoremap H I

" cursor keys go up and down by visual lines
imap <up> <C-O>gk
imap <down> <C-O>gj
nmap <up> gk
nmap <down> gj
vmap <up> gk
vmap <down> gj
" left and right arrow keys shift text
nmap <Left> <<
nmap <Right> >>
"=============================================================================
