" Initial setup {{{
colorscheme default
runtime macros/matchit.vim
set guifont=DejaVuSansMono\ 11
let mapleader = ','
augroup VIMRCMAP
  autocmd!
  autocmd BufRead *vimrc* nnoremap <buffer> z<Space> zMzrzvzz
augroup END
augroup EXPERIMENTAL
  " this can be pretty jarring going in and out of insert mode, but it seems
  " to make completion menus much more smooth/unflickery
  " autocmd InsertEnter * syntax off
  " autocmd InsertLeave * syntax on
  autocmd InsertEnter * set norelativenumber
  autocmd InsertLeave * set relativenumber
augroup END
" Vim-Plug  {{{
if empty(glob("~/.vim/autoload/plug.vim"))
    silent call mkdir(expand("~/.vim/autoload", 1), 'p')
    execute '!curl -fLo '.expand("~/.vim/autoload/plug.vim", 1).' https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
endif

let g:plug_threads = 70
let @p="03df/IPlug 'A':wV:Source:PlugInstallq"

call plug#begin('~/.vim/bundle')
Plug 'morhetz/gruvbox'
if has('unix')
  Plug 'Shougo/vimproc.vim', {'do' : 'make'}
  Plug 'gregsexton/gitv',    {'on': 'Gitv'}
  Plug 'jebaum/vim-tmuxify'
endif

if has('python') || has('python3') " pip3 install neovim only sets 'python3' to 1
  Plug 'honza/vim-snippets'
  Plug 'SirVer/ultisnips'
  Plug 'Valloric/MatchTagAlways'
endif

" settings for completion plugins defined in `after/plugin` directory
set shortmess+=c " helps with completion flicker
if has('python') && (exists('g:ycm')) " invoke vim with `vim --cmd 'let g:ycm=1'`
  Plug 'Valloric/YouCompleteMe'
  let g:EclimCompletionMethod = 'omnifunc'
elseif has('nvim')
  Plug 'Shougo/deoplete.nvim'
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_smart_case = 1
elseif has('lua')
  Plug 'Shougo/neocomplete.vim'
  " Plug 'Shougo/neocomplcache.vim'
  " Plug 'JazzCore/neocomplcache-ultisnips'
else
  Plug 'othree/vim-autocomplpop'
  Plug 'eparreno/vim-l9'
endif

" Plug 'lambdalisue/vim-gista'
" Plug 'blueyed/vim-diminactive'
Plug 'bruno-/vim-husk'
Plug 'bruno-/vim-man', {'on': ['Man', 'Vman', 'Mangrep']}
Plug 'christoomey/vim-tmux-navigator'
Plug 'ciaranm/detectindent'
Plug 'derekwyatt/vim-scala', {'for': ['scala']}
Plug 'dockyard/vim-easydir'
Plug 'mtth/scratch.vim',     {'on': ['Scratch', 'ScratchInsert', 'ScratchSelection']}
Plug 'gcmt/taboo.vim'
Plug 'godlygeek/tabular',    {'on': ['Tabularize', 'TabFirst']} " TODO replace with junegunn easy-align?
Plug 'jamessan/vim-gnupg'
Plug 'jaxbot/github-issues.vim', {'on': ['Gissues', 'Giadd', 'Giedit']}
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-github-dashboard', {'on': ['GHActivity', 'GHDashboard']}
Plug 'junegunn/vim-oblique' " https://github.com/haya14busa/incsearch.vim/ looks like it may be better?
Plug 'junegunn/vim-pseudocl'
Plug 'justinmk/vim-matchparenalways', {'for': ['c', 'cpp', 'java', 'javascript', 'lisp']}
Plug 'junegunn/rainbow_parentheses.vim', {'on': ['RainbowParentheses', 'RainbowParenthesesColors']}
Plug 'justinmk/vim-sneak'
Plug 'kshenoy/vim-togglelist', {'on': ['ToggleLL', 'ToggleQF']}
Plug 'manuel-colmenero/vim-simple-session'
Plug 'mattn/webapi-vim' " required by vim-github-comment
Plug 'mhinz/vim-signify',    {'on': ['SignifyToggle', 'SignifyToggleHighlight', '<Plug>(signify-next-hunk', '<Plug>(signify-prev-hunk)']}
Plug 'mhinz/vim-startify'
Plug 'mmozuras/vim-github-comment', {'on': 'GHComment'}
Plug 'osyo-manga/vim-anzu'
Plug 'osyo-manga/vim-over',  {'on': ['OverCommandLine', 'OverCommandLineMap', 'OverCommandLineNoremap']}
Plug 'rking/ag.vim',         {'on': ['Ag', 'AgAdd', 'AgFromSearch', 'LAg', 'LAgAdd', 'AgFile', 'AgHelp', 'LAgHelp']}
Plug 'scrooloose/nerdcommenter' " https://github.com/tpope/vim-commentary
Plug 'scrooloose/syntastic'
Plug 'Shougo/vinarise.vim',  {'on': ['Vinarise', 'VinariseDump', 'VinariseScript2Hex']}
Plug 'talek/obvious-resize', {'on': ['ObviousResizeLeft', 'ObviousResizeDown', 'ObviousResizeUp', 'ObviousResizeRight']}
Plug 'thinca/vim-quickrun',  {'on': 'QuickRun'}
Plug 'tmhedberg/SimpylFold', {'for': 'python'}
Plug 'tommcdo/vim-exchange', {'on': ['<Plug>(Exchange)', '<Plug>(ExchangeClear)', '<Plug>(ExchangeLine)']}
Plug 'tpope/vim-abolish',    {'on': ['Abolish', 'Subvert', 'S']}
Plug 'tpope/vim-dispatch' " ,   {'on': ['Make', 'Copen', 'Dispatch', 'FocusDispatch', 'Start', 'Spawn']}
Plug 'tpope/vim-eunuch',     {'on': ['Unlink', 'Remove', 'Move', 'Rename', 'Chmod', 'Mkdir', 'Find', 'Locate', 'SudoEdit', 'SudoWrite', 'Wall', 'W']}
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-pandoc/vim-pandoc',        {'for': 'pandoc'} " breaks textwidth?
Plug 'vim-pandoc/vim-pandoc-syntax', {'for': 'pandoc'}
Plug 'vim-pandoc/vim-pandoc-after',  {'for': 'pandoc'}
Plug 'vim-scripts/SyntaxRange', {'for': ['markdown', 'pandoc']}
Plug 'wellle/targets.vim'
" Plug '~/.vim/eclim', {'for': 'java'}

" Plug 'gcavallanti/vim-noscrollbar'
" set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %{noscrollbar#statusline(50,'â– ','â—«',['â—§'],['â—¨'])}

Plug 'dahu/vimple'
let g:vimple_init_vn = 0
call plug#end()

" setup colorscheme
let g:gruvbox_invert_selection=0
colorscheme gruvbox
" override some defaults
function! TweakColors()
  " TODO make sure current selection in oblique, or incsearch.vim if I switch to
  " it, is highlighted a distinct color from other matches

  highlight Normal                    ctermbg=8                                  guibg=#181818
  " for some reason, I need to have this line twice for it to work in neovim. ???
  highlight Normal                    ctermbg=8                                  guibg=#181818
  highlight UniteSel     ctermfg=16   ctermbg=73      cterm=none  guifg=#000000  guibg=#5FAFAF  gui=none
  highlight SpecialKey   ctermfg=243  ctermbg=237
  highlight IncSearch                 ctermbg=254

  " copied from statline.vim
  highlight User1 ctermfg=221  ctermbg=232  cterm=none guifg=#FFD75F  guibg=#080808  gui=none
  highlight User2 ctermfg=47   ctermbg=232  cterm=none guifg=#00FF5F  guibg=#080808  gui=none
  highlight User3 ctermfg=196  ctermbg=232  cterm=bold guifg=#FF0000  guibg=#080808  gui=bold
  highlight User4 ctermfg=49   ctermbg=232  cterm=none guifg=#00FFAF  guibg=#080808  gui=none
  highlight User5 ctermfg=47   ctermbg=232  cterm=none guifg=#00FF5F  guibg=#080808  gui=none
  highlight User6 ctermfg=231  ctermbg=232  cterm=none guifg=#FFFFFF  guibg=#080808  gui=none
  highlight User7 ctermfg=255  ctermbg=232  cterm=none guifg=#EEEEEE  guibg=#080808  gui=none
  highlight User8 ctermfg=207  ctermbg=232  cterm=none guifg=#FF5FFF  guibg=#080808  gui=none
  highlight User9 ctermfg=208  ctermbg=232  cterm=none guifg=#FF8700  guibg=#080808  gui=none
endfunction
call TweakColors()
augroup TweakColors
  autocmd!
  autocmd Syntax * call TweakColors()
augroup END
" }}}
" }}}
" Misc {{{
" Mail / Mutt {{{
augroup MUTT " spell check, textwidth, F1-3 for wrapping paragraphs in useful ways
  autocmd!
  autocmd BufRead /tmp/mutt-* set tw=72  " for email with mutt
  autocmd BufRead /tmp/mutt-* set spell  " <-- vim 7 required
augroup END
" }}}
" Fix borders of fullscreen GUI {{{
if has('gui_gtk') && has('gui_running')
    let s:border = synIDattr(synIDtrans(hlID('Normal')), 'bg', 'gui')
    exe 'silent !echo ''style "vimfix" { bg[NORMAL] = "' . escape(s:border, '#') . '" }'''.
                \' > ~/.gtkrc-2.0.mine'
    exe 'silent !echo ''widget "vim-main-window.*GtkForm" style "vimfix"'''.
                \' >> ~/.gtkrc-2.0.mine'
endif
" }}}
" Return to last edit position when opening files {{{
augroup ReturnToLast
  autocmd!
  autocmd BufReadPost *
       \ if line("'\"") > 0 && line("'\"") <= line("$") |
       \   exe "normal! g`\"" |
       \ endif
augroup END
" }}}
" Command mode maps and abbreviations {{{
command! CD cd %:p:h
command! SearchCount %s///gn

" common typos
command! -bang Q  :q<bang>
command! -bang QA :qa<bang>
command! -bang Qa :qa<bang>

cnoremap <C-p>  <Up>
cnoremap <C-n>  <Down>

" use one of these maps in the middle of a search to move, copy, or delete text
cnoremap $t <CR>:t''<CR>
cnoremap $T <CR>:''t.<CR>
cnoremap $m <CR>:m''<CR>
cnoremap $M <CR>:''m.<CR>
cnoremap $d <CR>:d<CR>``
" }}}
" SyntaxRange autocmds {{{
" last parameter is optional and can be any highlight group, determines delimiter colors
augroup SyntaxNotes
  autocmd!
  " for backward compatibility
  autocmd BufEnter *.md,*.page call SyntaxRange#Include('@begin=c@',    '@end=c@',    'c',    'Comment')
  autocmd BufEnter *.md,*.page call SyntaxRange#Include('@begin=cpp@',  '@end=cpp@',  'cpp',  'Comment')
  autocmd BufEnter *.md,*.page call SyntaxRange#Include('@begin=lisp@', '@end=lisp@', 'lisp', 'Comment')
  autocmd BufEnter *.md,*.page call SyntaxRange#Include('@begin=ml@',   '@end=ml@',   'ocaml','Comment')
  autocmd BufEnter *.md,*.page call SyntaxRange#Include('@begin=text@', '@end=text@', 'text', 'Tabline')

  autocmd BufEnter *.md,*.page call SyntaxRange#Include('```c',      '```', 'c',      'Comment')
  autocmd BufEnter *.md,*.page call SyntaxRange#Include('```cpp',    '```', 'cpp',    'Comment')
  autocmd BufEnter *.md,*.page call SyntaxRange#Include('```java',   '```', 'java',   'Comment')
  autocmd BufEnter *.md,*.page call SyntaxRange#Include('```lisp',   '```', 'lisp',   'Comment')
  autocmd BufEnter *.md,*.page call SyntaxRange#Include('```ml',     '```', 'ocaml',  'Comment')
  autocmd BufEnter *.md,*.page call SyntaxRange#Include('```prolog', '```', 'prolog', 'Comment')
  autocmd BufEnter *.md,*.page call SyntaxRange#Include('```python', '```', 'python', 'Comment')
  autocmd BufEnter *.md,*.page call SyntaxRange#Include('```text',   '```', 'text',   'Tabline')
  autocmd BufEnter *.md,*.page call SyntaxRange#Include('```javascript',   '```', 'javascript',   'Comment')
augroup END
" }}}
" FileType autocmds {{{
augroup FileTypeSettings
  autocmd!
  " autocmd BufWritePre * :call StripTrailingWhitespace()
  autocmd FileType gitcommit setlocal nocursorline nocursorcolumn
  autocmd FileType lisp setlocal foldmethod=indent foldlevel=0
  autocmd FileType make setlocal noexpandtab shiftwidth=4 tabstop=4
  autocmd FileType ocaml call MapInterpreter('ocaml', 'ocaml')
  autocmd FileType vimfiler setlocal relativenumber
  autocmd BufNewFile,BufRead  .tags set filetype=tags
  autocmd BufNewFile,BufRead *.log  set filetype=log
  autocmd BufRead,BufNewFile *.md set filetype=pandoc
  autocmd FileType markdown,pandoc nnoremap <buffer> <leader>m1 :call MarkdownMargin(1)<CR>
  autocmd FileType markdown,pandoc nnoremap <buffer> <leader>mb :call MarkdownToggle('md_linebreak', '+hard_line_breaks', 'turned on hard line breaks', 'turned off hard line breaks')<CR>
  autocmd FileType markdown,pandoc nnoremap <buffer> <leader>md :call MarkdownToggle('md_doublespace', ' -H ~/dotfiles/pandoc/doublespace.sty', 'turned on double spacing', 'turned off double spacing')<CR>
  autocmd FileType markdown,pandoc nnoremap <buffer> <leader>mm :call MarkdownToggle('md_mla', ' --template=mla_pandoc.tex', 'using MLA, double space and hard line break turned off. make sure mla_pandoc.tex is in current directory', 'not using MLA')<CR>
  autocmd FileType markdown,pandoc nnoremap <buffer> <leader>mp :call MarkdownToggle('md_presentation', ' -t beamer --slide-level=2 -V theme:Copenhagen', 'using beamer with Copenhagen theme, slide level 2', 'not using beamer')<CR>
  autocmd FileType markdown,pandoc nnoremap <buffer> <leader>ms :call MarkdownToggle('md_highlight', ' --no-highlight', 'turned on highlighting', 'turned off highlighting')<CR>
  autocmd FileType markdown,pandoc nnoremap <buffer> <leader>mr :w!<CR>:silent call MarkdownCommandRun('','removed','pdf')<CR>:echo b:md_msg<CR>
  autocmd FileType markdown,pandoc nnoremap <buffer> <leader>mv :call MarkdownCommandRun('','open', 'pdf')<CR>
  autocmd FileType markdown,pandoc nnoremap <buffer><silent> <leader>mw :w!<CR>:silent call MarkdownCommandRun('quickrun','built','html')<CR>
  autocmd FileType markdown,pandoc nnoremap <buffer><silent> gr :w!<CR>:silent call MarkdownCommandRun('quickrun','built','pdf')<CR>
  autocmd FileType tex      nnoremap <buffer> <leader>mv :call system("mupdf " . shellescape(expand('%:p:r')).'.pdf &')<CR>
  autocmd FileType tex      nnoremap <buffer><silent> gr  :w!<CR>:exe 'QuickRun latex -args "--pdf --warn all ' . shellescape(expand('%:p')) . '"'<CR>
augroup END
" }}}
" align quickfix output {{{
augroup QuickfixAlign
  autocmd!
  autocmd BufRead quickfix setl modifiable
            \| silent exe "%!perl -ple '
                \my ($file, $pos, $msg) = split qr{[|]}, $_, 3;
                \my $aligned_pos = sub {
                \  my @p = split qr{[ ]}, shift;
                \  return                                        if @p == 0;
                \  return sprintf q{\\%3s}, @p                   if @p == 1;
                \  return sprintf q{\\%3s \\%s}, @p              if @p == 2;
                \  return sprintf q{\\%3s \\%s \\%2s}, @p        if @p == 3;
                \  return sprintf q{\\%3s \\%s \\%2s \\%-8s}, @p if @p == 4;
                \  return join q{ }, @p;
                \}->($pos);
                \$_ = join q{|}, $file, $aligned_pos, $msg;
            \'"
            \| setl nomodifiable
augroup END
" }}}
" }}}
" Functions {{{
" StripWhitespace function {{{
function! StripWhitespace(line1, line2)
    let _s=@/
    let l = line(".")
    let c = col(".")
    execute ':' . a:line1 . ',' . a:line2 . 's/\s\+$//e'
    let @/=_s
    call cursor(l, c)
endfunction

command! -range=% StripWhitespace call StripWhitespace(<line1>, <line2>)
" }}}
" CustomMatch function {{{
function! CustomMatch(pattern)
  let search_string = "/" . a:pattern . "/"
  execute 'match MatchTarget ' . search_string
endfunction
command! -nargs=1 MatchText call CustomMatch(<f-args>)
command! -nargs=1 MT        call CustomMatch(<f-args>)
highlight MatchTarget ctermfg=16  ctermbg=231
" }}}
" Qargs, Qdof, Qdol {{{
" :Qargs will populate the arglist with the files in the quickfix list
command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
" cnoreabbrev qargs Qargs

" :Qdol applies an arbitrary command to every line found by :vimgrep (:Qdol normal @q)
command! -nargs=1 Qdol try | sil cfirst |
  \ while 1 | exec <q-args> | sil cn | endwhile |
  \ catch /^Vim\%((\a\+)\)\=:E\%(553\|42\):/ |
  \ endtry
" cnoreabbrev qdol Qdol

" :Qdof applies an arbitrary command to every file found by :vimgrep (at line of first match)
command! -nargs=1 Qdof try | sil cfirst |
  \ while 1 | exec <q-args> | sil cnf | endwhile |
  \ catch /^Vim\%((\a\+)\)\=:E\%(553\|42\):/ |
  \ endtry
" cnoreabbrev qdof Qdof

" implementation of Qargs
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction
" }}}
" Location list loop function {{{
function! WrapCommand(window, direction)
  if a:direction == "up"
    try
      execute a:window . 'previous'
    catch /^Vim\%((\a\+)\)\=:E553/
      execute a:window . 'last'
    endtry
  elseif a:direction == "down"
    try
      execute a:window . 'next'
    catch /^Vim\%((\a\+)\)\=:E553/
      execute a:window . 'first'
    endtry
  endif
endfunction

" nnoremap <Home> :call WrapCommand("l", "up")<CR>
" nnoremap <End>  :call WrapCommand("l", "down")<CR>
" }}}
" Visual mode increment function {{{
function! Increment()
  let a = line('.') - line("'<")
  let c = virtcol("'<")
  if a > 0
    execute 'normal! '.c.'|'.a."\<C-a>"
  endif
  normal `<
endfunction
" }}}
" Preserve, OpenQuickfix, AgOpenQF, BufGrep, CurBufGrep {{{
function! Preserve(command, ...)
  let curbuf = bufnr('%')
  let view = winsaveview()
  let search = @/

  let g:last_preserve = a:command
  execute a:command

  execute 'buffer ' . curbuf
  call winrestview(view)
  let @/ = search

  " optional command to run when done
  if a:0
    execute a:1
  endif
endfunction

function! OpenQuickfix(...)
  let curwin = winnr()
  if a:0
    execute a:1
  endif
  cwindow
  execute curwin . 'wincmd w'
endfunction
autocmd QuickFixCmdPost * call OpenQuickfix()

command! -nargs=1 -bar AgOpenQF call OpenQuickfix('Ag! ' . <f-args>)
" /dev/empty doesn't exist, error is suppressed by `silent!`. used to set title of quickfix window, since [l]vimgrepadd doesn't update that
command! -nargs=1 -bar BufGrep call Preserve('silent! vimgrep /' . <f-args> . '/gj /dev/empty | silent! noautocmd bufdo vimgrepadd /' . <f-args> . '/gj %', 'call OpenQuickfix()')
command! -nargs=1 -bar CurBufGrep execute 'vimgrep /' . <f-args> . '/gj %'
" }}}
" VisualStarSearch function and maps {{{
function! VSetSearch(cmdtype) " makes * and # work on visual mode too.
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction
" }}}
" toggle laststatus {{{
function! ToggleLaststatus()
  if &laststatus == 2
    set laststatus=1
    echo 'laststatus=1'
  else
    set laststatus=2
    echo 'laststatus=2'
  endif
endfunction
" }}}
" Red/Green Bar {{{
function! WideMsg(msg)
  let x=&ruler | let y=&showcmd
  set noruler noshowcmd
  redraw
  echo a:msg
  let &ruler=x | let &showcmd=y
endfunction

function! GreenBar(msg)
  echohl GreenBar
    call WideMsg(a:msg . repeat(" ", &columns - strwidth(a:msg) - 1))
  echohl None
endfunction

function! RedBar(msg)
  echohl RedBar
    call WideMsg(a:msg . repeat(" ", &columns - strwidth(a:msg) - 1))
  echohl None
endfunction
" }}}
" Source that accepts range {{{
function! DetectIfInVimFunction(...)
  " search upward from the current line for the command 'function' to see if we're currently in a function
  " if we find 'endfunction' command before we find 'function', we aren't in a function
  " if we find 'function' first, then search downward for the corresponding 'endfunction'
  " return list of function start and end line numbers if successful, list of -1 if not

  " TODO use search() ? `call search('function!', 'b')'
  let startline   = line('.')
  let currentline = line('.')

  if a:0 != 0
    let iterlimit = a:1
  else
    let iterlimit = 250
  endif

  let i = 0
  while i < iterlimit

    " see if the text 'function' or 'endfunction' is on the current line
    let funmatchpos    = match(getline(currentline), "function!")
    let endfunmatchpos = match(getline(currentline), "endfunction")

    if funmatchpos != -1  " we found the text 'function'
      let funsynlist = map(synstack(currentline, funmatchpos + 1),'synIDattr(v:val,"name")')
      if index(funsynlist, 'vimFuncKey') >= 0 " function start markers are in the VimFuncKey syntax group
        " save the line number of the first line of the function, and reset the search position
        let startfunline = currentline
        let currentline  = startline
      endif
    endif

    if endfunmatchpos != -1 " we found the text 'endfunction'
      let endfunsynlist = map(synstack(currentline, endfunmatchpos + 1),'synIDattr(v:val,"name")')
      if index(endfunsynlist, 'vimCommand') >= 0 " endfunction markers are in the VimCommand syntax group
        if currentline == startline || exists('startfunline')
          " if we started out with the cursor on endfunction, or we've already found a function start
          let endfunline = currentline
        else " we found an endfunction before finding a function start, so we aren't currently in a function
          break
        endif
      endif
    endif

    let i += 1

    if exists('startfunline') && exists('endfunline')
      return [startfunline, endfunline]
    elseif exists('startfunline')
      " we found the function start, so now we want to search downward
      let currentline += 1
    else
      let currentline -= 1
    endif
  endwhile
  return [-1, -1]
endfunction

function! SourcePart(line1, line2)
   let tmp = @z
   silent exec a:line1.",".a:line2."yank z"
   let @z = substitute(@z, '\n\s*\\', '', 'g')
   @z
   let @z = tmp
endfunction

function! SourceCurrentFunction()
  let [startfunline, endfunline] = DetectIfInVimFunction()
  if startfunline != -1
    call SourcePart(startfunline, endfunline)
    echo 'sourced ' . strpart(getline(startfunline), strlen('function! '))
  else
    echo 'cursor is not in a function'
  endif
endfunction

" if some argument is given, this command calls built-in command :source with
" given arguments; otherwise calls function SourcePart() which sources
" visually selected lines of the buffer.
command! -nargs=? -bar -range Source if empty("<args>") | call SourcePart(<line1>, <line2>) | else | exec "so <args>" | endif
" }}}
" }}}
" Plugins {{{
" detectindent {{{
let g:detectindent_preferred_expandtab  = 1
let g:detectindent_preferred_indent     = 4
let g:detectindent_max_lines_to_analyse = 1024
" }}}
" diminactive {{{
highlight ColorColumn ctermbg=16 guibg=#000000
" }}}
" exchange {{{
" need to define default mappings in vimrc for vim-plug lazy loading to work
nmap cx <Plug>(Exchange)
xmap X <Plug>(Exchange)
nmap cxc <Plug>(ExchangeClear)
nmap cxx <Plug>(ExchangeLine)
" }}}
" fugitive {{{
command! -nargs=1 -bar Gbranch   call GitBranch(<f-args>)
function! GitBranch(name)
    execute 'silent Git checkout -b ' . a:name
    redraw!
endfunction

command! -nargs=1 -bar Gcheckout   call GitCheckout(<f-args>)
function! GitCheckout(name)
    execute 'silent Git checkout ' . a:name
    redraw!
endfunction

autocmd User fugitive  " .. to go back up to parent directory when browsing git tree
  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
  \   nnoremap <buffer> .. :edit %:h<CR> |
  \ endif

autocmd BufReadPost fugitive://* set bufhidden=delete  " stop fugitive from making tons of buffers
" }}}
" fzf {{{
let g:fzf_launcher='urxvt -e sh -c %s'
" }}}
" gista {{{
let g:gista#post_private = 1
" }}}
" github-comment {{{
let g:github_user = 'jebaum'
" }}}
" github-dashboard {{{
let g:github_dashboard = {'username': 'jebaum'}
" }}}
" gitv {{{
let g:Gitv_OpenHorizontal = 1
let g:Gitv_WipeAllOnClose = 1
" }}}
" match tag {{{
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
    \ 'php' : 1,
    \}
" }}}
" matchparenalways {{{
let g:blockify_pairs = { 'lisp': [ '(', ')' ] }
" }}}
" multiple cursors {{{
let g:multi_cursor_exit_from_visual_mode=0
let g:multi_cursor_exit_from_insert_mode=0
" Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
  if exists(':NeoCompleteLock')==2
    exe 'NeoCompleteLock'
  endif
  AutoComplPopDisable
endfunction

" Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
  if exists(':NeoCompleteUnlock')==2
    exe 'NeoCompleteUnlock'
  endif
  AutoComplPopEnable
endfunction
" }}}
" nerdcommenter {{{
let NERDSpaceDelims     = 1
let NERDCompactSexyComs = 0
" }}}
" netrw {{{
let g:netrw_bufsettings = 'noma nomod nu nobl nowrap ro'
" }}}
" oblique {{{
let g:oblique#incsearch_highlight_all = 1
" TODO: the current match that gets special highlighting can't be cleared by nohlsearch. oblique bug or lack of feature?
let g:oblique#clear_highlight = 1
map n <Plug>(Oblique-n)<Plug>(anzu-update-search-status-with-echo)zv
map N <Plug>(Oblique-N)<Plug>(anzu-update-search-status-with-echo)zv

" nnoremap <silent><expr> <CR> ':set hls! ' . (&hls == 1 ? 'nocuc nocul' : 'cuc cul') . '<CR>'
" nnoremap <silent><C-c> :set nocuc nocul<CR>
augroup FancyCR
  autocmd!
  autocmd CmdwinEnter * nnoremap <buffer> <CR> <CR>
augroup END
" }}}
" pandoc {{{
augroup PandocMaps
  autocmd!
  autocmd filetype pandoc nnoremap <buffer><silent><expr> gc ":set cole=" . (&cole != 0 ? "0" : "2") . "<CR>"
augroup END
" let g:pandoc#syntax#codeblocks#embeds#langs = ["ruby", "c"]  " achieve same affect as SyntaxRange
let g:pandoc#folding#level = 1
let g:pandoc#formatting#textwidth = 80
let g:pandoc#folding#fdc = 0 " foldcolumn width
let g:pandoc#modules#disabled = ["folding"]
let g:pandoc#after#modules#enabled = ["ultisnips", "unite"]
" }}}
" quickrun {{{
let g:quickrun_config         = {}  " initialize dictionary
let g:quickrun_config._       = {'runner':'vimproc', 'runner/vimproc/updatetime':'250','hook/getpid/enable':'1'} " _ is fallback default value
let g:quickrun_config.generic = {'exec':'%c %a'}    " any arbitrary -command and -args, e.g. `QuickRun generic -command ls -args '-al ~'`
let g:quickrun_config.make    = {'exec':'make %a','runner':'vimproc','outputter':'quickfix'}
let g:quickrun_config.pandoc  = {'exec':'pandoc %a','runner':'vimproc','outputter':'quickfix','hook/markdown/enable':'1'}
let g:quickrun_config.python  = {'cmdopt':'-u','runner':'vimproc'}      " prevent python from buffering output
let g:quickrun_config.latex   = {'exec':'rubber %a','runner':'vimproc','outputter':'quickfix','hook/markdown/enable':'1'}

function! QuickRunSplit()
    " figure out what to prepend to :split command for buffer output based on current window size
    return winwidth(0) * 2 < winheight(0) * 5 ? "15" : "vertical 45"
endfunction

function! QuickRunTimeToggle()
  if !has_key(g:quickrun_config['_'], 'hook/time/enable')
    let g:quickrun_config['_']['hook/time/enable'] = '0'
  endif
  if g:quickrun_config['_']['hook/time/enable'] == '0'
    let g:quickrun_config['_']['hook/time/enable'] = '1'
    echo 'enabled time hook'
  else
    let g:quickrun_config['_']['hook/time/enable'] = '0'
    echo 'disabled time hook'
  endif
endfunction
" }}}
" rainbow {{{
" TODO update this for junegunn version, current config is for luochen
let g:rainbow_active = 1
let g:rainbow_conf = {
\   'guifgs': ['#5FFF00', '#FF5F00', '#FFFF00', '#FF00FF', '#FFFFFF', '#FF0000'],
\   'ctermfgs': ['82', '202', '226', '201', '231', '196'],
\   'operators': '_,_',
\   'parentheses': [['(',')'], ['\[','\]'], ['{','}']],
\   'separately': {
\       '*': {},
\       'lisp': {
\           'guifgs': ['#5FFF00', '#FF5F00', '#FFFFFF', '#FF00FF', '#FFFF00', '#FF0000'],
\           'ctermfgs': ['82', '202', '231', '201', '226', '196'],
\       },
\       'java': {
\           'parentheses': [['(',')'], ['\[','\]'], ['{','}'], ['<','>']],
\       },
\       'css': 0,
\       'stylus': 0,
\   }
\}
" }}}
" scratch {{{
let g:scratch_filetype = 'vim'
" }}}
" simple-session {{{
call system('mkdir -p ~/.vim/session')
let g:session_dir = "~/.vim/session"
set sessionoptions-=blank
set sessionoptions-=options

function! Fzfvimsessions()
    " TODO - errors when switching back and forth between sessions
    " need to figure out if that's something in my setup or if it's a bug with simple-session
    " when creating sessions with just one buffer, no split, with vim -u NONE -noplugin,
    " manually making session files and switching back and forth by :source works fine
  let current  = session#current()
  let sessions = session#list()
  " mark current session with '* ' prefix, this will be stripped out by the sink function
  call map(sessions, 'v:val == current ? "* " . v:val : v:val')

  call fzf#run({
  \ 'source':   sessions,
  \ 'sink*':    function('CallSimpleSessionSwitch'),
  \ 'window':  '8new',
  \ 'options': '--print-query -x --tiebreak=index --ansi --prompt="Sessions> "',
  \})
endfunction

function! CallSimpleSessionSwitch(name)
  " due to --print-query, first item in list will be the type query
  " printf "* test3\ntest4" | fzf --delimiter : --nth 1 --bind "enter:execute(echo {} | grep -Eo --color=never '[[:alnum:]]+')"
  let session_name = substitute(a:name[-1], '* ', '', '')
  call SCall('plugin/session.vim', 'SwitchSession', [session_name])
endfunction

" }}}
" signify {{{
let g:signify_disable_by_default = 0            " disable run by default
let g:signify_vcs_list           = [ 'git' ]    " I only use git for now
let g:signify_mapping_next_hunk  = '<leader>gj' " easier to use [c and ]c
let g:signify_mapping_prev_hunk  = '<leader>gk'
let g:signify_sign_change        = '~'
nmap <leader>gh :SignifyToggleHighlight \| SignifyToggle \| SignifyToggle<CR>
nmap <leader>gt :SignifyToggle<CR>
nmap ]c         <Plug>(signify-next-hunk)
nmap [c         <Plug>(signify-prev-hunk)
" }}}
" sneak  {{{
let g:sneak#use_ic_scs = 1
let g:sneak#s_next = 0
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T

nmap ; <Plug>SneakNext
omap ; <Plug>SneakNext
xmap ; <Plug>VSneakNext
nmap <Esc>; <Plug>SneakPrevious
omap <Esc>; <Plug>SneakPrevious
xmap <Esc>; <Plug>SneakPrevious
" }}}
" startify {{{
let g:startify_list_order        = ['bookmarks']
let g:startify_bookmarks         = [ '~/dotfiles/vim/vimrc', '~/dotfiles/aliases', '~/Dropbox/todo/TODO.txt' ]
let g:startify_files_number      = 7
let g:startify_session_detection = 1 " show session when Session.vim is found in current directory
let g:startify_session_autoload  = 0 " opening directories with a Session.vim will have it auto load
let g:startify_change_to_dir     = 1 " when opening file or bookmark, change to its directory
let g:startify_custom_indices    = ['a','f','h','j','k','l','w','r','u','o','p','z','x','n','m']
if has('nvim')
  let g:startify_custom_header     = [
    \ '    /\\\\\     /\\\  /\\\        /\\\  /\\\\\\\\\\\  /\\\\            /\\\\       ',
    \ '    \/\\\\\\   \/\\\ \/\\\       \/\\\ \/////\\\///  \/\\\\\\        /\\\\\\      ',
    \ '     \/\\\/\\\  \/\\\ \//\\\      /\\\      \/\\\     \/\\\//\\\    /\\\//\\\     ',
    \ '      \/\\\//\\\ \/\\\  \//\\\    /\\\       \/\\\     \/\\\\///\\\/\\\/ \/\\\    ',
    \ '       \/\\\\//\\\\/\\\   \//\\\  /\\\        \/\\\     \/\\\  \///\\\/   \/\\\   ',
    \ '        \/\\\ \//\\\/\\\    \//\\\/\\\         \/\\\     \/\\\    \///     \/\\\  ',
    \ '         \/\\\  \//\\\\\\     \//\\\\\          \/\\\     \/\\\             \/\\\ ',
    \ '          \/\\\   \//\\\\\      \//\\\        /\\\\\\\\\\\ \/\\\             \/\\\',
    \ '           \///     \/////        \///        \///////////  \///              \///',
    \ '',
    \ '',
    \ ]
else
  let g:startify_custom_header     = [
    \ '    /\\\        /\\\   /\\\\\\\\\\\   /\\\\            /\\\\  ',
    \ '    \/\\\       \/\\\  \/////\\\///   \/\\\\\\        /\\\\\\  ',
    \ '     \//\\\      /\\\       \/\\\      \/\\\//\\\    /\\\//\\\  ',
    \ '       \//\\\    /\\\        \/\\\      \/\\\\///\\\/\\\/ \/\\\  ',
    \ '         \//\\\  /\\\         \/\\\      \/\\\  \///\\\/   \/\\\  ',
    \ '           \//\\\/\\\          \/\\\      \/\\\    \///     \/\\\  ',
    \ '             \//\\\\\           \/\\\      \/\\\             \/\\\  ',
    \ '               \//\\\         /\\\\\\\\\\\  \/\\\             \/\\\  ',
    \ '                 \///         \///////////   \///              \///   ',
    \ '',
    \ '',
    \ ]
endif
" }}}
" syntastic {{{
if executable('clang')
  let g:syntastic_c_compiler               = 'clang'
  let g:syntastic_cpp_compiler             = 'clang++'
endif
let g:syntastic_c_compiler_options       = ' -Wall -Wextra'
let g:syntastic_cpp_compiler_options     = ' -Wall -Wextra'

function! SyntasticOpenMP()
  let g:syntastic_c_compiler         = 'gcc'
  let g:syntastic_c_compiler_options = ' -I/usr/lib/gcc/x86_64-unknown-linux-gnu/4.8.2/include -fopenmp -Wall -Wextra'
endfunction

augroup OPENMP
  autocmd!
  autocmd BufEnter /home/james/Dropbox/Documents/UCLA/Y3Q2/CS133/* call SyntasticOpenMP()
augroup END

let g:syntastic_java_javac_config_file_enabled = 1
" for allowing syntastic to find symbols in java classpath, put this in .syntastic_javac_config. must be in cwd
" let g:syntastic_java_javac_custom_classpath_command = "brazil-path testlib.classpath | gawk 'BEGIN {RS=\":\"} {print $1;}' | tr '\n' ':'"

let g:syntastic_check_on_open            = 1
let g:syntastic_check_on_wq              = 0
let g:syntastic_aggregate_errors         = 1 " display all errors
let g:syntastic_always_populate_loc_list = 1 " always put detecter errors in location list
let g:syntastic_error_symbol             = 'âœ—âœ—'
let g:syntastic_warning_symbol           = 'âš âš '
let g:syntastic_stl_format               = '[%E{E:%fe-%e}%B{|}%W{W:%fw-%w}]'
let g:syntastic_ignore_files = [
    \ '/home/james/Dropbox/Documents/UCLA/Y3Q1/CS118/Homework',
    \ '\m\.tex']
" }}}
" taboo {{{
" let g:taboo_tab_format = "%N %1a%m "
let g:taboo_tab_format = "%N %f%m "
" }}}
" tabular {{{
" `:TabFirst =` to align to first equal sign. similar to `:Tabularize /=.*/`
command! -nargs=1 -range TabFirst exec <line1> . ',' . <line2> . 'Tabularize /^[^' . escape(<q-args>, '\^$.[?*~') . ']*\zs' . escape(<q-args>, '\^$.[?*~')
" }}}
" tmux-complete {{{
let g:tmuxcomplete#trigger = '' " empty for neocomplete, 'omnifunc' for youcompleteme
" }}}
" tmuxify {{{
let g:tmuxify_custom_command = 'tmux split-window -dp 25'
let g:tmuxify_map_prefix = ''
let g:tmuxify_run = {
      \ 'sh':     'bash %',
      \ 'python': 'python %',
      \ 'ocaml':  'ocaml %',
      \ 'clisp':  'clisp %',
\}
" }}}
" ultisnips {{{
let g:UltiSnipsExpandTrigger       = "<C-l>"
let g:UltiSnipsJumpForwardTrigger  = "<C-l>"
let g:UltiSnipsJumpBackwardTrigger = "<C-h>"
let g:UltiSnipsListSnippets        = "<C-f>"
let g:snips_author                 = 'James Baumgarten'
" }}}
" }}}
" General {{{
" Set options {{{
set number                     " show line numbers
set relativenumber             " use relative line numbers
set exrc                       " allow directory specific .vimrc files
set secure                     " prevent directory specific .vimrcs from doing malicious things
set lazyredraw                 " don't redraw the screen w ile executing macros
set clipboard=unnamed          " by default, * system clipboard
set titlestring=%t\            " file name
set title titlelen=150         " max length of title string
set backspace=indent,eol,start " allow backspace in insert mode
set esckeys                    " make numpad work
set autoread                   " reload files changed outside of vim
set splitbelow                 " splits open below
set splitright                 " vsplits open on right
set hidden                     " allows navigating away from buffers with unsaved changes
set fillchars=""               " no dashes in folds or vertical bars in vsplits
set noruler                    " don't show the ruler
set laststatus=2               " always display the statusline
set history=10000              " length of command history
set showmode                   " show what mode we're in on the bottom line
set showcmd                    " show current command or visual selection info in bottom line
set cmdwinheight=10            " height of command line window
set showmatch                  " flash to matching paren when typing
set matchtime=3                " tenths of a second to flash to matching paren
set incsearch                  " find as you type
set hlsearch                   " hilight search terms
set magic                      " change how backslashes are handled in searches
" TODO: undofile, undo/backupdir, etc
set ignorecase                 " case insensitive search by default
set fileignorecase             " ignore case in commands like :buffer
set smartcase                  " case sensitive search if search contains uppercase letter
set nostartofline              " don't reset cursor to start of line when moving around
set nrformats=hex              " for C-a and C-x. recognize '0x' prefix as hex
set scrolljump=1               " lines to scroll when cursor leaves screen
set scrolloff=1                " start scrolling when 8 lines away from margins
set updatetime=4000            " swap file writes and CursorHold autocmd. weird fold closing problem
set encoding=utf8              " new files use utf-8 encoding by default
set ffs=unix,dos,mac           " new files use unix line endings by default
set timeout
set timeoutlen=3000
set ttimeoutlen=100
if !has('nvim')
  set restorescreen=on         " restore screen contents on exit
  set ttyfast                  " redraw screen faster
  set cryptmethod=blowfish     " more secure encryption for vim -x
endif
set switchbuf=usetab           " look to see if buffer is already open in another window or tab
set formatoptions-=r           " don't continue comment when hitting enter in insert mode
set formatoptions-=o           " don't automatically continue comment when hitting o in normal mode
set guioptions-=m              " hide gui menu bar
set guioptions-=T              " hide gui toolbar
set guioptions-=r              " hide gui righthand scrollbar
set guioptions-=e              " use regular tabline
set guioptions-=L              " no left scrollbar
set virtualedit=block          " allow visual block mode to move to where there aren't actually characters
set noswapfile                 " seriously who needs them
set tags=./.tags;              " search for .tags file upward (:h file-searching)
set previewheight=20
set listchars=tab:â–¸\ ,trail:â€¢,extends:>,eol:Â¬
set dictionary=/usr/share/dict/words  " dictionary completion with <C-X><C-K>
set suffixesadd+=.py,.rb       " suffixes to attempt to use for gf command
set path+=./**
set shell=zsh
set modeline                   " debian.vim defaults in ubuntu 12.04 unset this
if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j  " delete comment character when joining commented lines
endif
set nojoinspaces        " use only one space after a period when joining lines
syntax sync minlines=256       " speed up syntax hilighting
set synmaxcol=500
augroup SyntaxSync
  autocmd!
  autocmd BufReadPost syntax sync fromstart
augroup END
let g:no_ocaml_maps = 1
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
endif
" }}}
" Completion options {{{
set completeopt=longest,menuone
" hitting enter when completion menu is visible selects item, not used right now due to neocomplete
" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" }}}
" Fold {{{
" zf#j manually folds # lines, or zf in visual mode selection.
set foldnestmax=1   " folds only one level deep
set foldmethod =manual
set foldlevel  =1
augroup SyntaxFold
  autocmd!
  autocmd BufWinEnter    *.java           set foldnestmax=2 foldlevel=1
  autocmd BufWinEnter    *.c,*.cpp,*.java set foldmethod=syntax " define syntax folds when file loads
  autocmd InsertEnter    *.c,*.cpp,*.java set foldmethod=manual " once we start typing, using manual folds
augroup END
" }}}
" Tab/Indent {{{
set autoindent      " auto indent line to match above line when hitting enter
"set cindent        " newer and better smartindent
set smarttab        " make tabs more consistent with softtabstop
set shiftwidth =4   " amount of whitespace to insert or remove using normal mode indentation commands
set softtabstop=-1  " amount of whitespace deleted by backspace. -1 means use value of 'shiftwidth'
set tabstop    =4   " width of tab character
set shiftround      " indent by multiples of shiftwidth
set expandtab       " use spaces instead of tabs
set linebreak       " wrap lines at nice points
set textwidth=0     " disables textwidth

" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  echomsg
  call SummarizeTabs()
endfunction
" cnoreabbrev stab Stab

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction
" }}}
" Wildmenu {{{
if has("wildmenu")
  set wildmenu                    " turn on wildmenu
  set wildignorecase              " wildmenu doesn't care about case
  set wildmode=longest:full,full
  set wildignore=*.o,*.a,*~,*.pyc " ignore compiled files
  set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.mp4,*.mkv,*.avi,*.pdf,*.png,*.mp3
  set wildignore+=*.m4v,*.flv,*.flac,*.wma,*.doc,*.docx,*.ppt,*.pptx,*.m4a,*.m2ts,*.m3u
  set wildignore+=*:2\\,S,*:2\\,RS,*:2\\,FS,*:2\\,,*:2\\,FRS " for mutt
  set wildignore+=.DS_Store,.git,.hg,.svn
  set wildignore+=*~,*.swp,*.tmp
endif
" }}}
" }}}
" Keymaps {{{
" Misc {{{
" always show multiple tag options, <C-w> to open in new window
"nnoremap <C-]> <C-w>g<C-]>
nnoremap <C-]> g<C-]>

" repeat last substitute like :s, but preserve flags
nnoremap & :&&<CR>
xnoremap & :&&<CR>
nnoremap <BS> :<C-U>OverCommandLine<CR>%s/\V\<lt><c-r><c-w>\>//g<left><left>
" }}}
" fix the esc/alt mapping problem in terminal vim {{{
if !has('gui_running')
  set ttimeoutlen=10
  augroup FastEscape
    autocmd!
    autocmd InsertEnter * set timeoutlen=0 ttimeoutlen=-1
    autocmd InsertLeave * set timeoutlen=2000
  augroup END
endif
" }}}
" make/run maps with quickrun/vimproc, gm gr {{{
nnoremap <silent> gma :QuickRun make -args all<CR>
nnoremap <silent> gmc :QuickRun make -args clean<CR>
nnoremap <silent> gmm :QuickRun make<CR>
nnoremap <silent> gmk :call vimproc#kill(b:quickrun_pid,9)<CR>
nnoremap          gml :echo vimproc#get_last_errmsg()<CR>
nnoremap <silent> gms :call quickrun#sweep_sessions()<CR>
nnoremap <silent> gmt :call QuickRunTimeToggle()<CR>
nnoremap <silent> gr :QuickRun -mode n -runner vimproc<CR>
vnoremap <silent> gr :QuickRun -mode v -runner vimproc<CR>
" }}}
" misc g maps {{{
nnoremap          go    :ls<CR>:sb<Space>
nnoremap          gO    :ls<CR>:b<Space>
nnoremap          gp    gw{gw}
nnoremap          gs    gnv
nnoremap          g/    :<C-u>OverCommandLine<CR>%s/
xnoremap          g/    :<C-u>OverCommandLine<CR>%s/\%V
nnoremap          g?    :<C-u>OverCommandLine<CR>/
xnoremap          g?    :<C-u>OverCommandLine<CR>/\%V
nnoremap          g;    g;zz
nnoremap          g,    g,zz
nnoremap       g<Space> :call ToggleLaststatus()<CR>
" }}}
" generate map for alt and <C-Space> in both vim and gvim {{{
function! Altmap(char)
  if has('gui_running') || has('nvim') | return '<A-'.a:char.'>' | else | return '<Esc>'.a:char|endif
endfunction
function! AltShiftmap(char)
  if has('gui_running') || has('nvim') | return '<A-S-'.a:char.'>' | else | return '<Esc>'.a:char|endif
endfunction
let g:ctrl_space = has("gui_running") ? "<C-Space>" : "<C-@>"
" }}}
" changed default keys M - _ K {{{
nnoremap M %
onoremap M %
vnoremap M %
" make K do the opposite of J: split lines under the cursor
nnoremap K i<CR><Esc>k$
nnoremap - 10jzz
nnoremap _ 10kzz
" }}}
" easily toggle command line window with Q {{{
nnoremap Q q:
augroup CmdWindow
  autocmd!
  autocmd CmdwinEnter * nnoremap <buffer><silent> Q :q<CR>
augroup END
" }}}
" visual mode increment, search, shift, gV {{{
vnoremap <C-a> :call Increment()<CR>
xnoremap <C-f> <Esc>/\%V
vnoremap < <gv
vnoremap > >gv
nnoremap gV `[v`]
" }}}
" diff[update,put,obtain] gd[upo] {{{
nnoremap gdu :diffupdate<CR>
xnoremap gdp :diffput <BAR> diffupdate<CR>
xnoremap gdo :diffget <BAR> diffupdate<CR>
" }}}
" line yanks Y yl yaa {{{
nnoremap Y y$
nnoremap yl :let c=col(".")<CR>^v$hy:call cursor(line("."),c)<CR>
nnoremap yaa :let c=col(".") <BAR> let l = line(".")<CR>ggyG:call cursor(l,c)<CR>:echo 'yanked whole file'<CR>
" }}}
" c/C/x/X operators go to own registers instead of unnamed[plus] register specified by 'clipboard' {{{
nnoremap <expr> c (v:register == '+' \|\| v:register == '*') ? '"cc' : 'c'
nnoremap "+c "+c
nnoremap "*c "*c
nnoremap <expr> C (v:register == '+' \|\| v:register == '*') ? '"cC' : 'C'
nnoremap "+C "+C
nnoremap "*C "*C
nnoremap <expr> x (v:register == '+' \|\| v:register == '*') ? '"xx' : 'x'
nnoremap "+x "+x
nnoremap "*x "*x
nnoremap <expr> X (v:register == '+' \|\| v:register == '*') ? '"xX' : 'X'
nnoremap "+X "+X
nnoremap "*X "*X
" }}}
" quickfix maps {{{
augroup QuickFix
  autocmd!
  autocmd FileType qf setlocal nosplitbelow nosplitright
  autocmd FileType qf setlocal switchbuf=""
  autocmd FileType qf nnoremap <buffer><silent> <CR> <CR>zvzz
  autocmd FileType qf nnoremap <buffer><silent> t  <C-w><CR><C-w>Tzvzz
  autocmd FileType qf nnoremap <buffer><silent> T  <C-w><CR><C-w>TzvzzgT<C-w>j
  autocmd FileType qf nnoremap <buffer><silent> o  <CR>zvzz
  autocmd FileType qf nnoremap <buffer><silent> O  <CR>zvzz<C-w>j
  autocmd FileType qf nnoremap <buffer><silent> go <CR>:cclose <Bar> lclose<CR>zvzz
  autocmd FileType qf nnoremap <buffer><silent> s  <C-w><CR>zvzz
  autocmd FileType qf nnoremap <buffer><silent> S  <C-w><CR>zvzz<C-w>p
  autocmd FileType qf nnoremap <buffer><silent> v  :let g:qf_height = winheight('.')<CR><C-w><CR><C-w>L<C-w>p<C-w>J:resize <C-r>=g:qf_height<CR><CR><C-w>pzvzz
  autocmd FileType qf nnoremap <buffer><silent> V  :let g:qf_height = winheight('.')<CR><C-w><CR><C-w>L<C-w>p<C-w>J:resize <C-r>=g:qf_height<CR><CR><C-w>pzvzz<C-w>p
  autocmd FileType qf nnoremap <buffer><silent> q  :cclose <Bar> lclose<CR>zz
  autocmd FileType qf nnoremap <buffer><silent> <leader>q  :cclose <Bar> lclose<CR>zz
augroup END
" }}}
" arrow keys {{{
inoremap <up>   <C-O>gk
inoremap <down> <C-O>gj
vnoremap <up>        gk
vnoremap <down>      gj
" }}}
" Text Object / targets.vim maps {{{
let g:targets_pairs       = '()p {}c []r <>g'
let g:targets_quotes      = "\"d 's `e"

function! Append(type, ...)
    call feedkeys("`]a", 'n')
endfunction

function! Insert(type, ...)
    call feedkeys("`[i", 'n')
endfunction
" }}}
" k and j add to jumplist {{{
nnoremap <expr> k (v:count > 4 ? "m'" . v:count . 'k' : (v:count == 0 ? 'gk' : 'k'))
nnoremap <expr> j (v:count > 4 ? "m'" . v:count . 'j' : (v:count == 0 ? 'gj' : 'j'))
" }}}
" function keys {{{
nnoremap <F1>          :call StripTrailingWhitespace()<CR>
nnoremap <F2>          :set spell!<CR>
" }}}
" defualt (comma) leader maps {{{
" Main {{{
nnoremap <silent> <leader>a    :set opfunc=Append<CR>g@
"                         c    nerdcommenter maps
nnoremap <silent> <leader>d    :Dispatch!<CR>
nnoremap <silent> <leader>e    :lclose<CR>:silent! let g:ToggleList.cmd.copen="copen"<CR>:ToggleQF<CR>
nnoremap <silent> <leader>E    :lclose<CR>:silent! let g:ToggleList.cmd.copen="Copen"<CR>:ToggleQF<CR>
"                         f    fzf maps
nnoremap <silent> <leader>F    :set foldmethod=syntax<CR>:set foldmethod=manual<CR>
"                         g    fugitive and signify maps
nnoremap <silent> <leader>i    :set opfunc=Insert<CR>g@
nnoremap <silent> <leader>l    :cclose<CR>:ToggleLL<CR>
"                         m    make maps
nnoremap <silent> <leader>p    "0p
nnoremap <silent> <leader>P    "0P
nnoremap <silent> <leader>q    :q <Bar> redraw!<CR>
"                         s and t taken by search/todo
nnoremap <silent> <leader>sd   :SDelete<CR><CR>
nnoremap <silent> <leader>sh   :echo map(synstack(line('.'),col('.')),'synIDattr(v:val,"name")')<CR>
nnoremap          <leader>sl   :Session<Space>

nnoremap          <leader>sf   :call SourceCurrentFunction()<CR>
nnoremap          <leader>sv   :source %<CR>
nnoremap          <leader>sC   :source ~/dotfiles/vim/colors/guimiromod.vim<CR>
nnoremap          <leader>sV   :source $MYVIMRC<CR>
vnoremap          <leader>sv   :Source %<CR>
" TODO - somehow modify this to accept a range? e.g. 5,S
nnoremap <silent> <leader>S    :let c=col(".")<CR>V:Source<CR>:call cursor(line("."),c)<CR>
vnoremap <silent> <leader>S    <Esc>:let g:c=col(".")<CR>gv:Source<CR>:call cursor(line("."),g:c)<CR>

nnoremap <silent> <leader>tv   :tabedit $MYVIMRC<CR>
nnoremap <silent> <leader>u    yyp^v$r
nnoremap <silent> <leader>w    :w!<CR>
nnoremap <silent> <leader>x    :x!<CR>
vnoremap <silent> <leader>y    y`]
nnoremap <silent> <leader>zs   :syntax sync fromstart<CR>

" buffer search
nnoremap <silent> <leader>tt :silent! vimgrep /\CTODO/gj %<CR>
vnoremap <silent> <leader>ss :<C-u>call VSetSearch('/')<CR>:CurBufGrep <C-r>=@/<CR><CR>
nnoremap          <leader>ss :CurBufGrep<Space>
" all buffer search
nnoremap <silent> <leader>to :silent! vimgrep /\CTODO/gj /dev/empty<CR>:BufGrep \CTODO<CR>
vnoremap <silent> <leader>so :<C-u>call VSetSearch('/')<CR>:BufGrep <C-r>=@/<CR><CR>
nnoremap          <leader>so :BufGrep<Space>
" recursive search
nnoremap <silent> <leader>tr :AgOpenQF TODO<CR>
vnoremap <silent> <leader>sr :<C-u>call VSetSearch('/')<CR>gv"sy:Ag -Q <C-r>=@s<CR><CR>
nnoremap          <leader>sr :AgOpenQF<Space>

nnoremap <silent> <leader><leader>r  :redraw!<CR>
nnoremap <silent> <leader><leader>d  :Dispatch<CR>
" }}}
" <leader>g[jkht] signify {{{
nnoremap <silent> <leader>ga  :Git add %:p<CR><CR>
nnoremap          <leader>gb  :Gbranch<Space>
nnoremap <silent> <leader>gB  :Gblame<CR>
nnoremap <silent> <leader>gc  :Gcommit --verbose<CR>
nnoremap          <leader>gC  :Gcheckout<Space>
nnoremap <silent> <leader>gd  :Gdiff<CR>
nnoremap          <leader>ge  :Gedit<Space>
nnoremap          <leader>gg  :Ggrep<Space>
nnoremap <silent> <leader>gla :silent Glog -- <Bar> redraw!<CR>
nnoremap <silent> <leader>glf :silent Glog -- % <Bar> redraw!<CR>
nnoremap <silent> <leader>gli :silent Glog <Bar> redraw!<CR>
nnoremap          <leader>gm  :Gmove<Space>
nnoremap <silent> <leader>gp  :Dispatch! git push<CR>
nnoremap <silent> <leader>gr  :Gread<CR>
nnoremap <silent> <leader>gs  :Gstatus<CR>
nnoremap <silent> <leader>gw  :Gwrite<CR>
" }}}
" <leader>m[acfq] Make {{{
nnoremap <leader>ma          :Make! -j4 all<CR>
nnoremap <leader><leader>ma  :Make  -j4 all<CR>
nnoremap <leader>mc          :Make! clean<CR>
nnoremap <leader><leader>mc  :Make  clean<CR>
nnoremap <leader>mf          :Make! -j4 <C-r>=expand('%:r')<CR><CR>
nnoremap <leader><leader>mf  :Make  -j4 <C-r>=expand('%:r')<CR><CR>
nnoremap <leader>mm          :Make! -j4<CR>
nnoremap <leader><leader>mm  :Make  -j4<CR>
" }}}
" }}}
" space leader maps. fzf + tabularize + vim-plug {{{
" TODO go through various fzf.vim functions and figure out which ones to use, how to customize them
let g:fzf_command_prefix = 'FZF' " easy autocompletion, and prevent overlap with ag.vim
nnoremap <silent> <Space>a   :FZFAg<CR>
nnoremap          <Space>A   :FZFAg<Space>
nnoremap <silent> <Space>b   :FZFBuffers<CR>
nnoremap          <Space>c   :FZFCommands<CR>
nnoremap <silent> <Space>f   :FZFFiles<CR>
nnoremap <silent> <Space>g   :FZFLines<CR>
nnoremap <silent> <Space>G   :FZFBLines<CR>
nnoremap          <Space>h   :FZFHelptags<CR>
" search and command history
nnoremap <silent> <Space>H   :FZFHistory<CR>
nnoremap          <Space>l   :FZFLocate<Space>
nnoremap <silent> <Space>m   :FZFMarks<CR>
nnoremap <silent> <Space>M   :FZFMaps<CR>
nnoremap <silent> <Space>r   :FZFFiles<CR>
nnoremap          <Space>S   :FZFSnippets<CR>
nnoremap <silent> <Space>t   :FZFTags<CR>
nnoremap <silent> <Space>T   :FZFBTags<CR>
nnoremap <silent> <Space>v   :FZFCommits<CR>
nnoremap <silent> <Space>V   :FZFBCommits<CR>
nnoremap <silent> <Space>w   :FZFWindows<CR>

nnoremap <Space>pu       :PlugUpdate<CR>
nnoremap <Space>pU       :PlugUpgrade<CR>
" }}}
" ctrl normal mode {{{
nnoremap <C-w><C-b>         :VimFilerExplorer -find<CR>:redraw!<CR>
nnoremap <C-b>              :VimFiler -find<CR>:redraw!<CR>
nnoremap <C-n>              gt
nnoremap <C-p>              gT
nnoremap <C-w>o             <C-w>o:redraw!<CR>
nnoremap <C-w>s             <C-w>s:redraw!<CR>
nnoremap <C-w>v             <C-w>v:redraw!<CR>
" }}}
" ctrl insert mode {{{
inoremap <C-a>   <Home>
inoremap <C-c>   <Esc><Esc>`^
inoremap <C-e>   <End>
inoremap <Esc>   <Esc>`^
" }}}
" alt normal mode {{{
nnoremap          gh    <C-w>H
nnoremap          gj    <C-w>J
nnoremap          gk    <C-w>K
nnoremap          gl    <C-w>L
exec 'nnoremap <silent> ' . AltShiftmap('H') . ' :execute "ObviousResizeLeft " . (winwidth(0) * 1/6)<CR>'
exec 'nnoremap <silent> ' . AltShiftmap('J') . ' :execute "ObviousResizeDown " . (winheight(0) * 1/6)<CR>'
exec 'nnoremap <silent> ' . AltShiftmap('K') . ' :execute "ObviousResizeUp " . (winheight(0) * 1/6)<CR>'
exec 'nnoremap <silent> ' . AltShiftmap('L') . ' :execute "ObviousResizeRight " . (winwidth(0) * 1/6)<CR>'
exec 'nnoremap <silent> ' . Altmap('h') . ' :execute "ObviousResizeLeft 1"<CR>'
exec 'nnoremap <silent> ' . Altmap('j') . ' :execute "ObviousResizeDown 1"<CR>'
exec 'nnoremap <silent> ' . Altmap('k') . ' :execute "ObviousResizeUp 1"<CR>'
exec 'nnoremap <silent> ' . Altmap('l') . ' :execute "ObviousResizeRight 1"<CR>'
exec 'nnoremap <silent> ' . Altmap('m') . ' :match none<CR>'
exec 'nnoremap <silent> ' . Altmap('n') . ' :tabmove +1<CR>'
exec 'nnoremap <silent> ' . Altmap('p') . ' :tabmove -1<CR>'
exec 'nnoremap <silent> ' . Altmap('q') . ' :quitall<CR>'
exec 'nnoremap <silent> ' . Altmap('1') . ' 1gt'
exec 'nnoremap <silent> ' . Altmap('2') . ' 2gt'
exec 'nnoremap <silent> ' . Altmap('3') . ' 3gt'
exec 'nnoremap <silent> ' . Altmap('4') . ' 4gt'
exec 'nnoremap <silent> ' . Altmap('5') . ' 5gt'
exec 'nnoremap <silent> ' . Altmap('6') . ' 6gt'
exec 'nnoremap <silent> ' . Altmap('7') . ' 7gt'
exec 'nnoremap <silent> ' . Altmap('8') . ' 8gt'
exec 'nnoremap <silent> ' . Altmap('9') . ' 9gt'
exec 'nnoremap <silent> ' . Altmap('0') . ' :tablast<CR>'
" }}}
" alt insert mode {{{
exec 'inoremap ' . Altmap('h') . '   <Left>'
exec 'inoremap ' . Altmap('j') . '   <Down>'
exec 'inoremap ' . Altmap('k') . '   <Up>'
exec 'inoremap ' . Altmap('l') . '   <Right>'
exec 'inoremap ' . Altmap('b') . '   <S-Left>'
exec 'inoremap ' . Altmap('B') . '   <C-Left>'
exec 'inoremap ' . Altmap('w') . '   <S-Right>'
exec 'inoremap ' . Altmap('W') . '   <C-Right>'
" }}}
" slash leader maps. tmuxify {{{
function! TmuxifySendLines(count, direction)
  let l = line(".")
  let c = col(".")

  if a:count == 0
    execute 'normal! "vyy'
  else
    execute 'normal! "vy' . a:count . a:direction
  endif

  TxSend!(@v)
  call cursor(l, c)
endfunction

function! AutoAssociate()
  if !exists('$TMUX')
    let descriptor=systemlist('tmux list-panes -aF "#S:#I.#P"')[0]
    if descriptor == 'failed to connect to server: Connection refused'
      echo "there's no tmux running!"
      return -1
    endif
  else
    let vimdescriptor=systemlist('tmux display-message -p "#S:#I.#P"')[0]
    let descriptorlist=systemlist('tmux list-panes -sF "#S:#I.#P"')
    if len(descriptorlist) == 1
      echo "vim is the only pane!"
      return -1
    else
      for entry in descriptorlist
          if entry == vimdescriptor | continue | endif
          let descriptor=entry
          break
      endfor
    endif
  endif

  let [session, window, pane] = split(descriptor, '\W')
  call tmuxify#pane_set('!', session, window, pane)
  echo "associated with pane " . session . ":" . window . "." . pane
endfunction

function! TxCreateWrapper()
  if tmuxify#get_associated_pane('!') != -1
    echo 'TxCreateWrapper: already associated with a pane'
    return -1
  endif
  if !exists('$TMUX')
    call system('urxvt -e zsh -c "tmux" &')
    let counter = 0
    while counter < 100
      if empty(systemlist('pgrep tmux'))
        let counter += 1
        sleep 20m
      else
        break
      endif
    endwhile
    call AutoAssociate()
  else
    TxCreate!
  endif
endfunction

nnoremap <silent> \a  :call tmuxify#pane_command('!', 'copy-mode')<CR>
nnoremap <silent> \c  :TxSigInt!<CR>
nnoremap <silent> \d  :call tmuxify#pane_send_raw('C-d', '!')<CR>
nnoremap <silent> \j  :<C-u>call TmuxifySendLines(v:count, "j")<CR>
nnoremap <silent> \k  :<C-u>call TmuxifySendLines(v:count, "k")<CR>
nnoremap <silent> \l  :TxClear!<CR>
nnoremap          \o  :call TxCreateWrapper()<CR>
nnoremap <silent> \s  "vyy:TxSend!(@v)<CR>
vnoremap <silent> \s  "vy:TxSend!(@v)<CR>
" TODO - if somebody C-c's or puts invalid input in the prompt, errors aren't handled
nnoremap <silent> \t  :TxSetPane<CR>
nnoremap <silent> \T  :TxSetPane!<CR>
nnoremap <silent> \w  :call tmuxify#pane_send_raw('C-u', '!')<CR>:TxClear!<CR>
nnoremap <silent> \x  :TxKill!<CR>
nnoremap <silent> \|  :TxSend!<CR>
nnoremap <silent> \<CR>  :call tmuxify#pane_send_raw('C-j', '!')<CR>
nnoremap          \\  :call AutoAssociate()<CR>

nnoremap <silent> <up>    :call tmuxify#pane_send_raw('C-u', '!')<CR>
nnoremap <silent> <down>  :call tmuxify#pane_send_raw('C-d', '!')<CR>
nnoremap <silent> <left>  :call tmuxify#pane_send_raw('C-b', '!')<CR>
nnoremap <silent> <right> :call tmuxify#pane_send_raw('C-f', '!')<CR>
" }}}
" }}}
" vim: foldmethod=marker foldlevel=1
