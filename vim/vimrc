" Initial setup {{{
runtime macros/matchit.vim
let mapleader = ','
augroup LineNumberAutoToggle
  autocmd InsertEnter * let b:relativenumberSetting = &relativenumber | setlocal norelativenumber
  autocmd InsertLeave * if b:relativenumberSetting | setlocal relativenumber | endif
augroup END
" Vim-Plug  {{{
if empty(glob("~/.vim/autoload/plug.vim"))
    silent call mkdir(expand("~/.vim/autoload", 1), 'p')
    execute '!curl -fLo '.expand("~/.vim/autoload/plug.vim", 1).' https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
endif

let g:plug_threads = 50
let @p="03df/IPlug 'A':wV:Source:PlugInstall"

call plug#begin('~/.vim/bundle')
Plug 'gruvbox-community/gruvbox'
if has('unix')
  Plug 'junegunn/gv.vim',    {'on': ['GV']}
  Plug 'tpope/vim-fugitive'
  Plug 'jebaum/vim-tmuxify'
endif

if has('python') || has('python3') " pip3 install neovim only sets 'python3' to 1
  Plug 'honza/vim-snippets'
  Plug 'SirVer/ultisnips'
  Plug 'Valloric/MatchTagAlways', {'for': ['html', 'xml']}
endif

if has('nvim')
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'nvim-treesitter/nvim-treesitter'
else
  Plug 'othree/vim-autocomplpop'
  Plug 'vim-scripts/L9'
endif

Plug 'airblade/vim-rooter'
Plug 'vim-utils/vim-husk'
Plug 'christoomey/vim-tmux-navigator'
Plug 'jreybert/vimagit',     {'on': ['Magit', 'MagitOnly']}
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'haya14busa/is.vim'
Plug 'haya14busa/vim-asterisk'
" Plug 'luochen1990/rainbow', {'on': ['RainbowToggle', 'RainbowToggleOff', 'RainbowToggleOn']}
Plug 'justinmk/vim-sneak'
Plug 'zhimsel/vim-stay'
Plug 'wsdjeg/vim-fetch'
Plug 'lambdalisue/gina.vim', {'on': ['Gina']}
Plug 'mhinz/vim-grepper', {'on': ['Grepper', '<Plug>(GrepperOperator)']}
Plug 'mhinz/vim-signify' " do not lazy load
Plug 'mhinz/vim-startify'
Plug 'osyo-manga/vim-anzu'
Plug 'osyo-manga/vim-brightest', {'on': ['BrighestClear', 'BrightestEnable', 'BrightestDiable', 'BrightestHighlight', 'BrightestLock', 'BrightestUnlock', 'BrightestToggle']}
Plug 'scrooloose/nerdcommenter'
Plug 'talek/obvious-resize', {'on': ['ObviousResizeLeft', 'ObviousResizeDown', 'ObviousResizeUp', 'ObviousResizeRight']}
" Plug 'timakro/vim-searchant'
" Plug 'tmhedberg/SimpylFold', {'for': 'python'}
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-eunuch',     {'on': ['Unlink', 'Remove', 'Move', 'Rename', 'Chmod', 'Mkdir', 'Find', 'Locate', 'SudoEdit', 'SudoWrite', 'Wall', 'W']}
Plug 'tpope/vim-jdaddy'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sleuth' " auto detect indent settings
Plug 'tpope/vim-surround' " TODO vim-sandwich? https://github.com/machakann/vim-sandwich/wiki/Introduce-vim-surround-keymappings
Plug 'tpope/vim-unimpaired'
Plug 'Valloric/ListToggle'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-pandoc/vim-pandoc-syntax', {'for': 'pandoc'}
Plug 'vim-scripts/SyntaxRange', {'for': ['markdown', 'pandoc']}
Plug 'wellle/targets.vim' " https://github.com/wellle/targets.vim/issues/225, and issues/247 - some issues with folds
Plug 'wellle/tmux-complete.vim'
Plug 'Konfekt/FastFold'

call plug#end()
let g:gruvbox_invert_selection=0
set background=dark
colorscheme gruvbox
function! TweakColors() " override some defaults
  highlight Search        ctermfg=250  ctermbg=24   guifg=#552583  guibg=#FDB927
  highlight IncSearch     ctermfg=255  ctermbg=24   guifg=#FDB927  guibg=#552583
  " for vim-searchant
  highlight SearchCurrent ctermfg=250  ctermbg=24   guifg=#552583  guibg=#FDB927

  highlight Folded                     ctermbg=16                  guibg=#000000
  highlight Function      ctermfg=43                guifg=#00D7AF
  highlight MatchParen    ctermfg=16   ctermbg=201  guifg=#000000  guibg=#FF00FF
  highlight Normal        ctermfg=223               guifg=#FFD7AF  guibg=#1C1C1C
  highlight SpecialKey    ctermfg=231  ctermbg=236  guifg=#FFFFFF  guibg=#303030
  highlight String        ctermfg=46                guifg=#70F0F0
  highlight QuickFixLine               ctermbg=16                  guibg=#000000

  highlight JustYanked    ctermfg=108  ctermbg=235  guifg=#F0F0F0  guibg=#552583
endfunction
call TweakColors()
augroup TweakColors
  autocmd!
  autocmd Syntax * call TweakColors()
augroup END
" }}}
" }}}
" Misc {{{
" Command mode maps and abbreviations {{{
command! CD cd %:p:h
command! SearchCount %s///gn

" use one of these maps in the middle of a search to move, copy, or delete text
cnoremap $t <CR>:t''<CR>
cnoremap $T <CR>:''t.<CR>
cnoremap $m <CR>:m''<CR>
cnoremap $M <CR>:''m.<CR>
cnoremap $d <CR>:d<CR>``
" }}}
" FileType autocmds {{{
augroup FileTypeSettings
  autocmd!
  autocmd BufRead *vimrc* nnoremap <buffer> z<Space> zMzrzvzz
  autocmd FileType gitcommit setlocal nocursorline nocursorcolumn
  autocmd FileType make setlocal noexpandtab shiftwidth=4 tabstop=4
  autocmd BufNewFile,BufRead  .tags set filetype=tags
  autocmd BufNewFile,BufRead *.log  set filetype=log
  " autocmd BufRead,BufNewFile *.md   set filetype=pandoc
  autocmd BufNewFile,BufFilePre,BufRead *.md set filetype=markdown.pandoc " from vim-pandoc-syntax
  autocmd FileType javascript setlocal foldmethod=syntax foldnestmax=5 foldlevel=1
  autocmd BufRead coc-settings.json syntax match Comment +\/\/.\+$+ " coc-settings file uses jsonc, supports comments
augroup END
" }}}
" align quickfix output {{{
augroup QuickfixAlign
  autocmd!
  autocmd BufRead quickfix setl modifiable
            \| silent exe "%!perl -ple '
                \my ($file, $pos, $msg) = split qr{[|]}, $_, 3;
                \my $aligned_pos = sub {
                \  my @p = split qr{[ ]}, shift;
                \  return                                        if @p == 0;
                \  return sprintf q{\\%3s}, @p                   if @p == 1;
                \  return sprintf q{\\%3s \\%s}, @p              if @p == 2;
                \  return sprintf q{\\%3s \\%s \\%2s}, @p        if @p == 3;
                \  return sprintf q{\\%3s \\%s \\%2s \\%-8s}, @p if @p == 4;
                \  return join q{ }, @p;
                \}->($pos);
                \$_ = join q{|}, $file, $aligned_pos, $msg;
            \'"
            \| setl nomodifiable
augroup END
" }}}
" generate map for alt and <C-Space> in both vim and gvim {{{
function! Altmap(char)
  if has('gui_running') || has('nvim') | return '<A-'.a:char.'>' | else | return '<Esc>'.a:char|endif
endfunction
function! AltShiftmap(char)
  if has('gui_running') || has('nvim') | return '<A-S-'.a:char.'>' | else | return '<Esc>'.a:char|endif
endfunction
let g:ctrl_space = has("gui_running") ? "<C-Space>" : "<C-@>"
" }}}
" autocmd to highlight yanked text {{{
augroup HighlightYankedText
    autocmd!
    autocmd TextYankPost * silent! lua vim.highlight.on_yank{higroup="JustYanked", timeout=750}
augroup END
" }}}
" return to last file location on open {{{
" https://vi.stackexchange.com/questions/106/how-can-i-restore-the-cursor-position-when-opening-a-file
augroup ReturnToLastFilePosition
  autocmd!
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") && &filetype != "gitcommit" |
        \ execute("normal `\"") |
    \ endif
augroup END
" }}}
" }}}
" Functions {{{
" StripWhitespace function {{{
function! StripWhitespace(line1, line2)
    let _s=@/
    let l = line(".")
    let c = col(".")
    execute ':' . a:line1 . ',' . a:line2 . 's/\s\+$//e'
    let @/=_s
    call cursor(l, c)
endfunction
command! -range=% Strip call StripWhitespace(<line1>, <line2>)
" }}}
" Visual mode increment function {{{
function! Increment()
  let a = line('.') - line("'<")
  let c = virtcol("'<")
  if a > 0
    execute 'normal! '.c.'|'.a."\<C-a>"
  endif
  normal `<
endfunction
" }}}
" ProcessJSON {{{
function! ProcessJSON()
    %s/\s\+$//e  " strip trailing whitespace
    g/^$/d       " delete empty lines
    %join        " join whole file into one line
    %s/^\s\+//e  " strip any leading whitespace from opening line
    call Stab(2) " set tabstop to 2
    call jdaddy#reformat('jdaddy#outer_pos', 0) " tpope jdaddy
endfunction
command! JSON call ProcessJSON()
" }}}
" Source that accepts range {{{
function! DetectIfInVimFunction(...)
  " search upward from the current line for the command 'function' to see if we're currently in a function
  " if we find 'endfunction' command before we find 'function', we aren't in a function
  " if we find 'function' first, then search downward for the corresponding 'endfunction'
  " return list of function start and end line numbers if successful, list of -1 if not

  " TODO use search() ? `call search('function!', 'b')'
  let startline   = line('.')
  let currentline = line('.')

  if a:0 != 0
    let iterlimit = a:1
  else
    let iterlimit = 250
  endif

  let i = 0
  while i < iterlimit

    " see if the text 'function' or 'endfunction' is on the current line
    let funmatchpos    = match(getline(currentline), "function!")
    let endfunmatchpos = match(getline(currentline), "endfunction")

    if funmatchpos != -1  " we found the text 'function'
      let funsynlist = map(synstack(currentline, funmatchpos + 1),'synIDattr(v:val,"name")')
      if index(funsynlist, 'vimFuncKey') >= 0 " function start markers are in the VimFuncKey syntax group
        " save the line number of the first line of the function, and reset the search position
        let startfunline = currentline
        let currentline  = startline
      endif
    endif

    if endfunmatchpos != -1 " we found the text 'endfunction'
      let endfunsynlist = map(synstack(currentline, endfunmatchpos + 1),'synIDattr(v:val,"name")')
      if index(endfunsynlist, 'vimCommand') >= 0 " endfunction markers are in the VimCommand syntax group
        if currentline == startline || exists('startfunline')
          " if we started out with the cursor on endfunction, or we've already found a function start
          let endfunline = currentline
        else " we found an endfunction before finding a function start, so we aren't currently in a function
          break
        endif
      endif
    endif

    let i += 1

    if exists('startfunline') && exists('endfunline')
      return [startfunline, endfunline]
    elseif exists('startfunline')
      " we found the function start, so now we want to search downward
      let currentline += 1
    else
      let currentline -= 1
    endif
  endwhile
  return [-1, -1]
endfunction

function! SourcePart(line1, line2)
   let tmp = @z
   silent exec a:line1.",".a:line2."yank z"
   let @z = substitute(@z, '\n\s*\\', '', 'g')
   @z
   let @z = tmp
endfunction

function! SourceCurrentFunction()
  let [startfunline, endfunline] = DetectIfInVimFunction()
  if startfunline != -1
    call SourcePart(startfunline, endfunline)
    echo 'sourced ' . strpart(getline(startfunline), strlen('function! '))
  else
    echo 'cursor is not in a function'
  endif
endfunction

" if some argument is given, this command calls built-in command :source with
" given arguments; otherwise calls function SourcePart() which sources
" visually selected lines of the buffer.
command! -nargs=? -bar -range Source if empty("<args>") | call SourcePart(<line1>, <line2>) | else | exec "so <args>" | endif
" }}}
" Manipulate help window on open {{{
function! OpenHelp()
    if winwidth(0) >= 260
        setlocal textwidth=118
        wincmd L
        vertical resize 120
        normal ze
    else
        wincmd J
    endif
endfunction
augroup AutoSizeHelpWindow
  autocmd!
  autocmd BufWinEnter * if &ft == 'help' | call OpenHelp()
augroup END
" }}}
" ColumnFlash {{{
let g:colorList = ['#3E2D10', '#7D5A14', '#BC871E', '#FAB428', '#FDB927', '#FDB927', '#FDB927', '#FDB927']
let g:sleepCommand = 'sleep ' . string(400 / len(g:colorList)) . 'm'
function! ColumnFlash()
    let hadCursorline=&cursorline
    setlocal cursorline cursorcolumn
    for i in range (0, len(g:colorList) - 1)
        execute 'highlight CursorLine guibg=' . g:colorList[i]
        redraw
        if getchar(1) != 0
            break
        endif
        execute g:sleepCommand
    endfor
    execute 'highlight CursorLine guibg=#3C3836'
    if !hadCursorline | setlocal nocursorline | endif
    setlocal nocursorcolumn
endfunction
" }}}
" }}}
" Plugins {{{
" airline {{{
let g:airline_theme='tomorrow'
let g:airline_powerline_fonts          = 1
let g:airline_skip_empty_sections      = 1
let g:airline#extensions#hunks#enabled = 1
let g:airline#extensions#hunks#non_zero_only = 1
" }}}
" brightest {{{
let g:brightest_enable = 0
let g:brightest#highlight = { 'group': 'BrightestCustom' }
highlight BrightestCustom guifg=#000000 guibg=#00AA00
" }}}
" easy-align {{{
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
" }}}
" fzf {{{
" Files command with preview window
" Files command uses FZF_DEFAULT_COMMAND (which currently is rg -u for me)
" might want to make this just rg, no -u, or give various options for that with maps
" may want to use pathshorten() here around the fnamemodify call, we'll see
command! -bang -nargs=? -complete=dir FZFFiles call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--color', 'hl:196,hl+:46', '--prompt', fnamemodify(getcwd(), ':~:.') . '.FZF > ']}, 'right', 'ctrl-space'), <bang>0)
command! FZFColors call fzf#vim#colors({'left': '15%', 'options': '--reverse --margin 30%,0'})

" TODO: use rg for everything, it's better
" TODO override or add map to the FZFBuffers command to use :sbuffer, switch
" to buffer if it's already open in a window somewhere. then can get rid of gO map

"   :Ag  - Start fzf with hidden preview window that can be enabled with "ctrl-space" key
"   :Ag! - Start fzf in fullscreen and display the preview window above
command! -bang -nargs=* FZFAg
    \ call fzf#vim#ag(<q-args>,
    \                 <bang>0 ? fzf#vim#with_preview({'options': ['--color', 'hl:196,hl+:46']}, 'up:60%:hidden', 'ctrl-space')
    \                         : fzf#vim#with_preview({'options': ['--color', 'hl:196,hl+:46']}, 'right:50%:hidden', 'ctrl-space'),
    \                 <bang>0)

function! FZFRgWrapper(qargs, bang)
    let rgcommand = "command rg --colors 'path:fg:green' --colors 'path:style:bold' --colors 'line:fg:magenta' --column --line-number --no-heading --color=always "
    if empty(a:qargs) " if no search term provided, only match lines with 10 or more characters, and don't highlight the results
        let rgcommand .= " --colors 'match:none' " . '".{10,}"'
    else " if we provided a search term, use it, and highlight the matches
        let rgcommand .= " --colors 'match:bg:yellow' --colors 'match:fg:black' --colors 'match:style:nobold' " . shellescape(a:qargs)
    endif
    call fzf#vim#grep(rgcommand, 1,
    \   a:bang ? fzf#vim#with_preview({'options': ['--color', 'hl:196,hl+:46']}, 'up:60%:hidden', 'ctrl-space')
    \           : fzf#vim#with_preview({'options': ['--color', 'hl:196,hl+:46']}, 'right:50%:hidden', 'ctrl-space'),
    \   a:bang)
endfunction
command! -bang -nargs=* FZFRg call FZFRgWrapper(<q-args>, <bang>0)
" }}}
" gina {{{
" gina adds a lot to startup time, so I set it to lazy load in vim-plug
" that means these functions are undefined at startup, so they'll need to go
" in an autocmd or something
" call gina#custom#command#option(
"       \ 'commit', '-v|--verbose'
"       \)

" call gina#custom#command#option(
"       \ '/\%(diff\|log\)',
"       \ '--opener', 'tabedit'
"       \)
" }}}
" grepper {{{
let g:grepper = {}
let g:grepper.tools  = ['rg', 'ag', 'git', 'grep']
let g:grepper.open   = 1 " open quickfix window when done searching
let g:grepper.switch = 0 " don't switch to the quickfix window when it opens
let g:grepper.jump   = 0 " don't jump to the first match
let g:grepper.side   = 0 " side window that has context for matches
command! TodoBuffer    :Grepper -noprompt -buffer  -tool rg -grepprg rg -Hi --no-heading --vimgrep 'TODO|XXX|FIXME'
command! TodoBuffers   :Grepper -noprompt -buffers -tool rg -grepprg rg -Hi --no-heading --vimgrep 'TODO|XXX|FIXME'
" }}}
" is.vim + vim-asterisk {{{
map <silent> n <Plug>(is-nohl)<Plug>(anzu-n-with-echo):silent! foldopen<CR>
map <silent> N <Plug>(is-nohl)<Plug>(anzu-N-with-echo):silent! foldopen<CR>
map *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)
map g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)
map #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)
map g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)
let g:asterisk#keeppos = 1
" }}}
" listtoggle {{{
let g:lt_quickfix_list_toggle_map = '<leader>e'
let g:lt_location_list_toggle_map = '<leader>l'
" }}}
" match tag {{{
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
    \ 'php' : 1,
    \}
" }}}
" matchparen {{{
" let g:loaded_matchparen = 1 put this in neovim remote plugin!
let g:matchparen_timeout = 50
augroup MatchParenTimeout
    autocmd!
    autocmd BufEnter * call SetMatchParenTimeout()
augroup END
function! SetMatchParenTimeout()
    let bytes = line2byte(line('$') + 1)
    if bytes > 1000000
        let b:matchparen_timeout = 1
        let b:matchparen_insert_timeout = 1
        setlocal nocursorline nocursorcolumn " TODO conflicts with general cursorline autocmd used in all bufs
        " TODO also turn off anzu here
    endif
endfunction
" }}}
" nerdcommenter {{{
let NERDSpaceDelims     = 1
let NERDCompactSexyComs = 0
" }}}
" netrw {{{
let g:netrw_bufsettings = 'noma nomod nu nobl nowrap ro'
" }}}
" pandoc {{{
augroup PandocMaps
  autocmd!
  autocmd filetype pandoc nnoremap <buffer><silent><expr> gc ":set cole=" . (&cole != 0 ? "0" : "2") . "<CR>"
augroup END
" let g:pandoc#syntax#codeblocks#embeds#langs = ["ruby", "c"]  " achieve same affect as SyntaxRange
let g:pandoc#folding#level = 1
let g:pandoc#formatting#textwidth = 80
let g:pandoc#folding#fdc = 0 " foldcolumn width
let g:pandoc#modules#disabled = ["folding"]
let g:pandoc#after#modules#enabled = ["ultisnips", "unite"]
" }}}
" signify {{{
let g:signify_disable_by_default = 0            " disable run by default
let g:signify_vcs_list           = [ 'git' ]    " I only use git for now
let g:signify_sign_change        = '~'
let g:signify_sign_show_count = 1
nnoremap <leader>gh :SignifyToggleHighlight<CR>
nnoremap <leader>gt :SignifyToggle<CR>
nnoremap <leader>gf :SignifyFold<CR>
nmap ]c             <Plug>(signify-next-hunk)
nmap [c             <Plug>(signify-prev-hunk)
" }}}
" sneak  {{{
let g:sneak#label = 0
let g:sneak#target_labels = ";sftunq/SFGHLTUNRMQZ?0"
let g:sneak#use_ic_scs = 1
let g:sneak#absolute_dir = 1
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T
map <M-;> <Plug>Sneak_,
" }}}
" startify {{{
let g:startify_lists = [
      \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
      \ { 'type': 'files',     'header': ['   MRU Global']     },
      \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
      \ { 'type': 'sessions',  'header': ['   Sessions']       },
      \ ]
let g:startify_bookmarks          = [ '~/dotfiles/vim/vimrc', '~/Dropbox/todo/TODO.txt' ]
let g:startify_files_number       = 10
let g:startify_session_detection  = 1 " show session when Session.vim is found in current directory
let g:startify_session_autoload   = 0 " opening directories with a Session.vim will have it auto load
let g:startify_custom_indices     = ['a','f','h','j','k','l','w','r','u','o','p','z','x','n','m']
if has('nvim')
  let g:startify_custom_header     = [
    \ '    /\\\\\     /\\\  /\\\        /\\\  /\\\\\\\\\\\  /\\\\            /\\\\       ',
    \ '    \/\\\\\\   \/\\\ \/\\\       \/\\\ \/////\\\///  \/\\\\\\        /\\\\\\      ',
    \ '     \/\\\/\\\  \/\\\ \//\\\      /\\\      \/\\\     \/\\\//\\\    /\\\//\\\     ',
    \ '      \/\\\//\\\ \/\\\  \//\\\    /\\\       \/\\\     \/\\\\///\\\/\\\/ \/\\\    ',
    \ '       \/\\\\//\\\\/\\\   \//\\\  /\\\        \/\\\     \/\\\  \///\\\/   \/\\\   ',
    \ '        \/\\\ \//\\\/\\\    \//\\\/\\\         \/\\\     \/\\\    \///     \/\\\  ',
    \ '         \/\\\  \//\\\\\\     \//\\\\\          \/\\\     \/\\\             \/\\\ ',
    \ '          \/\\\   \//\\\\\      \//\\\        /\\\\\\\\\\\ \/\\\             \/\\\',
    \ '           \///     \/////        \///        \///////////  \///              \///',
    \ '',
    \ '',
    \ ]
else
  let g:startify_custom_header     = [
    \ '    /\\\        /\\\   /\\\\\\\\\\\   /\\\\            /\\\\  ',
    \ '    \/\\\       \/\\\  \/////\\\///   \/\\\\\\        /\\\\\\  ',
    \ '     \//\\\      /\\\       \/\\\      \/\\\//\\\    /\\\//\\\  ',
    \ '       \//\\\    /\\\        \/\\\      \/\\\\///\\\/\\\/ \/\\\  ',
    \ '         \//\\\  /\\\         \/\\\      \/\\\  \///\\\/   \/\\\  ',
    \ '           \//\\\/\\\          \/\\\      \/\\\    \///     \/\\\  ',
    \ '             \//\\\\\           \/\\\      \/\\\             \/\\\  ',
    \ '               \//\\\         /\\\\\\\\\\\  \/\\\             \/\\\  ',
    \ '                 \///         \///////////   \///              \///   ',
    \ '',
    \ '',
    \ ]
endif
" }}}
" tmuxify {{{
let g:tmuxify_custom_command = 'tmux split-window -dp 25'
let g:tmuxify_map_prefix = ''
let g:tmuxify_run = {
      \ 'sh':     'bash %',
      \ 'python': 'python %',
      \ 'ocaml':  'ocaml %',
      \ 'clisp':  'clisp %',
\}
" }}}
" treesitter {{{
" https://git.sr.ht/~seirdy/dotfiles/tree/master/.config/nvim/init.vim
if has('nvim')
lua << EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained", -- one of "all", "maintained" (parsers with maintainers), or a list of languages
  highlight = {
    enable = true,              -- false will disable the whole extension
    disable = { "c", "rust" },  -- list of language that will be disabled
  },
  indent = {
    enable = true
  },
}
EOF
endif
" }}}
" ultisnips {{{
let g:UltiSnipsExpandTrigger       = "<C-l>"
let g:UltiSnipsJumpForwardTrigger  = "<C-l>"
let g:UltiSnipsJumpBackwardTrigger = "<C-h>"
let g:UltiSnipsListSnippets        = "<C-f>"
let g:snips_author                 = 'James Baumgarten'
" }}}
" }}}
" General {{{
" Set options {{{
set number                     " show line numbers
set relativenumber             " use relative line numbers
set exrc                       " allow directory specific .vimrc files
set secure                     " prevent directory specific .vimrcs from doing malicious things
set nolazyredraw               " don't redraw the screen w ile executing macros
set clipboard+=unnamedplus     " by default, * system clipboard
set titlestring=%<%q%F%h%r%m   " file name
set title titlelen=150         " max length of title string
set backspace=indent,eol,start " allow backspace in insert mode
set autoread                   " reload files changed outside of vim
set splitbelow                 " splits open below
set splitright                 " vsplits open on right
set hidden                     " allows navigating away from buffers with unsaved changes
set fillchars=""               " no dashes in folds or vertical bars in vsplits
set noruler                    " don't show the ruler
set laststatus=2               " always display the statusline
set history=10000              " length of command history
set showmode                   " show what mode we're in on the bottom line
set showcmd                    " show current command or visual selection info in bottom line
set cmdwinheight=10            " height of command line window
set noshowmatch                " don't flash to matching paren when typing
set matchtime=3                " tenths of a second to flash to matching paren
set incsearch                  " find as you type
set hlsearch                   " hilight search terms
set magic                      " change how backslashes are handled in searches
set ignorecase                 " case insensitive search by default
set fileignorecase             " ignore case in commands like :buffer
set smartcase                  " case sensitive search if search contains uppercase letter
set nostartofline              " don't reset cursor to start of line when moving around
set nrformats=hex              " for C-a and C-x. recognize '0x' prefix as hex
set scrolljump=1               " lines to scroll when cursor leaves screen
set scrolloff=1                " start scrolling when 8 lines away from margins
set updatetime=400             " swap file writes and CursorHold autocmd. weird fold closing problem
set encoding=utf8              " new files use utf-8 encoding by default
set ffs=unix,dos,mac           " new files use unix line endings by default
set shortmess+=c               " don't give |ins-completion-menu| messages. helps with completion flicker
set timeout
set timeoutlen=3000
set ttimeoutlen=100
if !has('nvim')
  set restorescreen=on         " restore screen contents on exit
  set ttyfast                  " redraw screen faster
  set cryptmethod=blowfish     " more secure encryption for vim -x
  set esckeys                  " make numpad work
else
  set termguicolors            " this is available in recent builds of vim as well as nvim
  if exists('&inccommand')
    set inccommand=split
  endif
endif
set switchbuf=usetab           " look to see if buffer is already open in another window or tab
set formatoptions-=r           " don't continue comment when hitting enter in insert mode
set formatoptions-=o           " don't automatically continue comment when hitting o in normal mode
set guioptions-=m              " hide gui menu bar
set guioptions-=T              " hide gui toolbar
set guioptions-=r              " hide gui righthand scrollbar
set guioptions-=e              " use regular tabline
set guioptions-=L              " no left scrollbar
set virtualedit=block          " allow visual block mode to move to where there aren't actually characters
set noswapfile                 " seriously who needs them
set tags=./.tags;              " search for .tags file upward (:h file-searching)
set previewheight=20
set viewoptions=cursor,folds,slash,unix " vim-stay configuration
set cursorline
set mouse=                     " disable mouse
set listchars=tab:▶-,trail:•,extends:>,eol:¬
set dictionary=/usr/share/dict/words  " dictionary completion with <C-X><C-K>
set suffixesadd+=.py,.rb       " suffixes to attempt to use for gf command
set path+=./**
set shell=zsh
set modeline                   " debian.vim defaults in ubuntu 12.04 unset this
if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j  " delete comment character when joining commented lines
endif
set nojoinspaces        " use only one space after a period when joining lines
syntax sync minlines=2         " speed up syntax hilighting
syntax sync maxlines=5         " speed up syntax hilighting
set synmaxcol=200
set regexpengine=1 " XXX testing to see if this feels faster, some github issues/stackoverflow comments indicated so
let g:no_ocaml_maps = 1
if executable('rg')
    set grepprg=rg\ --vimgrep
    set grepformat=%f:%l:%c:%m
elseif executable('ag')
  set grepprg=ag\ --vimgrep
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif
filetype plugin indent on
set guicursor=n-v:block,i-c-ci:ver30 " change ver30 to 'block' to get block cursor back during insert mode
" }}}
" Completion options {{{
set completeopt=noinsert,menuone,noselect
" hitting enter when completion menu is visible selects item
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" }}}
" Fold {{{
" zf#j manually folds # lines, or zf in visual mode selection.
set foldnestmax=1   " folds only one level deep
set foldmethod =manual
set foldlevel  =1
augroup SyntaxFold
  autocmd!
  autocmd BufWinEnter    *.java           set foldnestmax=2 foldlevel=1
  autocmd BufWinEnter    *.c,*.cpp,*.java set foldmethod=syntax " define syntax folds when file loads
  autocmd InsertEnter    *.c,*.cpp,*.java set foldmethod=manual " once we start typing, using manual folds
augroup END
" }}}
" Tab/Indent {{{
" https://gist.github.com/LunarLambda/4c444238fb364509b72cfb891979f1dd
set expandtab
set tabstop=4       " Optional, if you want files with tabs to look the same too.
set shiftwidth=4
set softtabstop=-1  " Use value of shiftwidth
set smarttab        " Always use shiftwidth
set autoindent      " auto indent line to match above line when hitting enter
set linebreak       " wrap lines at nice points
set textwidth=0     " disables textwidth

" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab(...)
  if a:0 == 1
    let l:tabstop = 1 * a:1
  else
    let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  endif
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  echomsg
  call SummarizeTabs()
endfunction
" cnoreabbrev stab Stab

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction
" }}}
" Wildmenu {{{
if has("wildmenu")
  set wildmenu                    " turn on wildmenu
  set wildignorecase              " wildmenu doesn't care about case
  set wildmode=longest:full,full
  set wildignore=*.o,*.a,*~,*.pyc " ignore compiled files
  set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.mp4,*.mkv,*.avi,*.pdf,*.png,*.mp3
  set wildignore+=*.m4v,*.flv,*.flac,*.wma,*.doc,*.docx,*.ppt,*.pptx,*.m4a,*.m2ts,*.m3u
  set wildignore+=*:2\\,S,*:2\\,RS,*:2\\,FS,*:2\\,,*:2\\,FRS " for mutt
  set wildignore+=.DS_Store,.git,.hg,.svn
  set wildignore+=*~,*.swp,*.tmp
endif
" }}}
" }}}
" Keymaps {{{
" Misc {{{
" misc g maps
nnoremap          gp    gw{gw}
nnoremap          gs    gnv
nnoremap          g;    g;zz
nnoremap          g,    g,zz

" make K do the opposite of J: split lines under the cursor
nnoremap K i<CR><Esc>k$

" line yanks Y yl yaa
nnoremap Y y$
nnoremap yl :let c=col(".")<CR>$v^y:call cursor(line("."),c)<CR>
nnoremap yaa :let c=col(".") <BAR> let l = line(".")<CR>ggyG:call cursor(l,c)<CR>:echo 'yanked whole file'<CR>

vnoremap <C-a> :call Increment()<CR>
nnoremap <BS> :%s/\V\<lt><c-r><c-w>\>//g<left><left>
" }}}
" fix the esc/alt mapping problem in terminal vim {{{
if !has('gui_running')
  set ttimeoutlen=10
  augroup FastEscape
    autocmd!
    autocmd InsertEnter * set timeoutlen=0
    autocmd InsertLeave * set timeoutlen=2000
  augroup END
endif
" }}}
" easily toggle command line window with Q {{{
nnoremap Q q:
augroup CmdWindow
  autocmd!
  autocmd CmdwinEnter * nnoremap <buffer><silent> Q :q<CR>
  autocmd CmdwinEnter * nnoremap <buffer><silent> <C-c> <Esc>
augroup END
" }}}
" c/C/x/X operators go to own registers instead of unnamed[plus] register specified by 'clipboard' {{{
nnoremap <expr> c (v:register == '+' \|\| v:register == '*') ? '"cc' : 'c'
nnoremap "+c "+c
nnoremap "*c "*c
nnoremap <expr> C (v:register == '+' \|\| v:register == '*') ? '"cC' : 'C'
nnoremap "+C "+C
nnoremap "*C "*C
nnoremap <expr> x (v:register == '+' \|\| v:register == '*') ? '"xx' : 'x'
nnoremap "+x "+x
nnoremap "*x "*x
nnoremap <expr> X (v:register == '+' \|\| v:register == '*') ? '"xX' : 'X'
nnoremap "+X "+X
nnoremap "*X "*X
" }}}
" quickfix maps {{{
augroup QuickFix
  autocmd!
  autocmd FileType qf setlocal nosplitbelow nosplitright norelativenumber
  autocmd FileType qf setlocal switchbuf=""
  autocmd FileType qf nnoremap <buffer><silent> <CR> <CR>zvzz
  autocmd FileType qf nnoremap <buffer><silent> t  <C-w><CR><C-w>Tzvzz
  autocmd FileType qf nnoremap <buffer><silent> T  <C-w><CR><C-w>TzvzzgT<C-w>j
  autocmd FileType qf nnoremap <buffer><silent> o  <CR>zvzz
  autocmd FileType qf nnoremap <buffer><silent> O  <CR>zvzz<C-w>j
  autocmd FileType qf nnoremap <buffer><silent> go <CR>:cclose <Bar> lclose<CR>zvzz
  autocmd FileType qf nnoremap <buffer><silent> s  <C-w><CR>zvzz
  autocmd FileType qf nnoremap <buffer><silent> S  <C-w><CR>zvzz<C-w>p
  autocmd FileType qf nnoremap <buffer><silent> v  :let g:qf_height = winheight('.')<CR><C-w><CR><C-w>L<C-w>p<C-w>J:resize <C-r>=g:qf_height<CR><CR><C-w>pzvzz
  autocmd FileType qf nnoremap <buffer><silent> V  :let g:qf_height = winheight('.')<CR><C-w><CR><C-w>L<C-w>p<C-w>J:resize <C-r>=g:qf_height<CR><CR><C-w>pzvzz<C-w>p
  autocmd FileType qf nnoremap <buffer><silent> q  :cclose <Bar> lclose<CR>zz
  autocmd FileType qf nnoremap <buffer><silent> <leader>q  :cclose <Bar> lclose<CR>zz
augroup END
" }}}
" Text Object / targets.vim maps {{{
let g:targets_pairs       = '()b {}c []r <>g'
let g:targets_quotes      = "\"d 's `t"
" }}}
" k and j add to jumplist {{{
nnoremap <expr> k (v:count > 4 ? "m'" . v:count . 'k' : (v:count == 0 ? 'gk' : 'k'))
nnoremap <expr> j (v:count > 4 ? "m'" . v:count . 'j' : (v:count == 0 ? 'gj' : 'j'))
" }}}
" defualt comma leader maps {{{
nnoremap <silent> <leader>A    :AnzuUpdateSearchStatusOutput<CR>
nnoremap <silent> <leader>b    :BrightestToggle<CR>
"                         c    nerdcommenter maps
nnoremap <silent> <leader>f    :call ColumnFlash()<CR>
nnoremap <silent> <leader>F    :set foldmethod=syntax<CR>:set foldmethod=manual<CR>
"                      [gG]    gina, signify and grepper maps below
"                 <leader>l    ListToggle
nnoremap <silent> <leader>m    :Magit<CR><C-w>T
nnoremap <silent> <leader>p    "0p
nnoremap <silent> <leader>P    "0P
"                        rt    " term/tmux/repl maps
nnoremap <silent> <leader>q    :q <Bar> redraw!<CR>
nnoremap          <leader>sf   :call SourceCurrentFunction()<CR>
nnoremap <silent> <leader>sh   :echo map(synstack(line('.'),col('.')),'synIDattr(v:val,"name")')<CR>
nnoremap          <leader>sv   :source %<CR>
nnoremap          <leader>sV   :source $MYVIMRC<CR>
vnoremap          <leader>sv   :Source %<CR>
nnoremap <silent> <leader>S    :let c=col(".")<CR>V:Source<CR>:call cursor(line("."),c)<CR>
vnoremap <silent> <leader>S    <Esc>:let g:c=col(".")<CR>gv:Source<CR>:call cursor(line("."),g:c)<CR>
nnoremap <silent> <leader>u    yyp^v$r=
nnoremap <silent> <leader>w    :w!<CR>
nnoremap <silent> <leader>x    :x!<CR>
nnoremap <silent> <leader>zs   :syntax sync fromstart<CR>
nnoremap <silent> <leader>zt   :write \| edit \| TSBufEnable highlight<CR>

" <leader>g[jkht] taken by signify
nnoremap <silent> <leader>ga  :Gina add %:p<CR>
nnoremap          <leader>gb  :Gina branch -v<CR>
nnoremap <silent> <leader>gB  :Gina blame :<CR>
nnoremap <silent> <leader>gc  :Gina commit --verbose<CR>
nnoremap <silent> <leader>gd  :Gina diff<CR>
nnoremap <silent> <leader>glf :Gina log -- --follow %:p<CR>
nnoremap <silent> <leader>gll :Gina log<CR>
nnoremap          <leader>gm  :Gmove<Space>
nnoremap <silent> <leader>gs  :Gina status<CR>

nnoremap          <leader>#   :Grepper -cword -noprompt<cr>
nnoremap          <leader>G   :Grepper<CR>
nnoremap          <leader>gu  :Grepper -tool rg -grepprg rg -Hu  --no-heading --vimgrep<CR>
nnoremap          <leader>gU  :Grepper -tool rg -grepprg rg -Huu --no-heading --vimgrep<CR>
nmap              <leader>gg  <Plug>(GrepperOperator)
xmap              <leader>gg  <Plug>(GrepperOperator)

augroup RunningAndTesting
  " https://vi.stackexchange.com/questions/15431/how-can-i-make-the-neovim-terminal-run-the-current-file-in-python
  " could probably be more sophisticated using neoterm or iron.nvim, but not needed for now
  " https://austeretechnology.wordpress.com/2017/07/18/a-ruby-repl-workflow-with-neovim-and-neoterm/
  autocmd!
  " TODO based on OpenHelp, do sp or vsp and set size based on current buffer size
  autocmd FileType python  nnoremap <buffer><leader>r :call RunAndReturn('terminal python %')<CR>
  autocmd FileType python  nnoremap <buffer><leader>t :call RunAndReturn('terminal pytest %')<CR>
  autocmd FileType python  nnoremap <buffer><leader>a :call DeleteTerminalBuffers()<CR>
augroup END

function! RunAndReturn(cmd)
  call DeleteTerminalBuffers()
  if winwidth(0) >= 235
    let termwidth = winwidth(0) - 145
    execute termwidth.'vsplit'
  else
    split
  endif
  execute a:cmd
  wincmd p
endfunction

function! DeleteTerminalBuffers()
  let buffers = filter(range(1, bufnr('$')), 'buflisted(v:val) && bufname(v:val) =~ "term://"')
  if !empty(buffers)
    execute 'bdelete! '.join(buffers, ' ')
  endif
endfunction
" }}}
" space leader maps. fzf + vim-plug {{{
let g:fzf_command_prefix = 'FZF' " easy autocompletion
nnoremap <silent> <Space>b   :FZFBuffers<CR>
nnoremap          <Space>c   :FZFCommands<CR>
nnoremap <silent> <Space>f   :FZFFiles<CR>
nnoremap <silent> <Space>F   :FZFFiles!<CR>
nnoremap <silent> <Space>g   :FZFLines<CR>
nnoremap <silent> <Space>G   :FZFBLines<CR>
nnoremap          <Space>h   :FZFHelptags<CR>
nnoremap <silent> <Space>H   :FZFHistory<CR>
" TODO see if I can make a command like the below that uses my findcache
nnoremap          <Space>l   :FZFLocate<Space>
nnoremap <silent> <Space>m   :FZFMarks<CR>
nnoremap <silent> <Space>M   :FZFMaps<CR>
nnoremap          <Space>s   :FZFSnippets<CR>
nnoremap <silent> <Space>t   :FZFTags<CR>
nnoremap <silent> <Space>T   :FZFBTags<CR>
nnoremap <silent> <Space>v   :FZFCommits<CR>
nnoremap <silent> <Space>V   :FZFBCommits<CR>
nnoremap <silent> <Space>w   :FZFWindows<CR>
nnoremap <silent> <Space>x   :FZFRg<CR>
nnoremap          <Space>X   :FZFRg<Space>
nnoremap <silent> <Space>:   :FZFHistory:<CR>
nnoremap <silent> <Space>/   :FZFHistory/<CR>

nnoremap <Space>pi       :PlugInstall<CR>
nnoremap <Space>pu       :PlugUpdate<CR>
nnoremap <Space>pU       :PlugUpgrade<CR>
" }}}
" ctrl normal mode {{{
nnoremap <C-n>              gt
nnoremap <C-p>              gT
nnoremap <C-w>o             <C-w>o:redraw!<CR>
nnoremap <C-w>s             <C-w>s:redraw!<CR>
nnoremap <C-w>v             <C-w>v:redraw!<CR>
" }}}
" ctrl insert mode {{{
inoremap <C-a>   <Home>
inoremap <C-c>   <Esc>`^
inoremap <C-e>   <End>
inoremap <Esc>   <Esc>`^
" }}}
" alt normal mode {{{
" move windows
exec 'nnoremap <silent> ' . AltShiftmap('H') . ' :execute "ObviousResizeLeft " . (winwidth(0) * 1/6)<CR>'
exec 'nnoremap <silent> ' . AltShiftmap('J') . ' :execute "ObviousResizeDown " . (winheight(0) * 1/6)<CR>'
exec 'nnoremap <silent> ' . AltShiftmap('K') . ' :execute "ObviousResizeUp " . (winheight(0) * 1/6)<CR>'
exec 'nnoremap <silent> ' . AltShiftmap('L') . ' :execute "ObviousResizeRight " . (winwidth(0) * 1/6)<CR>'
exec 'nnoremap <silent> ' . Altmap('h') . ' :execute "ObviousResizeLeft 1"<CR>'
exec 'nnoremap <silent> ' . Altmap('j') . ' :execute "ObviousResizeDown 1"<CR>'
exec 'nnoremap <silent> ' . Altmap('k') . ' :execute "ObviousResizeUp 1"<CR>'
exec 'nnoremap <silent> ' . Altmap('l') . ' :execute "ObviousResizeRight 1"<CR>'
exec 'nnoremap <silent> ' . Altmap('m') . ' :match none<CR>'
exec 'nnoremap <silent> ' . Altmap('n') . ' :tabmove +1<CR>'
exec 'nnoremap <silent> ' . Altmap('p') . ' :tabmove -1<CR>'
exec 'nnoremap <silent> ' . Altmap('q') . ' :quitall<CR>'
exec 'nnoremap <silent> ' . Altmap('1') . ' 1gt'
exec 'nnoremap <silent> ' . Altmap('2') . ' 2gt'
exec 'nnoremap <silent> ' . Altmap('3') . ' 3gt'
exec 'nnoremap <silent> ' . Altmap('4') . ' 4gt'
exec 'nnoremap <silent> ' . Altmap('5') . ' 5gt'
exec 'nnoremap <silent> ' . Altmap('6') . ' 6gt'
exec 'nnoremap <silent> ' . Altmap('7') . ' 7gt'
exec 'nnoremap <silent> ' . Altmap('8') . ' 8gt'
exec 'nnoremap <silent> ' . Altmap('9') . ' 9gt'
exec 'nnoremap <silent> ' . Altmap('0') . ' :tablast<CR>'
" }}}
" slash leader maps. tmuxify {{{
function! TmuxifySendLines(count, direction)
  let l = line(".")
  let c = col(".")

  if a:count == 0
    execute 'normal! "vyy'
  else
    execute 'normal! "vy' . a:count . a:direction
  endif

  TxSend!(@v)
  call cursor(l, c)
endfunction

function! AutoAssociate()
  if !exists('$TMUX')
    let descriptor=systemlist('tmux list-panes -aF "#S:#I.#P"')[0]
    if descriptor == 'failed to connect to server: Connection refused'
      echo "there's no tmux running!"
      return -1
    endif
  else
    let vimdescriptor=systemlist('tmux display-message -p "#S:#I.#P"')[0]
    let descriptorlist=systemlist('tmux list-panes -sF "#S:#I.#P"')
    if len(descriptorlist) == 1
      echo "vim is the only pane!"
      return -1
    else
      for entry in descriptorlist
          if entry == vimdescriptor | continue | endif
          let descriptor=entry
          break
      endfor
    endif
  endif

  let [session, window, pane] = split(descriptor, '\W')
  call tmuxify#pane_set('!', session, window, pane)
  echo "associated with pane " . session . ":" . window . "." . pane
endfunction

function! TxCreateWrapper()
  if tmuxify#get_associated_pane('!') != -1
    echo 'TxCreateWrapper: already associated with a pane'
    return -1
  endif
  if !exists('$TMUX')
    call system('urxvt -e zsh -c "tmux" &')
    let counter = 0
    while counter < 100
      if empty(systemlist('pgrep tmux'))
        let counter += 1
        sleep 20m
      else
        break
      endif
    endwhile
    call AutoAssociate()
  else
    TxCreate!
  endif
endfunction

nnoremap <silent> \a  :call tmuxify#pane_command('!', 'copy-mode')<CR>
nnoremap <silent> \c  :TxSigInt!<CR>
nnoremap <silent> \d  :call tmuxify#pane_send_raw('C-d', '!')<CR>
nnoremap <silent> \j  :<C-u>call TmuxifySendLines(v:count, "j")<CR>
nnoremap <silent> \k  :<C-u>call TmuxifySendLines(v:count, "k")<CR>
nnoremap <silent> \l  :TxClear!<CR>
nnoremap          \o  :call TxCreateWrapper()<CR>
nnoremap <silent> \s  "vyy:TxSend!(@v)<CR>
vnoremap <silent> \s  "vy:TxSend!(@v)<CR>
" TODO - if somebody C-c's or puts invalid input in the prompt, errors aren't handled
nnoremap <silent> \t  :TxSetPane<CR>
nnoremap <silent> \T  :TxSetPane!<CR>
nnoremap <silent> \w  :call tmuxify#pane_send_raw('C-u', '!')<CR>:TxClear!<CR>
nnoremap <silent> \x  :TxKill!<CR>
nnoremap <silent> \|  :TxSend!<CR>
nnoremap <silent> \<CR>  :call tmuxify#pane_send_raw('C-j', '!')<CR>
nnoremap          \\  :call AutoAssociate()<CR>

nnoremap <silent> <up>    :call tmuxify#pane_send_raw('C-u', '!')<CR>
nnoremap <silent> <down>  :call tmuxify#pane_send_raw('C-d', '!')<CR>
nnoremap <silent> <left>  :call tmuxify#pane_send_raw('C-b', '!')<CR>
nnoremap <silent> <right> :call tmuxify#pane_send_raw('C-f', '!')<CR>
" }}}
" neovim terminal maps {{{
let g:terminal_scrollback_buffer_size = 100000
if has('nvim')
  augroup fzf_setup
    autocmd!
    autocmd TermOpen term://*FZF tnoremap <silent> <buffer><nowait> <esc> <c-c>
  augroup END
end
" }}}
" }}}
" vim: foldmethod=marker foldlevel=1 foldmarker={{{,}}}
