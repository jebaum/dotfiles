set nocompatible " use vim settings not vi
colorscheme wombat256mod
"colorscheme ir_black
"colorscheme distinguished
"colorscheme jellybeans
execute pathogen#infect()
"=============================================================================
"                  FUNCTION TO REMOVE TRAILING WHITESPACES
"=============================================================================
fun! StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
" call function on write for these file types
autocmd FileType c,cpp,java,php,ruby,python autocmd BufWritePre <buffer> :call StripTrailingWhitespaces()
" autocmd BufWrite *.txt :call StripTrailingWhitespaces() " this line can be copied for any extension
"=============================================================================
"                                 MISC
"=============================================================================
augroup MUTT " spell check, textwidth, F1-3 for wrapping paragraphs in useful ways
  au BufRead /tmp/mutt-* set tw=72  " for email with mutt
  au BufRead /tmp/mutt-* set spell " <-- vim 7 required
  au BufRead /tmp/mutt-* nmap  <F1>  gqap
  au BufRead /tmp/mutt-* nmap  <F2>  gqqj
  au BufRead /tmp/mutt-* nmap  <F3>  kgqj
  au BufRead /tmp/mutt-* map!  <F1>  <ESC>gqapi
  au BufRead /tmp/mutt-* map!  <F2>  <ESC>gqqji
  au BufRead /tmp/mutt-* map!  <F3>  <ESC>kgqji
augroup END

set shell=zsh\ --login
" last parameter is optional and can be any highlight group.
call SyntaxRange#Include('@begin=c@', '@end=c@', 'c', 'NonText')
call SyntaxRange#Include('@begin=cpp@', '@end=cpp@', 'cpp', 'Comment')

autocmd BufEnter * lcd %:p:h  " change working directory to that of current file

command W :execute ':silent w !sudo tee % > /dev/null' | :edit! " :W when forgetting to sudo
cnoreabbrev te tabedit
cnoreabbrev tn tabnew

" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

autocmd vimenter * if !argc() | NERDTree | endif " open nerdtree if no files were specified

set completeopt=longest,menuone
" hitting enter when completion menu is visible selects item
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"=============================================================================
"                             PLUGIN SETTINGS
"=============================================================================
" gitgutter settings
let g:gitgutter_escape_grep = 1  " use raw, non aliased grep for gutter
let g:gitgutter_enabled = 0      " don't show gutter by default

" gundo settings
let g:gundo_width=40
let g:gundo_preview_height=40

" latex settings
set grepprg=grep\ -nH\ $*
let g:tex_flavor = "latex"
let g:Tex_ViewRule_pdf = '/usr/bin/evince' " set pdf viewer for <leader>lv
let g:Tex_ViewRule_dvi = '/usr/bin/evince' " set dvi viewer for <leader>lv

" match tag filetypes
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
    \ 'php' : 1,
    \}

" nerdtree settings
let NERDTreeWinSize=40
let NERDTreeMapOpenSplit="s"
let NERDTreeMapOpenVSplit="v"
let NERDTreeShowLineNumbers=1

" rainbow parentheses settings. increasing nest levels iterate back from end of list
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 15
let g:rbpt_bold = 1
"au VimEnter * RainbowParenthesesToggleAll

" showmarks settings
let g:showmarks_enable = 0 " hide marks by default
let g:showmarks_marks = "abcdefghijklmnopqrstuvwxyz" " only show local, user created marks

" taboo.vim tab name format string
let g:taboo_tab_format = "%N %0a/%f%m "

" tagbar settings
let g:tagbar_left  = 1      "default is to open on right
let g:tagbar_width = 50     "default is 40
let g:tagbar_indent= 1      "default is 2
let g_tagbar_autoshowtag=1  "auto unfold any parents so highlighted tag is shown
let g:tagbar_sort  = 0      "sort tags by position in source file, not alphabetically
"=============================================================================
"                             GERNERAL STUFF
"=============================================================================
syntax on
set ttyfast "we have a fast terminal (?)
set restorescreen=on " restore screen contents on exit
set title titlelen=150
set titlestring=
set titlestring+=%t\  " file name
" set titlestring+=(%F) " full file path + name
set relativenumber
set nu
set backspace=indent,eol,start " allow backspace in insert mode
set esckeys  " make numpad work
set autoread " reload files changed outside of vim
set noruler
set laststatus=2
set history=1000
set showmode
set showcmd
set showmatch
set cursorline
set incsearch "find as you type
set hlsearch  "hilight search terms
set magic     "change how backslashes are handled in searches
set ignorecase
set smartcase  " case sensitive search if search contains uppercase letter
"set spell spelllang=en_us
set scrolljump=5 "lines to scroll when cursor leaves screen
set scrolloff=8 "start scrolling when 8 lines away from margins
set updatetime=50
set encoding=utf8
set ffs=unix,dos,mac
set timeoutlen=2000  " wait for 2 seconds to time out leader
set cryptmethod=blowfish " more secure encryption for vim -x
set guioptions-=m
set guioptions-=T
set guioptions-=r
syntax sync minlines=256
"=============================================================================
"                             AIRLINE SETTINGS
"=============================================================================
let g:airline_theme="simple"
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_branch_prefix = ' '
let g:airline_readonly_symbol = ''
let g:airline_linecolumn_prefix = ''
let g:airline_section_z="%l/%L:C%c %b/0x%B"
let g:airline_detect_whitespace=2 " don't display long message for trailing whitespace
"=============================================================================
"                                  FOLDING
"=============================================================================
" folding: zf#j manually folds # lines, or zf in visual mode selection.
" zo=open, zO=open all levels, zc=close, za=toggle.  zr=open all first level, zR = open all, mM for close all
" zj and zk to move between folds
" ':#,# fo' folds # through #
" zfa}, zfa], zfa) for matching closer, works same from closers (zfa{)

set foldmethod=syntax " define syntax folds when file loads
set foldnestmax=1
au InsertEnter * set foldmethod=manual " once we start typing, using manual folds
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <space> zf

" prevent folds from slowing down vim on big files
"autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
"autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif

"au BufWinLeave * mkview
"au BufWinEnter * silent loadview

" below autocommands create folds from indent levels on file load, then switch method to manual
 "augroup vimrc
   "au BufReadPre * set foldmethod=syntax
   "au TermResponse * if &fdm == 'syntax' | set foldmethod=manual | endif
   "au InsertEnter * set foldmethod=manual
 "augroup END
"=============================================================================
"                             TAB / INDENT STUFF
"=============================================================================
set autoindent
"set cindent "alternative to vi 'autoindent' that uses c indentation standard
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab
filetype plugin on " either this or the below one causes comment token to be auto added when hitting enter from comment
filetype indent on " manually overrode this for c/cpp files in .vim/after/ftplugin/c.vim
set linebreak " wrap lines at nice points
set textwidth=0
"set nowrap " don't wrap lines
"=============================================================================
"                                 WILDMENU
"=============================================================================
if has("wildmenu")
  set wildmenu " turn on wildmenu
  set wildmode=longest:full,full
  set wildignore=*.o,*.a,*~,*.pyc " ignore compiled files
  set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
  set wildignore+=.DS_Store,.git,.hg,.svn
  set wildignore+=*~,*.swp,*.tmp
endif
"=============================================================================
"                                 KEYBINDS
"=============================================================================
let mapleader = ','  " use comma instead of \ as leader
set pastetoggle=<INS>
"nmap f :TagbarCurrentTag p<CR>

nnoremap <C-L> :set relativenumber!<CR>
nnoremap <C-T> :TagbarOpen fjc<CR>
nnoremap <C-h> :NERDTreeToggle<CR>

" use semicolon as well as colon to enter command mode
nmap ; :
vmap ; :

" move motion keys to be ijkl instead of hjkl. must be non recursive mappings
nnoremap j h
vnoremap j h
nnoremap i k
vnoremap i k
nnoremap k j
vnoremap k j
map <C-w>j <C-w><Left>
map <C-w>i <C-w><Up>
map <C-w>k <C-w><Down>

" since 'i' is now used for motion, make 'h' do what 'i' used to
nnoremap h i
nnoremap H I
vnoremap h i
vnoremap H I
nnoremap I H

" function keys
nmap <F1>   :let @+=@"<CR>
nmap <F5>   :GundoToggle<CR>
nmap <F6>   :set spell!<CR>
nmap <F7>   :RainbowParenthesesToggleAll<CR>
nmap <F11>   zR
nmap <F12>   zM

" leader shortcuts to frequent commands
nmap <leader>a :AirlineToggle<CR>
nmap <leader>c :WatchForChanges!<CR>
nmap <leader>d :delmarks a-z<CR>
nmap <leader>f :set foldmethod=syntax<CR>:set foldmethod=manual<CR>
nmap <leader>g :GitGutterToggle<CR>
nmap <leader>h :noh<return><esc>
nmap <leader>l :ls<CR>:b<space>
nmap <leader>m :DoShowMarks<CR>
nmap <leader>n :NoShowMarks<CR>
nmap <leader>p :set list!<CR>
nmap <leader>q :q<CR>
nmap <leader>r :W<CR>
nmap <leader>s :call StripTrailingWhitespaces()<CR>
nmap <leader>w :w!<CR>
nmap <leader>x :wq<CR>

" alt/esc normal mode shortcuts to frequent commands
map <Esc>q     :quitall<CR>
map <C-f>      /

" alt/esc insert mode shortcuts for movement
imap <Esc>i     <C-o>gk
imap <Esc>j     <C-o>j
imap <Esc>k     <C-o>gj
imap <Esc>l     <C-o>l
imap <Esc>b     <C-o>b
imap <Esc>B     <C-o>B
imap <Esc>e     <C-o>e
imap <Esc>E     <C-o>E
imap <Esc>w     <C-o>w
imap <Esc>W     <C-o>W
imap <Esc>0     <C-o>0
imap <Esc>6     <C-o>^
imap <Esc>4     <C-o>$

" shortcuts for managing tabs
map <C-n> gt
map <C-p> gT
map <Esc>n :tabmove +1<CR>
map <Esc>p :tabmove -1<CR>
map <Esc>1 1gt
map <Esc>2 2gt
map <Esc>3 3gt
map <Esc>4 4gt
map <Esc>5 5gt
map <Esc>6 6gt
map <Esc>7 7gt
map <Esc>8 8gt
map <Esc>9 9gt
nmap <Esc>0 :tablast<CR>

" make Y yank from cursor to end of line, consistent with C and D
nmap Y y$

" Alt-k/i inserts blank line above/below
nnoremap <silent><Esc>i :set paste<CR>m`O<Esc>``:set nopaste<CR>
nnoremap <silent><Esc>k :set paste<CR>m`o<Esc>``:set nopaste<CR>

" shifting doesn't exit visual mode
vmap < <gv
vmap > >gv

" cursor keys go up and down by visual lines
imap <up> <C-O>gk
imap <down> <C-O>gj
nmap <up> gk
nmap <down> gj
vmap <up> gk
vmap <down> gj
" left and right arrow keys shift text
nmap <Left> <<
nmap <Right> >>
"=============================================================================
