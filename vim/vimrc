" vim: foldmethod=marker foldlevel=1 textwidth=0
" Colorscheme and Pathogen {{{
set nocompatible " use vim settings not vi
colorscheme guimiromod
execute pathogen#infect()
set guifont=DejaVuSansMonoforPowerline\ 11
" }}}
" Misc {{{
" Mail / Mutt {{{
augroup MUTT " spell check, textwidth, F1-3 for wrapping paragraphs in useful ways
  autocmd BufRead /tmp/mutt-* set tw=72  " for email with mutt
  autocmd BufRead /tmp/mutt-* set spell  " <-- vim 7 required
  autocmd BufRead /tmp/mutt-* nmap  <F1>  gqap
  autocmd BufRead /tmp/mutt-* nmap  <F2>  gqqj
  autocmd BufRead /tmp/mutt-* nmap  <F3>  kgqj
  autocmd BufRead /tmp/mutt-* map!  <F1>  <ESC>gqapi
  autocmd BufRead /tmp/mutt-* map!  <F2>  <ESC>gqqji
  autocmd BufRead /tmp/mutt-* map!  <F3>  <ESC>kgqji
augroup END
" }}}
" Fix borders of fullscreen GUI {{{
if has('gui_gtk') && has('gui_running')
    let s:border = synIDattr(synIDtrans(hlID('Normal')), 'bg', 'gui')
    exe 'silent !echo ''style "vimfix" { bg[NORMAL] = "' . escape(s:border, '#') . '" }'''.
                \' > ~/.gtkrc-2.0.mine'
    exe 'silent !echo ''widget "vim-main-window.*GtkForm" style "vimfix"'''.
                \' >> ~/.gtkrc-2.0.mine'
endif
" }}}
" CustomMatch function {{{
function! CustomMatch(pattern)
  let search_string = "/" . a:pattern . "/"
  execute 'match MatchTarget ' . search_string
endfunction
command! -nargs=1 MatchText call CustomMatch(<f-args>)
cnoreabbrev mt MatchText
" }}}
" Copy function {{{
" complement to unimpaired Move, ]e
function! Copy(cmd, count, map) abort
  normal! m`
  exe 'copy'.a:cmd.a:count
  norm! ``
  if a:map == 'MoveDown' || a:map == 'MoveUp'
    norm! dd
  endif
  silent! call repeat#set("\<Plug>my".a:map, a:count)
endfunction

nnoremap <silent> <Plug>myCopyUp   :<C-U>call Copy('--',v:count1,'CopyUp')<CR>
nnoremap <silent> <Plug>myCopyDown :<C-U>call Copy('+',v:count1,'CopyDown')<CR>
xnoremap <silent> <Plug>myCopyUp   :<C-U>exe 'exe "normal! m`"<Bar>''<,''>copy--'.v:count1<CR>``
xnoremap <silent> <Plug>myCopyDown :<C-U>exe 'exe "normal! m`"<Bar>''<,''>copy''>+'.v:count1<CR>``

nnoremap <silent> <Plug>myMoveUp   :<C-U>call Copy('--',v:count1,'MoveUp')<CR>
nnoremap <silent> <Plug>myMoveDown :<C-U>call Copy('+',v:count1,'MoveDown')<CR>
xnoremap <silent> <Plug>myMoveUp   :<C-U>exe 'exe "normal! m`"<Bar>''<,''>copy--'.v:count1<CR>``gvd
xnoremap <silent> <Plug>myMoveDown :<C-U>exe 'exe "normal! m`"<Bar>''<,''>copy''>+'.v:count1<CR>``gvd

nmap [z <Plug>myCopyUp
nmap ]z <Plug>myCopyDown
xmap [z <Plug>myCopyUp
xmap ]z <Plug>myCopyDown

nmap [m <Plug>myMoveUp
nmap ]m <Plug>myMoveDown
xmap [m <Plug>myMoveUp
xmap ]m <Plug>myMoveDown
" }}}
" VimGrep wrapper function + todo searches {{{
function! VimGrep(pattern, target, cw)
  echom 'silent! vim /' . a:pattern . '/gj ' . a:target . a:cw
  execute 'silent! vim /' . a:pattern . '/gj ' . a:target . a:cw
endfunction
command! -nargs=1 -bar Bufsearch call VimGrep(<f-args>,   '%',      ' | cw')
command! -nargs=1 -bar Argsearch call VimGrep(<f-args>,   '##',     ' | cw')
command! -nargs=1 -bar Allsearch call VimGrep(<f-args>,   './**/*', ' | cw')
command! -nargs=0 -bar Buftodo   call VimGrep('\CTODO:*', '%',      ' | cw')
command! -nargs=0 -bar Argtodo   call VimGrep('\CTODO:*', '##',     ' | cw')
command! -nargs=0 -bar Alltodo   call VimGrep('\CTODO:*', './**/*', ' | cw')
cnoreabbrev bufsearch  Bufsearch
cnoreabbrev argsearch  Argsearch
cnoreabbrev allsearch  Allsearch
cnoreabbrev buftodo    Buftodo
cnoreabbrev argtodo    Argtodo
cnoreabbrev alltodo    Alltodo
" }}}
" Qargs, Qdof, Qdol {{{
" :Qargs will populate the arglist with the files in the quickfix list
command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
cnoreabbrev qargs Qargs

" :Qdol applies an arbitrary command to every line found by :vimgrep (:Qdol normal @q)
command! -nargs=1 Qdol try | sil cfirst |
  \ while 1 | exec <q-args> | sil cn | endwhile |
  \ catch /^Vim\%((\a\+)\)\=:E\%(553\|42\):/ |
  \ endtry
cnoreabbrev qdol Qdol

" :Qdof applies an arbitrary command to every file found by :vimgrep (at line of first match)
command! -nargs=1 Qdof try | sil cfirst |
  \ while 1 | exec <q-args> | sil cnf | endwhile |
  \ catch /^Vim\%((\a\+)\)\=:E\%(553\|42\):/ |
  \ endtry
cnoreabbrev qdof Qdof

" implementation of Qargs
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction
" }}}
" Ranger file chooser {{{
" only works on a single file. more just for fun than practicality
function! RangerChooser()
    exec "silent !ranger --choosefile=/tmp/chosenfile " . expand("%:p:h")
    if filereadable('/tmp/chosenfile')
        exec 'edit ' . system('cat /tmp/chosenfile')
        call system('rm /tmp/chosenfile')
    endif
    redraw!
endfunction
" }}}
" SyntaxRange {{{
" last parameter is optional and can be any highlight group, determines delimiter colors
augroup SyntaxNotes
  autocmd BufEnter *.txt call SyntaxRange#Include('@begin=text@', '@end=text@', 'text', 'Tabline')
  autocmd BufEnter *.txt call SyntaxRange#Include('@begin=c@',    '@end=c@',    'c',    'Comment')
  autocmd BufEnter *.txt call SyntaxRange#Include('@begin=cpp@',  '@end=cpp@',  'cpp',  'Comment')
  autocmd BufEnter *.txt call SyntaxRange#Include('@begin=lisp@', '@end=lisp@', 'lisp', 'Comment')
augroup END
" }}}
" Return to last edit position when opening files {{{
augroup ReturnToLast
  autocmd BufReadPost *
       \ if line("'\"") > 0 && line("'\"") <= line("$") |
       \   exe "normal! g`\"" |
       \ endif
augroup END
" }}}
" StripTrailingWhitespaces {{{
function! StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfunction
augroup StripWhitespaceOnWrite
  autocmd FileType c,cpp,java,php,ruby,python autocmd BufWritePre <buffer> :call StripTrailingWhitespaces()
  autocmd BufWrite *.txt :call StripTrailingWhitespaces()
augroup END
" }}}
" Command mode {{{
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<CR>
cnoreabbrev te tabedit
cnoreabbrev sv source ~/.vim/vimrc
cnoreabbrev sc source ~/.vim/colors/guimiromod.vim

cnoremap <C-a>  <Home>
cnoremap <C-p>  <Up>
cnoremap <C-n>  <Down>
cnoremap <C-j>  <S-Left>
cnoremap <C-l>  <S-Right>
" }}}
" Completion options {{{
set completeopt=longest,menuone
" hitting enter when completion menu is visible selects item
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" }}}
" Line join {{{
if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j  " delete comment character when joining commented lines
endif
set nojoinspaces        " use only one space after a period when joining lines
" }}}
" GitPush with dispatch {{{
function! GitPush()
  if !exists('b:dispatch')
    let b:dispatch = "git push"
    Dispatch!
  else
    let foo = b:dispatch
    let b:dispatch = "git push"
    Dispatch!
    let b:dispatch = foo
  endif
endfunction
" }}}
" FileType specific {{{
augroup FileTypeSettings
  autocmd FileType make set noexpandtab shiftwidth=4 tabstop=4
  autocmd FileType tex nnoremap <leader>w :w!<CR>:call system("rubber --pdf --warn all " . shellescape(expand('%:p')))<CR>:call system("killall -HUP mupdf")<CR>
  autocmd FileType tex nnoremap <leader>ll :call system("rubber --pdf --warn all " . shellescape(expand('%:p')))<CR>:call system("killall -HUP mupdf")<CR>
  autocmd FileType tex nnoremap <leader>lv :!mupdf %:r.pdf &<CR><CR>
  autocmd BufEnter * set relativenumber  " for vimfiler
  autocmd BufRead .tags set filetype=tags
autocmd FileType lisp setlocal foldmethod=indent foldlevel=0
augroup END
" }}}
" }}}
" Plugins {{{
" airline {{{
let g:airline_theme             = "simple"
let g:airline_detect_modified   = 1
let g:airline_detect_paste      = 1
let g:airline_inactive_collapse = 1
let g:airline_readonly_symbol   = ''
let g:airline_left_alt_sep      = ''
let g:airline_right_alt_sep     = ''

""" FANCY SETTINGS
" let g:airline_left_sep      = ''
" let g:airline_right_sep     = ''
" let g:airline_branch_prefix = ' '
" let g:airline_section_z     = "%l/%L:C%c"

""" MINIMAL SETTINGS
let g:airline_left_sep  = ''
let g:airline_right_sep = ''
let g:airline_section_z = "%l/%L:C%v"

let g:airline#extensions#whitespace#symbol              = 'Ξ'
let g:airline#extensions#whitespace#trailing_format     = 's[%s]'
let g:airline#extensions#whitespace#mixed_indent_format = 't[%s]'
let g:airline#extensions#hunks#enabled                  = 1
let g:airline#extensions#hunks#non_zero_only            = 1

let g:airline_theme_patch_func = 'AirlineThemePatch'
function! AirlineThemePatch(palette)
  if g:airline_theme == 'simple'
    for colors in values(a:palette.inactive)
      let colors[2] = 231  " text color of split statusline
      let colors[3] = 58   " background color of split statusline
    endfor
  endif
endfunction
" }}}
" dispatch {{{
augroup DISPATCH
  autocmd FileType java      set makeprg='ant'
  " autocmd FileType java      let b:dispatch = 'java ' . shellescape(expand('%:r'))
  autocmd FileType c,cpp     let b:dispatch = './' . shellescape(expand('%:r'))
  autocmd FileType lisp      let b:dispatch = 'clisp ' . shellescape(expand('%'))
  autocmd FileType sh,python let b:dispatch = './' . shellescape(expand('%'))
augroup END
" }}}
" easymotion {{{
" stop some annoying maps from getting set
let g:EasyMotion_special_select_phrase = 0
let g:EasyMotion_special_select_line   = 0
" }}}
" fugitive {{{
autocmd User fugitive  " .. to go back up to parent directory when browsing git tree
  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
  \   nnoremap <buffer> .. :edit %:h<CR> |
  \ endif
autocmd BufReadPost fugitive://* set bufhidden=delete  " stop fugitive from making tons of buffers
" }}}
" gist {{{
let g:gist_post_private = 1 " gists are private by default
" }}}
" gundo {{{
let g:gundo_width          = 40
let g:gundo_preview_height = 40
" }}}
" match tag {{{
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
    \ 'php' : 1,
    \}
" }}}
" multi-cursor {{{
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_start_key = '<Space>m'
let g:multi_cursor_next_key  = '<C-n>'
let g:multi_cursor_prev_key  = '<C-p>'
let g:multi_cursor_skip_key  = '<C-x>'
let g:multi_cursor_quit_key  = '<C-c>'
" }}}
" nerdcommenter {{{
let NERDSpaceDelims     = 1
let NERDCompactSexyComs = 0
" }}}
" niji {{{
let g:niji_matching_filetypes = ['lisp']
let g:niji_dark_colours = [
                        \ [ '82',  '#5Fff00'],
                        \ [ '202', '#FF5F00'],
                        \ [ '231', '#FFFFFF'],
                        \ [ '201', '#FF00FF'],
                        \ [ '226', '#FFFF00'],
                        \ [ '196', '#FF0000']
                        \ ]
" }}}
" paredit {{{
let g:paredit_leader = '\'
" }}}
" showmarks {{{
let g:showmarks_enable       = 0
let g:showmarks_include      = "abcdefghijklmnopqrstuvwxyz"
let g:showmarks_textlower    = ">"
let g:showmarks_ignore_type  = "h"
let g:showmarks_hlline_lower = 1  " hilight lines with lowercase marks
" }}}
" simplyfold {{{
let g:SimplyFold_docstring_preview = 0
" }}}
" signify {{{
let g:signify_disable_by_default = 1            " disable run by default
let g:signify_vcs_list           = [ 'git' ]    " I only use git for now
let g:signify_mapping_next_hunk  = '<leader>gk'
let g:signify_mapping_prev_hunk  = '<leader>gi'
let g:signify_sign_change        = '~'
" }}}
" slimv {{{
let g:slimv_leader        = '\'
let g:slimv_repl_wrap     = 0 " stop j and k from getting remapped. unfortunately also stops REPL wrapping
let g:lisp_rainbow        = 1 " will get overridden by niji, but works in @begin=*@ blocks
let g:slimv_swank_cmd     = '! urxvt -e sbcl --load /usr/share/common-lisp/source/slime/start-swank.lisp &'
let g:slimv_swank_clojure = '! urxvt -e lein swank &'
" }}}
" startify {{{
let g:startify_list_order        = ['bookmarks', 'dir', 'files', 'sessions']
let g:startify_bookmarks         = [ '~/dotfiles/vim/vimrc', '~/dotfiles/aliases', '~/TODO' ]
let g:startify_files_number      = 7
let g:startify_session_detection = 1 " show session when Session.vim is found in current directory
let g:startify_session_autoload  = 0  " opening directories with a Session.vim will have it auto load
let g:startify_change_to_dir     = 1     " when opening file or bookmark, change to its directory
let g:startify_custom_indices    = ['a','f','h','j','l','w','r','u','o','p','z','x','n','m']
let g:startify_custom_header     = [
  \ '    /\\\        /\\\   /\\\\\\\\\\\   /\\\\            /\\\\  ',
  \ '    \/\\\       \/\\\  \/////\\\///   \/\\\\\\        /\\\\\\  ',
  \ '     \//\\\      /\\\       \/\\\      \/\\\//\\\    /\\\//\\\  ',
  \ '       \//\\\    /\\\        \/\\\      \/\\\\///\\\/\\\/ \/\\\  ',
  \ '         \//\\\  /\\\         \/\\\      \/\\\  \///\\\/   \/\\\  ',
  \ '           \//\\\/\\\          \/\\\      \/\\\    \///     \/\\\  ',
  \ '             \//\\\\\           \/\\\      \/\\\             \/\\\  ',
  \ '               \//\\\         /\\\\\\\\\\\  \/\\\             \/\\\  ',
  \ '                 \///         \///////////   \///              \///   ',
  \ '',
  \ '',
  \ ]
" }}}
" supertab {{{
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType = "<c-n>"
let g:SuperTabMappingForward = '<C-n>'
let g:SuperTabMappingBackward = '<C-p>'
let g:SuperTabLongestEnhanced = 1
let g:SuperTabLongestHighlight = 1
function MyTagContext()
  if filereadable(expand('%:p:h') . '/.tags')
    return "\<c-x>\<c-]>"
  endif
  " no return will result in the evaluation of the next configured context
endfunction
let g:SuperTabCompletionContexts = ['MyTagContext', 's:ContextText', 's:ContextDiscover']
" }}}
" syntastic {{{
let g:syntastic_c_compiler               = 'clang'
let g:syntastic_c_compiler_options       = ' -Wall'
let g:syntastic_cpp_compiler             = 'clang++'
let g:syntastic_cpp_compiler_options     = ' -Wall'
let g:syntastic_aggregate_errors         = 1         " display all errors
let g:syntastic_always_populate_loc_list = 1 " always put detecter errors in location list
let g:syntastic_error_symbol             = '✗✗'
let g:syntastic_warning_symbol           = '⚠⚠'
let g:syntastic_stl_format               = '[%E{E:%fe-%e}%B{|}%W{W:%fw-%w}]'
let g:syntastic_ignore_files = [
    \ '/home/james/Dropbox/Documents/UCLA/Y3Q1/CS161',
    \ '/home/james/Dropbox/Documents/UCLA/Y3Q1/CS118/Homework',
    \ '/home/james/Dropbox/Documents/UCLA/Y3Q1/CS144/vm-shared/project/src/']
" }}}
" taboo {{{
" let g:taboo_tab_format = "%N %1a%m "
let g:taboo_tab_format = "%N %f%m "
" }}}
" tagbar {{{
let g:tagbar_left             = 1   " default is to open on right
let g:tagbar_width            = 50  " default is 40
let g:tagbar_indent           = 1   " default is 2
let g:tagbar_show_linenumbers = 2   " relative line numbers
let g_tagbar_autoshowtag      = 1   " auto unfold any parents so highlighted tag is shown
let g:tagbar_sort             = 0   " sort tags by position in source file, not alphabetically
" }}}
" togglelist {{{
let g:toggle_list_no_mappings   = 1       " don't use default mappings
let g:toggle_list_copen_command = "Copen" " use dispatch Copen wrapper
" }}}
" ultisnips {{{
"let g:UltiSnipsExpandTrigger="<C-l>"
let g:UltiSnipsJumpForwardTrigger  = "<C-l>"
let g:UltiSnipsJumpBackwardTrigger = "<C-j>"
let g:UltiSnipsListSnippets        = "<C-s>"
" }}}
" unite {{{
let g:unite_cursor_line_highlight = "UniteSel"
if executable('ag')
  " Use ag in unite grep source.
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts =
  \ '--line-numbers --nocolor --nogroup --hidden --ignore ' .
  \  '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
  let g:unite_source_grep_recursive_opt = ''
elseif executable('ack-grep')
  " Use ack in unite grep source.
  let g:unite_source_grep_command = 'ack-grep'
  let g:unite_source_grep_default_opts =
  \ '--no-heading --no-color -a -H'
  let g:unite_source_grep_recursive_opt = ''
endif
call unite#set_profile('outline', 'smartcase',  1)
let g:unite_source_outline_filetype_options = {
    \ '*': {
    \   'auto_update': 1,
    \   'auto_update_event': 'write',
    \   'ignore_types': ['comment'],
    \ },
    \}
augroup unite
  autocmd FileType unite call s:unite_my_settings()
augroup END
let g:unite_source_file_mru_long_limit      = 3000
let g:unite_source_directory_mru_long_limit = 3000
let g:unite_enable_start_insert             = 1
let g:unite_winheight                       = 20
let g:unite_split_rule                      = 'botright'
let g:unite_prompt                          = '» '
let g:unite_update_time                     = 500   " in milliseconds
let g:unite_source_rec_async_command        = 'ag -g ".*"'
let g:unite_source_history_yank_enable      = 1
let g:unite_locate_command                  = 'locate -i -l %d -e %s'
let g:unite_enable_ignore_case              = 1
let g:unite_enable_smart_case               = 1
call unite#filters#matcher_default#use(['matcher_fuzzy']) " enable fuzzy matching
function! s:unite_my_settings()
  nmap <buffer> <ESC>   <Plug>(unite_exit)
  nmap <buffer> <C-c>   <Plug>(unite_exit)
  imap <buffer> <C-c>   <Plug>(unite_exit)
  imap <buffer> <C-d>   <Plug>(unite_insert_leave)

  imap <buffer><expr> j unite#smart_map('j', '')
  imap <buffer> <Tab>   <Plug>(unite_select_next_line)
  imap <buffer> <S-Tab> <Plug>(unite_select_previous_line)
  imap <buffer> <C-w>   <Plug>(unite_delete_backward_path)
  nmap <buffer> '       <Plug>(unite_quick_match_default_action)
  imap <buffer> '       <Plug>(unite_quick_match_default_action)
  nmap <buffer> x       <Plug>(unite_quick_match_choose_action)
  imap <buffer><expr> x
          \ unite#smart_map('x', "\<Plug>(unite_quick_match_choose_action)")
  nmap <buffer> <C-z>   <Plug>(unite_toggle_transpose_window)
  imap <buffer> <C-z>   <Plug>(unite_toggle_transpose_window)
  nmap <buffer> <C-y>   <Plug>(unite_narrowing_path)
  imap <buffer> <C-y>   <Plug>(unite_narrowing_path)
  nmap <buffer> <C-j>   <Plug>(unite_toggle_auto_preview)
  nmap <buffer> <C-r>   <Plug>(unite_narrowing_input_history)
  imap <buffer> <C-r>   <Plug>(unite_narrowing_input_history)
  nnoremap <silent><buffer><expr> l
          \ unite#smart_map('l', unite#do_action('default'))

  let unite = unite#get_current_unite()
  if unite.buffer_name =~# '^search'
    nnoremap <silent><buffer><expr> r     unite#do_action('replace')
  else
    nnoremap <silent><buffer><expr> r     unite#do_action('rename')
  endif

  nnoremap <silent><buffer><expr> cd     unite#do_action('lcd')
  nnoremap <buffer><expr> S      unite#mappings#set_current_filters(
          \ empty(unite#mappings#get_current_filters()) ?
          \ ['sorter_reverse'] : [])

  imap <silent><buffer><expr> <C-s>     unite#do_action('above')
  imap <silent><buffer><expr> <C-k>     unite#do_action('below')
  imap <silent><buffer><expr> <C-x>     unite#do_action('left')
  imap <silent><buffer><expr> <C-v>     unite#do_action('right')
  imap <silent><buffer><expr> <C-t>     unite#do_action('tabopen')
  imap <silent><buffer><expr> <C-y>     unite#do_action('tabdrop')
  imap <silent><buffer><expr> <C-j>     unite#do_action('tabdrop')
  imap <silent><buffer><expr> <C-g>     unite#do_action('tabdrop')
  imap <buffer>               <C-o>     <Plug>(unite_toggle_mark_current_candidate)

  nmap <silent><buffer><expr> <C-s>     unite#do_action('above')
  nmap <silent><buffer><expr> <C-k>     unite#do_action('below')
  nmap <silent><buffer><expr> <C-x>     unite#do_action('left')
  nmap <silent><buffer><expr> <C-v>     unite#do_action('right')
  nmap <silent><buffer><expr> <C-t>     unite#do_action('tabopen')
  nmap <silent><buffer><expr> <C-y>     unite#do_action('tabdrop')
  nmap <silent><buffer><expr> <C-j>     unite#do_action('tabdrop')
  nmap <silent><buffer><expr> <C-g>     unite#do_action('tabdrop')
  nmap <buffer>               <C-o>     <Plug>(unite_toggle_mark_current_candidate)

  nmap <buffer> i     <Plug>(unite_loop_cursor_up)
  nmap <buffer> k     <Plug>(unite_loop_cursor_down)
  nmap <buffer> h     <Plug>(unite_insert_enter)
  nmap <buffer> H     <Plug>(unite_insert_head)
  nmap <buffer> l     <Plug>(unite_do_default_action)
endfunction
" }}}
" vimfiler {{{
let g:vimfiler_as_default_explorer = 1
augroup vimfiler
  autocmd FileType vimfiler call s:vimfiler_my_settings()
augroup END

function! s:vimfiler_my_settings()
  " non defaults
  nmap <buffer> i  <Plug>(vimfiler_loop_cursor_up)
  nmap <buffer> j  <Plug>(vimfiler_smart_h)
  nmap <buffer> k  <Plug>(vimfiler_loop_cursor_down)
  nmap <buffer> h  <Plug>(vimfiler_toggle_mark_current_line)

  " defaults
  nmap <buffer> gg		    <Plug>(vimfiler_cursor_top)
  nmap <buffer> <C-l>			<Plug>(vimfiler_redraw_screen)
  nmap <buffer> <S-Space>	<Plug>(vimfiler_toggle_mark_current_line_up)
  nmap <buffer> *         <Plug>(vimfiler_toggle_mark_all_lines)
  nmap <buffer> &         <Plug>(vimfiler_mark_similar_lines)
  nmap <buffer> U         <Plug>(vimfiler_clear_mark_all_lines)
  nmap <buffer> c         <Plug>(vimfiler_copy_file)
  nmap <buffer> m         <Plug>(vimfiler_move_file)
  nmap <buffer> d         <Plug>(vimfiler_delete_file)
  nmap <buffer> Cc        <Plug>(vimfiler_clipboard_copy_file)
  nmap <buffer> Cm        <Plug>(vimfiler_clipboard_move_file)
  nmap <buffer> Cp        <Plug>(vimfiler_clipboard_paste)
  nmap <buffer> r         <Plug>(vimfiler_rename_file)
  nmap <buffer> K         <Plug>(vimfiler_make_directory)
  nmap <buffer> N         <Plug>(vimfiler_new_file)
  nmap <buffer> e     		<Plug>(vimfiler_execute)
  nmap <buffer> l         <Plug>(vimfiler_smart_l)
  nmap <buffer> x         <Plug>(vimfiler_execute_system_associated)
  nmap <buffer> L         <Plug>(vimfiler_switch_to_drive)
  nmap <buffer> ~         <Plug>(vimfiler_switch_to_home_directory)
  nmap <buffer> \         <Plug>(vimfiler_switch_to_root_directory)
  nmap <buffer> <C-j>			<Plug>(vimfiler_switch_to_history_directory)
  nmap <buffer> <BS>		  <Plug>(vimfiler_switch_to_parent_directory)
  nmap <buffer> .         <Plug>(vimfiler_toggle_visible_ignore_files)
  nmap <buffer> H         <Plug>(vimfiler_popup_shell)
  nmap <buffer> <Enter>   <Plug>(vimfiler_edit_file)
  nmap <buffer> E         <Plug>(vimfiler_split_edit_file)
  nmap <buffer> B         <Plug>(vimfiler_edit_binary_file)
  nmap <buffer> ge        <Plug>(vimfiler_execute_external_filer)
  nmap <buffer> !         <Plug>(vimfiler_execute_shell_command)
  nmap <buffer> q         <Plug>(vimfiler_hide)
  nmap <buffer> Q         <Plug>(vimfiler_exit)
  nmap <buffer> -         <Plug>(vimfiler_close)
  nmap <buffer> ?         <Plug>(vimfiler_help)
  nmap <buffer> v         <Plug>(vimfiler_preview_file)
  nmap <buffer> o         <Plug>(vimfiler_sync_with_current_vimfiler)
  nmap <buffer> O         <Plug>(vimfiler_open_file_in_another_vimfiler)
  nmap <buffer> <C-g>			<Plug>(vimfiler_print_filename)
  nmap <buffer> g<C-g>		<Plug>(vimfiler_toggle_maximize_window)
  nmap <buffer> yy        <Plug>(vimfiler_yank_full_path)
  nmap <buffer> M         <Plug>(vimfiler_set_current_mask)
  nmap <buffer> gr        <Plug>(vimfiler_grep)
  nmap <buffer> gf        <Plug>(vimfiler_find)
  nmap <buffer> S         <Plug>(vimfiler_select_sort_type)
  nmap <buffer> <C-v>     <Plug>(vimfiler_switch_vim_buffer_mode)
  nmap <buffer> gc        <Plug>(vimfiler_cd_vim_current_dir)
  nmap <buffer> gs        <Plug>(vimfiler_toggle_safe_mode)
  nmap <buffer> gS        <Plug>(vimfiler_toggle_simple_mode)
  nmap <buffer> a         <Plug>(vimfiler_choose_action)
  nmap <buffer> Y         <Plug>(vimfiler_pushd)
  nmap <buffer> P         <Plug>(vimfiler_popd)
  nmap <buffer> t         <Plug>(vimfiler_expand_tree)
  nmap <buffer> T         <Plug>(vimfiler_expand_tree_recursive)
  nmap <buffer> I         <Plug>(vimfiler_cd_input_directory)
  nmap <buffer> gj        <Plug>(vimfiler_jump_last_child)
  nmap <buffer> gk        <Plug>(vimfiler_jump_first_child)

endfunction
" }}}
" }}}
" General {{{
" Set options {{{
set ttyfast                    " redraw screen faster
set restorescreen=on           " restore screen contents on exit
set clipboard=unnamedplus      " by default, use system clipboard for yanks ('+' register)
set titlestring=%t\            " file name
set title titlelen=150         " max length of title string
set relativenumber             " use relative line numbers
set number                     " show current line number on left instead of 0
set backspace=indent,eol,start " allow backspace in insert mode
set esckeys                    " make numpad work
set autoread                   " reload files changed outside of vim
set splitbelow                 " splits open below
set splitright                 " vsplits open on right
set hidden                     " allows navigating away from buffers with unsaved changes
set fillchars=""               " no dashes in folds or vertical bars in vsplits
set noruler                    " don't show the ruler
set laststatus=2               " always display the statusline
set history=1000               " length of command history
set showmode                   " show what mode we're in on the bottom line
set showcmd                    " show current command or visual selection info in bottom line
set showmatch                  " flash to matching paren when typing
set matchtime=3                " tenths of a second to flash to matching paren
set nocursorline               " don't hilight cursor line
set incsearch                  " find as you type
set hlsearch                   " hilight search terms
set magic                      " change how backslashes are handled in searches
set ignorecase                 " case insensitive search by default
set smartcase                  " case sensitive search if search contains uppercase letter
set nostartofline              " don't reset cursor to start of line when moving around
set nrformats=hex              " for C-a and C-x. recognize '0x' prefix as hex
set scrolljump=1               " lines to scroll when cursor leaves screen
set scrolloff=1                " start scrolling when 8 lines away from margins
set updatetime=50              " make CursorHold autocommand and swap writes happen more frequently
set encoding=utf8              " new files use utf-8 encoding by default
set ffs=unix,dos,mac           " new files use unix line endings by default
set timeoutlen=2000            " wait for 1 second to time out leader
set cryptmethod=blowfish       " more secure encryption for vim -x
set switchbuf=usetab           " look to see if buffer is already open in another window or tab
set formatoptions-=r           " don't automatically continue comment when hitting enter in insert mode
set formatoptions-=o           " don't automatically continue comment when hitting o in normal mode
set guioptions-=m              " hide gui menu bar
set guioptions-=T              " hide gui toolbar
set guioptions-=r              " hide gui righthand scrollbar
set guioptions-=e              " use regular tabline
set noswapfile                 " seriously who needs them
set tags=./.tags;              " search for .tags file upward (:h file-searching)
set previewheight=20
set listchars=tab:▸\ ,trail:·,extends:>,eol:¶
syntax on                      " syntax hilighting
syntax sync minlines=256       " speed up syntax hilighting
augroup SyntaxSync
  autocmd BufReadPost syntax sync fromstart
augroup END
" }}}
" Fold {{{
" zf#j manually folds # lines, or zf in visual mode selection.
set foldnestmax =1   " folds only one level deep
set foldmethod  =manual
augroup SyntaxFold
  autocmd BufEnter    *.java           set foldnestmax=2 foldlevel=1
  autocmd BufEnter    *.c,*.cpp,*.java set foldmethod=syntax " define syntax folds when file loads
  autocmd InsertEnter *.c,*.cpp,*.java set foldmethod=manual " once we start typing, using manual folds
augroup END
" ctrl+spacebar toggles folds in normal mode, doesn't work in gvim
nnoremap <silent> <C-@> @=(foldlevel('.')?'za':"\<Space>")<CR>
" }}}
" Tab/Indent {{{
set autoindent      " auto indent line to match above line when hitting enter
"set cindent        " newer and better smartindent
set smarttab        " make tabs more consistent with softtabstop
set shiftwidth  =2  " amount of whitespace to insert or remove using normal mode indentation commands
set softtabstop =2  " amount of whitespace deleted by backspace
set tabstop     =2  " width of tab character
set shiftround      " indent byh multiples of shiftwidth
set expandtab       " use spaces instead of tabs
set linebreak       " wrap lines at nice points
set textwidth=0     " disables textwidth
filetype plugin on
filetype indent on

" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  echomsg
  call SummarizeTabs()
endfunction
cnoreabbrev stab Stab

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction
" }}}
" Wildmenu {{{
if has("wildmenu")
  set wildmenu                    " turn on wildmenu
  set wildignorecase              " wildmenu doesn't care about case
  set wildmode=longest:full,full
  set wildignore=*.o,*.a,*~,*.pyc " ignore compiled files
  set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.mp4,*.mkv,*.avi,*.pdf,*.png,*.mp3
  set wildignore+=*.m4v,*.flv,*.flac,*.wma,*.doc,*.docx,*.ppt,*.pptx,*.m4a,*.m2ts,*.m3u
  set wildignore+=*:2\\,S,*:2\\,RS,*:2\\,FS,*:2\\,,*:2\\,FRS " for mutt
  set wildignore+=.DS_Store,.git,.hg,.svn
  set wildignore+=*~,*.swp,*.tmp
endif
" }}}
" }}}
" Keymaps {{{
" Misc {{{
let mapleader = ','  " use comma instead of \ as leader
nmap     / <Plug>SneakPrevious
inoremap <C-c> <Esc><Esc>
nnoremap Y y$
nnoremap <Esc>[Z v%
nnoremap dg do
nnoremap yl :let c=col(".")<CR>^v$hy:call cursor(line("."),c)<CR>

" searching jumps to middle of screen, and opens fold if in one
nnoremap ? :set cursorline cursorcolumn<CR>?
nnoremap n nzv
nnoremap N Nzv

" always show multiple tag options, open in new window
"nnoremap <C-]> <C-w>g<C-]>
nnoremap <C-]> g<C-]>

" shifting doesn't exit visual mode
vnoremap < <gv
vnoremap > >gv

" up/down arrow keys go up and down by visual lines
inoremap <up>   <C-O>gk
inoremap <down> <C-O>gj
nnoremap <up>        gk
nnoremap <down>      gj
vnoremap <up>        gk
vnoremap <down>      gj

" left/right arrow keys indent
nnoremap <Left>      <<
nnoremap <Right>     >>
" }}}
" next/previous paren/bracket objects {{{
omap h i
onoremap in( :<c-u>normal! f(vi(<CR>
onoremap ip( :<c-u>normal! F)vi(<CR>
onoremap in[ :<c-u>normal! f[vi[<CR>
onoremap ip[ :<c-u>normal! F]vi[<CR>
onoremap in{ :<c-u>normal! f{vi{<CR>
onoremap ip{ :<c-u>normal! F}vi{<CR>
onoremap in< :<c-u>normal! f<vi<<CR>
onoremap ip< :<c-u>normal! F>vi<<CR>
onoremap in" :<c-u>normal! f"vi"<CR>
onoremap ip" :<c-u>normal! F"vi"<CR>
onoremap in' :<c-u>normal! f'vi'<CR>
onoremap ip' :<c-u>normal! F'vi'<CR>
onoremap in` :<c-u>normal! f`vi`<CR>
onoremap ip` :<c-u>normal! F`vi`<CR>

onoremap an( :<c-u>normal! f(va(<CR>
onoremap ap( :<c-u>normal! F)va(<CR>
onoremap an[ :<c-u>normal! f[va[<CR>
onoremap ap[ :<c-u>normal! F]va[<CR>
onoremap an{ :<c-u>normal! f{va{<CR>
onoremap ap{ :<c-u>normal! F}va{<CR>
onoremap an< :<c-u>normal! f<va<<CR>
onoremap ap< :<c-u>normal! F>va<<CR>
onoremap an" :<c-u>normal! f"va"<CR>
onoremap ap" :<c-u>normal! F"va"<CR>
onoremap an` :<c-u>normal! f`va`<CR>
onoremap ap` :<c-u>normal! F`va`<CR>

" easier to reach on the keyboard
omap inp in(
omap ipp ip(
omap inb in[
omap ipb ip[
omap inc in{
omap ipc ip{
omap ind in"
omap ipd ip"
omap ins in'
omap ips ip'

omap anp an(
omap app ap(
omap anb an[
omap apb ap[
omap anc an{
omap apc ap{
omap and an"
omap apd ap"
omap ans an'
omap aps ap'

onoremap ip i(
onoremap ib i[
onoremap ic i{
onoremap id i"
onoremap is i'

onoremap ap a(
onoremap ab a[
onoremap ac a{
onoremap ad a"
onoremap as a'
" }}}
" ijkl instead of hjkl {{{
nnoremap j h
vnoremap j h
nnoremap i k
vnoremap i k
nnoremap k j
vnoremap k j

" since 'i' is now used for motion, make 'h' do what 'i' used to
nnoremap h i
nnoremap H I
vnoremap h i
vnoremap H I
nnoremap I H

" motions by display line, insert at last insert mode position
nnoremap gh gi
nnoremap gk gj
nnoremap gi gk

" move by folds
nnoremap zj zi
nnoremap zk zj
nnoremap zi zk
" }}}
" function keys {{{
" define b:dispatch and makeprg so that F1 compiles and F2 runs
nnoremap <F1>       :call StripTrailingWhitespaces()<CR>
nnoremap <F2>       :set spell!<CR>
nnoremap <F4>       :Make! <C-r>=expand('%:r')<CR><CR>
nnoremap <F5>       :Make!<CR>
nnoremap <F6>       :Dispatch!<CR>
nnoremap <F7>       :let g:toggle_list_copen_command="Copen"<CR>:call ToggleQuickfixList()<CR>
nnoremap <F8>       :call ToggleLocationList()<CR>
nnoremap <F12>      :GundoToggle<CR>
" }}}
" defualt (comma) leader maps {{{
nnoremap <leader>bb :Bufsearch<Space>
nnoremap <leader>ba :Allsearch<Space>
"        <leader>c  various nerdcommenter mappings
vnoremap <leader>dg :diffget <Bar> diffupdate<CR>
vnoremap <leader>do :diffget <Bar> diffupdate<CR>
vnoremap <leader>dp :diffput <Bar> diffupdate<CR>
nnoremap <leader>du :diffupdate<CR>
nnoremap <leader>e  :redraw!<CR>
nnoremap <leader>f  :set foldmethod=syntax<CR>:set foldmethod=manual<CR>
"        <leader>g  fugitive and signify mappings
nnoremap <leader>h  :split<CR>
nnoremap <leader>l  :ls<CR>:b<Space>
"        <leader>m  various showmarks mappings
nnoremap <leader>o  :only<CR>:redraw!<CR>
nnoremap <leader>p  :set list!<CR>
nnoremap <leader>q  :q<CR>
nnoremap <leader>r  :QuickRun -mode n<CR>
vnoremap <leader>r  :QuickRun -mode v<CR>
nnoremap <leader>s  :syntax sync fromstart<CR>
vnoremap <leader>s  :!sort -f<CR>
nnoremap <leader>tt :Buftodo <Bar> cw<CR>
nnoremap <leader>ta :Alltodo <Bar> cw<CR>
nnoremap <leader>v  :vsplit<CR>
nnoremap <leader>w  :w!<CR>
nnoremap <leader>x  :wq<CR>
nnoremap <leader>zh :echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')<CR>
nnoremap <leader>zv :tabedit $MYVIMRC<CR>

" <leader>g[ikht] taken by signify
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
nnoremap <silent> <leader>gf :silent Glog <Bar> redraw!<CR>
nnoremap <silent> <leader>gg :SignifyToggle<CR>
nnoremap <silent> <leader>gl :silent Glog -- <Bar> redraw!<CR>
nnoremap <silent> <leader>gp :call GitPush()<CR>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gv :Gitv<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
" }}}
" space leader maps. unite + tabularize {{{
nnoremap <Space>a   :<C-u>Unite -start-insert -buffer-name=file_rec   file_rec/async<CR>
nnoremap <Space>b   :<C-u>Unite -start-insert -buffer-name=buffers    buffer<CR>
nnoremap <Space>c   :<C-u>Unite -start-insert -buffer-name=registers  register<CR>
nnoremap <Space>f   :<C-u>Unite -start-insert -buffer-name=files      file<CR>
nnoremap <Space>g   :<C-u>Unite -start-insert -buffer-name=grep       grep:.<CR>
nnoremap <Space>h   :<C-u>Unite -start-insert -buffer-name=help       help<CR><CR>
nnoremap <Space>i   :Copen<CR>:cclose<CR>:<C-u>Unite -start-insert -buffer-name=quickfix   qf<CR>
nnoremap <Space>j   :<C-u>Unite -start-insert -buffer-name=lines      line<CR>
nnoremap <Space>l   :<C-u>UniteWithInput      -buffer-name=locate     locate<CR>
"        <Space>m   Multicursor trigger
nnoremap <Space>o   :<C-u>Unite -start-insert -buffer-name=outline    outline<CR>
nnoremap <Space>q   :let g:toggle_list_copen_command="copen"<CR>:call ToggleQuickfixList()<CR>
nnoremap <Space>r   :<C-u>Unite -start-insert -buffer-name=recent     file_mru<CR>
nnoremap <Space>t   :<C-u>Unite -start-insert -buffer-name=tags       tag<CR>a<BS>
"        <Space>u*  VimGrep maps, defined below
nnoremap <Space>y   :<C-u>Unite -start-insert -buffer-name=yanks      history/yank<CR>
nnoremap <Space>'   :<C-u>Unite -start-insert -buffer-name=marks      mark<CR>
nnoremap <Space><Space>   :<C-u>UniteResume<CR>
nnoremap <Space>9   :NoSurrAll<CR>
nnoremap <Space>(   :DoSurrAll<CR>

" Tabularize
nnoremap <Space>=       :Tabularize /=<CR>
vnoremap <Space>=       :Tabularize /=<CR>
nnoremap <Space>:       :Tabularize /:\zs<CR>
vnoremap <Space>:       :Tabularize /:\zs<CR>
nnoremap <Space><Bar>   :Tabularize /<Bar><CR>
vnoremap <Space><Bar>   :Tabularize /<Bar><CR>
nnoremap <Space>-       :Tabularize /-<CR>
vnoremap <Space>-       :Tabularize /-<CR>

" Under cursor or visual selection, search Buffer or Arglist
nnoremap <Space>ua :call VimGrep("##", substitute(escape(expand("<cword>")
                      \, '\'), '\n', '\\n', 'g'))<CR>
vnoremap <Space>ua "*y:call VimGrep("##", substitute(escape(@*, '\/.*$^~[]')
                      \, "\n", '\\n', "g"))<CR>
nnoremap <Space>ub :call VimGrep("%", substitute(escape(expand("<cword>")
                      \, '\'), '\n', '\\n', 'g'))<CR>
vnoremap <Space>ub "*y:call VimGrep("%", substitute(escape(@*, '\/.*$^~[]')
                      \, "\n", '\\n', "g"))<CR>
" }}}
" ctrl normal mode {{{
nnoremap <C-b>      :VimFilerExplorer<CR>
nnoremap <C-f>      :set cursorline cursorcolumn<CR>/
nnoremap <C-w>i     <C-w><Up>
nnoremap <C-j>      <C-w><Left>
nnoremap <C-k>      <C-w><Down>
nnoremap <C-l>      <C-w><Right>
nnoremap <C-n>      gt
nnoremap <C-p>      gT
"        <C-s>      multi_cursor_start_key
nnoremap <C-h>      :TagbarOpen fjc<CR>
" }}}
" ctrl insert mode {{{
inoremap <C-a>      <Home>
inoremap <C-e>      <End>
" }}}
" alt normal mode {{{
if !has("gui_running")
  nnoremap <Esc>a   :AirlineToggle<CR>
  nnoremap <Esc>h   :set nocursorline nocursorcolumn<CR>:nohlsearch<CR>
  nnoremap <Esc>i   :resize +2<CR>
  nnoremap <Esc>j   :vertical resize -2<CR>
  nnoremap <Esc>k   :resize -2<CR>
  nnoremap <Esc>l   :vertical resize +2<CR>
  nnoremap <Esc>m   :match none<CR>
  nnoremap <Esc>n   :tabmove +1<CR>
  nnoremap <Esc>p   :tabmove -1<CR>
  nnoremap <Esc>q   :quitall<CR>
  nnoremap <Esc>1   1gt
  nnoremap <Esc>2   2gt
  nnoremap <Esc>3   3gt
  nnoremap <Esc>4   4gt
  nnoremap <Esc>5   5gt
  nnoremap <Esc>6   6gt
  nnoremap <Esc>7   7gt
  nnoremap <Esc>8   8gt
  nnoremap <Esc>9   9gt
  nnoremap <Esc>0   :tablast<CR>
else
  nnoremap <A-a>    :AirlineToggle<CR>
  nnoremap <A-h>    :set nocursorline nocursorcolumn<CR>:nohlsearch<CR>
  nnoremap <A-i>    :resize +2<CR>
  nnoremap <A-j>    :vertical resize -2<CR>
  nnoremap <A-k>    :resize -2<CR>
  nnoremap <A-l>    :vertical resize +2<CR>
  nnoremap <A-m>    :match none<CR>
  nnoremap <A-n>    :tabmove +1<CR>
  nnoremap <A-p>    :tabmove -1<CR>
  nnoremap <A-q>    :quitall<CR>
  nnoremap <A-1>    1gt
  nnoremap <A-2>    2gt
  nnoremap <A-3>    3gt
  nnoremap <A-4>    4gt
  nnoremap <A-5>    5gt
  nnoremap <A-6>    6gt
  nnoremap <A-7>    7gt
  nnoremap <A-8>    8gt
  nnoremap <A-9>    9gt
  nnoremap <A-0>    :tablast<CR>
endif
" }}}
" alt insert mode {{{
if !has("gui_running")
  inoremap <Esc>i   <Up>
  inoremap <Esc>j   <Left>
  inoremap <Esc>k   <Down>
  inoremap <Esc>l   <Right>
  inoremap <Esc>b   <S-Left>
  inoremap <Esc>B   <C-Left>
  inoremap <Esc>w   <S-Right>
  inoremap <Esc>W   <C-Right>
else
  inoremap <A-i>    <Up>
  inoremap <A-j>    <Left>
  inoremap <A-k>    <Down>
  inoremap <A-l>    <Right>
  inoremap <A-b>    <S-Left>
  inoremap <A-B>    <C-Left>
  inoremap <A-w>    <S-Right>
  inoremap <A-W>    <C-Right>
endif
" }}}
" slash leader maps (CURRENTLY NOT USING){{{
" reserved for slimv/paredit in lisp files
" }}}
" }}}
