set nocompatible " use vim settings not vi
colorscheme wombat256mod
execute pathogen#infect()
"=============================================================================
"                  FUNCTION TO REMOVE TRAILING WHITESPACES
"=============================================================================
fun! StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
" call function on write for these file types
autocmd FileType c,cpp,java,php,ruby,python autocmd BufWritePre <buffer> :call StripTrailingWhitespaces()
" autocmd BufWrite *.txt :call StripTrailingWhitespaces() " this line can be copied for any extension
"=============================================================================
"                                 MISC
"=============================================================================
augroup MUTT " spell check, textwidth, F1-3 for wrapping paragraphs in useful ways
  au BufRead /tmp/mutt-* set tw=72  " for email with mutt
  au BufRead /tmp/mutt-* set spell  " <-- vim 7 required
  au BufRead /tmp/mutt-* nmap  <F1>  gqap
  au BufRead /tmp/mutt-* nmap  <F2>  gqqj
  au BufRead /tmp/mutt-* nmap  <F3>  kgqj
  au BufRead /tmp/mutt-* map!  <F1>  <ESC>gqapi
  au BufRead /tmp/mutt-* map!  <F2>  <ESC>gqqji
  au BufRead /tmp/mutt-* map!  <F3>  <ESC>kgqji
augroup END

set shell=zsh\ --login

" last parameter is optional and can be any highlight group, determines delimiter colors
call SyntaxRange#Include('@begin=c@',   '@end=c@',   'c',   'Comment')
call SyntaxRange#Include('@begin=cpp@', '@end=cpp@', 'cpp', 'Comment')

command W :execute ':silent w !sudo tee % > /dev/null' | :edit! " :W when forgetting to sudo
cnoreabbrev te tabedit
cnoreabbrev tn tabnew

" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

"autocmd vimenter * if !argc() | NERDTree | endif " open nerdtree if no files were specified

set completeopt=longest,menuone
" hitting enter when completion menu is visible selects item
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"=============================================================================
"                             PLUGIN SETTINGS
"=============================================================================
" airline settings
let g:airline_theme="simple"
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_branch_prefix = ' '
let g:airline_readonly_symbol = ''
let g:airline_linecolumn_prefix = ''
let g:airline_section_z="%l/%L:C%c %b/0x%B"
let g:airline_detect_whitespace=2 " don't display long message for trailing whitespace
let g:airline#extensions#hunks#enabled = 1
let g:airline#extensions#hunks#non_zero_only = 1

" bufferline settings
let g:bufferline_echo = 0        " enable/disable display in command bar
let g:bufferline_active_highlight = 'StatusLine'
let g:bufferline_inactive_highlight = 'StatusLineNC'

" easyclip settings
let g:EasyClipAutoFormat=0       " disable auto-formatting pasting text
let g:EasyClipYankHistorySize=20 " default is 30
let g:EasyClipDoSystemSync=1     " default value. change to 0 to disable sync
" don't use default keys for easyclip settings
let g:EasyClipUseYankDefaults=0
let g:EasyClipUseCutDefaults=0
let g:EasyClipUsePasteDefaults=0
let g:EasyClipUseSubstituteDefaults=0
" use yd<motion> or ydd to cut
nmap yd <Plug>MoveMotionPlug
xmap yd <Plug>MoveMotionXPlug
nmap ydd <Plug>MoveMotionLinePlug

" gundo settings
let g:gundo_width=40
let g:gundo_preview_height=40

" latex settings
set grepprg=grep\ -nH\ $*
let g:tex_flavor = "latex"
let g:Tex_ViewRule_pdf = '/usr/bin/evince' " set pdf viewer for <leader>lv
let g:Tex_ViewRule_dvi = '/usr/bin/evince' " set dvi viewer for <leader>lv

" match tag filetypes
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
    \ 'php' : 1,
    \}

" multi-cursor settings
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-o>'
let g:multi_cursor_prev_key='<C-i>'
let g:multi_cursor_skip_key='<C-s>' " requires `stty -ixon` set in terminal or scroll lock steals the key
let g:multi_cursor_quit_key='<C-c>'

" nerdtree settings
let NERDTreeWinSize=40
let NERDTreeMapOpenSplit="s"
let NERDTreeMapOpenVSplit="v"
let NERDTreeShowLineNumbers=1

" rainbow settings
let g:rainbow_active = 0  " don't load automatically
let g:rainbow_ctermfgs = ['white', 'lightblue', 'lightgreen',]
let g:rainbow_load_separately = [
 \ [ '*' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
 \ [ '*.tex' , [['(', ')'], ['\[', '\]']] ],
 \ [ '*.cpp' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
 \ [ '*.{html,htm}' , [['(', ')'], ['\[', '\]'], ['{', '}'], ['<\a[^>]*>', '</[^>]*>']] ],
 \ ]

" showmarks settings
let g:showmarks_enable = 0 " hide marks by default
let g:showmarks_marks = "abcdefghijklmnopqrstuvwxyz" " only show local, user created marks

" signify settings
let g:signify_disable_by_default = 1  " disable run by default
let g:signify_vcs_list = [ 'git' ]    " I only use git for now
let g:signify_mapping_next_hunk = '<leader>gk'
let g:signify_mapping_prev_hunk = '<leader>gi'
let g:signify_sign_change       = '~'

" startify settings
let g:startify_list_order = ['files', 'dir', 'bookmarks', 'sessions']
let g:startify_bookmarks = [ '~/dotfiles/vim/vimrc' ]
let g:startify_files_number = 10
let g:startify_session_detection = 1 " show session at top when Session.vim is found in current directory
let g:startify_session_autoload = 0  " opening directories with a Session.vim file will have it auto loaded
let g:startify_change_to_dir = 1     " when opening file or bookmark, change to its directory
let g:startify_custom_indices = ['f', 'g', 'h'] " shortcut keys. don't use beiqsv, navigation keys

" taboo.vim tab name format string
let g:taboo_tab_format = "%N %1a%m "

" tagbar settings
let g:tagbar_left  = 1      "default is to open on right
let g:tagbar_width = 50     "default is 40
let g:tagbar_indent= 1      "default is 2
let g_tagbar_autoshowtag=1  "auto unfold any parents so highlighted tag is shown
let g:tagbar_sort  = 0      "sort tags by position in source file, not alphabetically

" ultisnips settings
let g:UltiSnipsJumpForwardTrigger="<C-l>"
let g:UltiSnipsJumpBackwardTrigger="<C-j>"
"=============================================================================
"                             GERNERAL STUFF
"=============================================================================
set ttyfast                    " redraw screen faster
set restorescreen=on           " restore screen contents on exit
set autochdir                  " change cwd when switching/opening buffers
set titlestring=%t\            " file name
set title titlelen=150         " max length of title string
set relativenumber             " use relative line numbers
set number                     " show current line number on left instead of 0
set backspace=indent,eol,start " allow backspace in insert mode
set esckeys                    " make numpad work
set autoread                   " reload files changed outside of vim
set noruler                    " don't show the ruler
set laststatus=2               " always display the statusline
set history=1000               " length of command history
set showmode                   " show what mode we're in on the bottom line
set showcmd                    " show current command or visual selection info in bottom line
set showmatch                  " flash to matching paren when typing
set matchtime=3                " tenths of a second to flash to matching paren
set cursorline                 " hilight current line
set incsearch                  " find as you type
set hlsearch                   " hilight search terms
set magic                      " change how backslashes are handled in searches
set ignorecase                 " case insensitive search by default
set smartcase                  " case sensitive search if search contains uppercase letter
set scrolljump=5               " lines to scroll when cursor leaves screen
set scrolloff=8                " start scrolling when 8 lines away from margins
set updatetime=50              " make CursorHold autocommand and swap writes happen more frequently
set encoding=utf8              " new files use utf-8 encoding by default
set ffs=unix,dos,mac           " new files use unix line endings by default
set timeoutlen=2000            " wait for 2 seconds to time out leader
set cryptmethod=blowfish       " more secure encryption for vim -x
set guioptions-=m              " hide gui menu bar
set guioptions-=T              " hide gui toolbar
set guioptions-=r              " hide gui righthand scrollbar
syntax on                      " syntax hilighting
syntax sync minlines=256       " speed up syntax hilighting
set listchars=tab:▸\ ,trail:·,extends:>,eol:¶
"=============================================================================
"                                  FOLDING
"=============================================================================
" folding: zf#j manually folds # lines, or zf in visual mode selection.
" zo=open, zO=open all levels, zc=close, za=toggle.  zr=open all first level, zR = open all, mM for close all
" zj and zk to move between folds
" ':#,# fo' folds # through #
" zfa}, zfa], zfa) for matching closer, works same from closers (zfa{)

set foldmethod=syntax                  " define syntax folds when file loads
set foldnestmax=1                      " only one level deep
au InsertEnter * set foldmethod=manual " once we start typing, using manual folds

" spacebar toggles folds in normal mode
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>

" prevent folds from slowing down vim on big files
"autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
"autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif
"=============================================================================
"                             TAB / INDENT STUFF
"=============================================================================
set autoindent
"set cindent "alternative to vi 'autoindent' that uses c indentation standard
set smartindent
set smarttab
set shiftwidth=2   " amount of whitespace to insert or remove using normal mode indentation commands
set softtabstop=2  " amount of whitespace deleted by backspace
set tabstop=2      " width of tab character
set expandtab      " use spaces instead of tabs
filetype plugin on " this or below line causes comment token to be auto added when hitting enter from comment
filetype indent on " manually overrode this for c/cpp files in .vim/after/ftplugin/c.vim
set linebreak      " wrap lines at nice points
set textwidth=0
"=============================================================================
"                                 WILDMENU
"=============================================================================
if has("wildmenu")
  set wildmenu " turn on wildmenu
  set wildmode=longest:full,full
  set wildignore=*.o,*.a,*~,*.pyc " ignore compiled files
  set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
  set wildignore+=.DS_Store,.git,.hg,.svn
  set wildignore+=*~,*.swp,*.tmp
endif
"=============================================================================
"                                 KEYBINDS
"=============================================================================
let mapleader = ','  " use comma instead of \ as leader
set pastetoggle=<INS>

nnoremap <C-f> /
nnoremap <C-h> :NERDTreeToggle<CR>
nnoremap <C-l> :set relativenumber!<CR>
nnoremap <C-t> :TagbarOpen fjc<CR>
nnoremap <CR> :set hlsearch!<CR>
inoremap <C-c> <Esc><Esc>

" use semicolon as well as colon to enter command mode
nnoremap ; :
vnoremap ; :

" move motion keys to be ijkl instead of hjkl. must be non recursive mappings
nnoremap j h
vnoremap j h
nnoremap i k
vnoremap i k
nnoremap k j
vnoremap k j
noremap <C-w>j <C-w><Left>
noremap <C-w>i <C-w><Up>
noremap <C-w>k <C-w><Down>

" since 'i' is now used for motion, make 'h' do what 'i' used to
nnoremap h i
nnoremap H I
vnoremap h i
vnoremap H I
nnoremap I H

" function keys
nnoremap <F1>   :let @+=@"<CR>
nnoremap <F5>   :GundoToggle<CR>
nnoremap <F6>   :set spell!<CR>
nnoremap <F7>   :RainbowToggle<CR>
nnoremap <F11>   zR
nnoremap <F12>   zM

" leader shortcuts to frequent commands
nnoremap <leader>a :AirlineToggle<CR>
nnoremap <leader>c :WatchForChanges!<CR>
nnoremap <leader>d :delmarks a-z<CR>
nnoremap <leader>f :set foldmethod=syntax<CR>:set foldmethod=manual<CR>
nnoremap <leader>h :split<CR>
nnoremap <leader>l :ls<CR>:b<space>
nnoremap <leader>m :DoShowMarks<CR>
nnoremap <leader>n :NoShowMarks<CR>
nnoremap <leader>p :set list!<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>r :W<CR>
nnoremap <leader>s :call StripTrailingWhitespaces()<CR>
vnoremap <leader>s :!sort -f<CR>
nnoremap <leader>t :tabnew<CR>
nnoremap <leader>v :vsplit<CR>
nnoremap <leader>w :w!<CR>
nnoremap <leader>x :wq<CR>

" alt/esc normal mode shortcuts to frequent commands
nnoremap <Esc>q     :quitall<CR>

" alt/esc insert mode shortcuts for movement
inoremap <Esc>i     <C-o>gk
inoremap <Esc>j     <C-o>j
inoremap <Esc>k     <C-o>gj
inoremap <Esc>l     <C-o>l
inoremap <Esc>b     <C-o>b
inoremap <Esc>B     <C-o>B
inoremap <Esc>e     <C-o>e
inoremap <Esc>E     <C-o>E
inoremap <Esc>w     <C-o>w
inoremap <Esc>W     <C-o>W
inoremap <Esc>0     <C-o>0
inoremap <Esc>6     <C-o>^
inoremap <Esc>4     <C-o>$

" shortcuts for managing tabs
noremap <C-n> gt
noremap <C-p> gT
noremap <Esc>n :tabmove +1<CR>
noremap <Esc>p :tabmove -1<CR>
noremap <Esc>1 1gt
noremap <Esc>2 2gt
noremap <Esc>3 3gt
noremap <Esc>4 4gt
noremap <Esc>5 5gt
noremap <Esc>6 6gt
noremap <Esc>7 7gt
noremap <Esc>8 8gt
noremap <Esc>9 9gt
noremap <Esc>0 :tablast<CR>

" make Y yank from cursor to end of line, consistent with C and D
nnoremap Y y$

" Alt-k/i inserts blank line above/below
nnoremap <silent><Esc>i :set paste<CR>m`O<Esc>``:set nopaste<CR>
nnoremap <silent><Esc>k :set paste<CR>m`o<Esc>``:set nopaste<CR>

" shifting doesn't exit visual mode
vnoremap < <gv
vnoremap > >gv

" cursor keys go up and down by visual lines
inoremap <up> <C-O>gk
inoremap <down> <C-O>gj
nnoremap <up> gk
nnoremap <down> gj
vnoremap <up> gk
vnoremap <down> gj
" left and right arrow keys shift text
nnoremap <Left> <<
nnoremap <Right> >>
"=============================================================================
